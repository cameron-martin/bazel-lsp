global {
  name: "False"
  type: "bool"
}
global {
  name: "None"
  type: "NoneType"
}
global {
  name: "True"
  type: "bool"
}
global {
  name: "abs"
  callable {
    param {
      name: "x"
      doc: "A number (int or float)"
      is_mandatory: true
    }
  }
  doc: "Returns the absolute value of a number (a non-negative number with the same magnitude).<pre class=\"language-python\">abs(-2.3) == 2.3</pre>"
}
global {
  name: "all"
  callable {
    param {
      name: "elements"
      doc: "A string or a collection of elements."
      is_mandatory: true
    }
  }
  doc: "Returns true if all elements evaluate to True or if the collection is empty. Elements are converted to boolean using the <a href=\"#bool\">bool</a> function.<pre class=\"language-python\">all([\"hello\", 3, True]) == True\nall([-1, 0, 1]) == False</pre>"
}
global {
  name: "any"
  callable {
    param {
      name: "elements"
      doc: "A string or a collection of elements."
      is_mandatory: true
    }
  }
  doc: "Returns true if at least one element evaluates to True. Elements are converted to boolean using the <a href=\"#bool\">bool</a> function.<pre class=\"language-python\">any([-1, 0, 1]) == True\nany([False, 0, \"\"]) == False</pre>"
}
global {
  name: "bool"
  callable {
    param {
      name: "x"
      doc: "The variable to convert."
      default_value: "False"
    }
  }
  doc: "Constructor for the bool type. It returns <code>False</code> if the object is <code>None</code>, <code>False</code>, an empty string (<code>\"\"</code>), the number <code>0</code>, or an empty collection (e.g. <code>()</code>, <code>[]</code>). Otherwise, it returns <code>True</code>."
}
global {
  name: "dict"
  callable {
    param {
      name: "pairs"
      doc: "A dict, or an iterable whose elements are each of length 2 (key, value)."
      default_value: "[]"
    }
    param {
      name: "**kwargs"
      doc: "Dictionary of additional entries."
      is_star_star_arg: true
    }
  }
  doc: "Creates a <a href=\"../core/dict.html\">dictionary</a> from an optional positional argument and an optional set of keyword arguments. In the case where the same key is given multiple times, the last value will be used. Entries supplied via keyword arguments are considered to come after entries supplied via the positional argument."
}
global {
  name: "dir"
  callable {
    param {
      name: "x"
      doc: "The object to check."
      is_mandatory: true
    }
  }
  doc: "Returns a list of strings: the names of the attributes and methods of the parameter object."
}
global {
  name: "enumerate"
  callable {
    param {
      name: "list"
      doc: "input sequence."
      is_mandatory: true
    }
    param {
      name: "start"
      doc: "start index."
      default_value: "0"
    }
  }
  doc: "Returns a list of pairs (two-element tuples), with the index (int) and the item from the input sequence.\n<pre class=\"language-python\">enumerate([24, 21, 84]) == [(0, 24), (1, 21), (2, 84)]</pre>\n"
}
global {
  name: "fail"
  callable {
    param {
      name: "msg"
      doc: "Deprecated: use positional arguments instead. This argument acts like an implicit leading positional argument."
      default_value: "None"
    }
    param {
      name: "attr"
      doc: "Deprecated. Causes an optional prefix containing this string to be added to the error message."
      default_value: "None"
    }
    param {
      name: "sep"
      doc: "The separator string between the objects, default is space (\" \")."
      default_value: "\" \""
    }
    param {
      name: "*args"
      doc: "A list of values, formatted with debugPrint (which is equivalent to str by default) and joined with sep (defaults to \" \"), that appear in the error message."
      is_star_arg: true
    }
  }
  doc: "Causes execution to fail with an error."
}
global {
  name: "float"
  callable {
    param {
      name: "x"
      doc: "The value to convert."
      default_value: "unbound"
    }
  }
  doc: "Returns x as a float value. <ul><li>If <code>x</code> is already a float, <code>float</code> returns it unchanged. <li>If <code>x</code> is a bool, <code>float</code> returns 1.0 for True and 0.0 for False. <li>If <code>x</code> is an int, <code>float</code> returns the nearest finite floating-point value to x, or an error if the magnitude is too large. <li>If <code>x</code> is a string, it must be a valid floating-point literal, or be equal (ignoring case) to <code>NaN</code>, <code>Inf</code>, or <code>Infinity</code>, optionally preceded by a <code>+</code> or <code>-</code> sign. </ul>Any other value causes an error. With no argument, <code>float()</code> returns 0.0."
}
global {
  name: "getattr"
  callable {
    param {
      name: "x"
      doc: "The struct whose attribute is accessed."
      is_mandatory: true
    }
    param {
      name: "name"
      doc: "The name of the struct attribute."
      is_mandatory: true
    }
    param {
      name: "default"
      doc: "The default value to return in case the struct doesn\'t have an attribute of the given name."
      default_value: "unbound"
    }
  }
  doc: "Returns the struct\'s field of the given name if it exists. If not, it either returns <code>default</code> (if specified) or raises an error. <code>getattr(x, \"foobar\")</code> is equivalent to <code>x.foobar</code>.<pre class=\"language-python\">getattr(ctx.attr, \"myattr\")\ngetattr(ctx.attr, \"myattr\", \"mydefault\")</pre>"
}
global {
  name: "hasattr"
  callable {
    param {
      name: "x"
      doc: "The object to check."
      is_mandatory: true
    }
    param {
      name: "name"
      doc: "The name of the attribute."
      is_mandatory: true
    }
  }
  doc: "Returns True if the object <code>x</code> has an attribute or method of the given <code>name</code>, otherwise False. Example:<br><pre class=\"language-python\">hasattr(ctx.attr, \"myattr\")</pre>"
}
global {
  name: "hash"
  callable {
    param {
      name: "value"
      doc: "String value to hash."
      is_mandatory: true
    }
  }
  doc: "Return a hash value for a string. This is computed deterministically using the same algorithm as Java\'s <code>String.hashCode()</code>, namely: <pre class=\"language-python\">s[0] * (31^(n-1)) + s[1] * (31^(n-2)) + ... + s[n-1]</pre> Hashing of values besides strings is not currently supported."
}
global {
  name: "int"
  callable {
    param {
      name: "x"
      doc: "The string to convert."
      is_mandatory: true
    }
    param {
      name: "base"
      doc: "The base used to interpret a string value; defaults to 10. Must be between 2 and 36 (inclusive), or 0 to detect the base as if <code>x</code> were an integer literal. This parameter must not be supplied if the value is not a string."
      default_value: "unbound"
    }
  }
  doc: "Returns x as an int value.<ul><li>If <code>x</code> is already an int, <code>int</code> returns it unchanged.<li>If <code>x</code> is a bool, <code>int</code> returns 1 for True and 0 for False.<li>If <code>x</code> is a string, it must have the format     <code>&lt;sign&gt;&lt;prefix&gt;&lt;digits&gt;</code>.     <code>&lt;sign&gt;</code> is either <code>\"+\"</code>, <code>\"-\"</code>,     or empty (interpreted as positive). <code>&lt;digits&gt;</code> are a     sequence of digits from 0 up to <code>base</code> - 1, where the letters a-z     (or equivalently, A-Z) are used as digits for 10-35. In the case where     <code>base</code> is 2/8/16, <code>&lt;prefix&gt;</code> is optional and may     be 0b/0o/0x (or equivalently, 0B/0O/0X) respectively; if the     <code>base</code> is any other value besides these bases or the special value     0, the prefix must be empty. In the case where <code>base</code> is 0, the     string is interpreted as an integer literal, in the sense that one of the     bases 2/8/10/16 is chosen depending on which prefix if any is used. If     <code>base</code> is 0, no prefix is used, and there is more than one digit,     the leading digit cannot be 0; this is to avoid confusion between octal and     decimal. The magnitude of the number represented by the string must be within     the allowed range for the int type.<li>If <code>x</code> is a float, <code>int</code> returns the integer value of    the float, rounding towards zero. It is an error if x is non-finite (NaN or    infinity).</ul>This function fails if <code>x</code> is any other type, or if the value is a string not satisfying the above format. Unlike Python\'s <code>int</code> function, this function does not allow zero arguments, and does not allow extraneous whitespace for string arguments.<p>Examples:<pre class=\"language-python\">int(\"123\") == 123\nint(\"-123\") == -123\nint(\"+123\") == 123\nint(\"FF\", 16) == 255\nint(\"0xFF\", 16) == 255\nint(\"10\", 0) == 10\nint(\"-0x10\", 0) == -16\nint(\"-0x10\", 0) == -16\nint(\"123.456\") == 123\n</pre>"
}
global {
  name: "len"
  callable {
    param {
      name: "x"
      doc: "The value whose length to report."
      is_mandatory: true
    }
  }
  doc: "Returns the length of a string, sequence (such as a list or tuple), dict, set, or other iterable."
}
global {
  name: "list"
  callable {
    param {
      name: "x"
      doc: "The object to convert."
      default_value: "[]"
    }
  }
  doc: "Returns a new list with the same elements as the given iterable value.<pre class=\"language-python\">list([1, 2]) == [1, 2]\nlist((2, 3, 2)) == [2, 3, 2]\nlist({5: \"a\", 2: \"b\", 4: \"c\"}) == [5, 2, 4]</pre>"
}
global {
  name: "max"
  callable {
    param {
      name: "key"
      doc: "An optional function applied to each element before comparison."
      default_value: "None"
    }
    param {
      name: "*args"
      doc: "The elements to be checked."
      is_star_arg: true
    }
  }
  doc: "Returns the largest one of all given arguments. If only one positional argument is provided, it must be a non-empty iterable.It is an error if elements are not comparable (for example int with string), or if no arguments are given.<pre class=\"language-python\">\nmax(2, 5, 4) == 5\nmax([5, 6, 3]) == 6\nmax(\"two\", \"three\", \"four\", key = len) ==\"three\"  # the longest\nmax([1, -1, -2, 2], key = abs) == -2  # the first encountered with maximal key value\n</pre>"
}
global {
  name: "min"
  callable {
    param {
      name: "key"
      doc: "An optional function applied to each element before comparison."
      default_value: "None"
    }
    param {
      name: "*args"
      doc: "The elements to be checked."
      is_star_arg: true
    }
  }
  doc: "Returns the smallest one of all given arguments. If only one positional argument is provided, it must be a non-empty iterable. It is an error if elements are not comparable (for example int with string), or if no arguments are given.<pre class=\"language-python\">\nmin(2, 5, 4) == 2\nmin([5, 6, 3]) == 3\nmin(\"six\", \"three\", \"four\", key = len) == \"six\"  # the shortest\nmin([2, -2, -1, 1], key = abs) == -1  # the first encountered with minimal key value\n</pre>"
}
global {
  name: "print"
  callable {
    param {
      name: "sep"
      doc: "The separator string between the objects, default is space (\" \")."
      default_value: "\" \""
    }
    param {
      name: "*args"
      doc: "The objects to print."
      is_star_arg: true
    }
  }
  doc: "Prints <code>args</code> as debug output. It will be prefixed with the string <code>\"DEBUG\"</code> and the location (file and line number) of this call. The exact way in which the arguments are converted to strings is unspecified and may change at any time. In particular, it may be different from (and more detailed than) the formatting done by <a href=\'#str\'><code>str()</code></a> and <a href=\'#repr\'><code>repr()</code></a>.<p>Using <code>print</code> in production code is discouraged due to the spam it creates for users. For deprecations, prefer a hard error using <a href=\"#fail\"><code>fail()</code></a> whenever possible."
}
global {
  name: "range"
  callable {
    param {
      name: "start_or_stop"
      doc: "Value of the start element if stop is provided, otherwise value of stop and the actual start is 0"
      is_mandatory: true
    }
    param {
      name: "stop_or_none"
      doc: "optional index of the first item <i>not</i> to be included in the resulting list; generation of the list stops before <code>stop</code> is reached."
      default_value: "None"
    }
    param {
      name: "step"
      doc: "The increment (default is 1). It may be negative."
      default_value: "1"
    }
  }
  doc: "Creates a list where items go from <code>start</code> to <code>stop</code>, using a <code>step</code> increment. If a single argument is provided, items will range from 0 to that element.<pre class=\"language-python\">range(4) == [0, 1, 2, 3]\nrange(3, 9, 2) == [3, 5, 7]\nrange(3, 0, -1) == [3, 2, 1]</pre>"
}
global {
  name: "repr"
  callable {
    param {
      name: "x"
      doc: "The object to convert."
      is_mandatory: true
    }
  }
  doc: "Converts any object to a string representation. This is useful for debugging.<br><pre class=\"language-python\">repr(\"ab\") == \'\"ab\"\'</pre>"
}
global {
  name: "reversed"
  callable {
    param {
      name: "sequence"
      doc: "The iterable sequence (e.g. list) to be reversed."
      is_mandatory: true
    }
  }
  doc: "Returns a new, unfrozen list that contains the elements of the original iterable sequence in reversed order.<pre class=\"language-python\">reversed([3, 5, 4]) == [4, 5, 3]</pre>"
}
global {
  name: "set"
  callable {
    param {
      name: "elements"
      doc: "A set, a sequence of hashable values, or a dict."
      default_value: "[]"
    }
  }
  doc: "Creates a new <a href=\"../core/set.html\">set</a> containing the unique elements of a given\niterable, preserving iteration order.\n\n<p>If called with no argument, <code>set()</code> returns a new empty set.\n\n<p>For example,\n<pre class=language-python>\nset()                          # an empty set\nset([3, 1, 1, 2])              # set([3, 1, 2]), a set of three elements\nset({\"k1\": \"v1\", \"k2\": \"v2\"})  # set([\"k1\", \"k2\"]), a set of two elements\n</pre>\n"
}
global {
  name: "sorted"
  callable {
    param {
      name: "iterable"
      doc: "The iterable sequence to sort."
      is_mandatory: true
    }
    param {
      name: "key"
      doc: "An optional function applied to each element before comparison."
      default_value: "None"
    }
    param {
      name: "reverse"
      doc: "Return results in descending order."
      default_value: "False"
    }
  }
  doc: "Returns a new sorted list containing all the elements of the supplied iterable sequence. An error may occur if any pair of elements x, y may not be compared using x < y. The elements are sorted into ascending order, unless the reverse argument is True, in which case the order is descending.\n Sorting is stable: elements that compare equal retain their original relative order.\n<pre class=\"language-python\">\nsorted([3, 5, 4]) == [3, 4, 5]\nsorted([3, 5, 4], reverse = True) == [5, 4, 3]\nsorted([\"two\", \"three\", \"four\"], key = len) == [\"two\", \"four\", \"three\"]  # sort by length\n</pre>"
}
global {
  name: "str"
  callable {
    param {
      name: "x"
      doc: "The object to convert."
      is_mandatory: true
    }
  }
  doc: "Converts any object to string. This is useful for debugging.<pre class=\"language-python\">str(\"ab\") == \"ab\"\nstr(8) == \"8\"</pre>"
}
global {
  name: "tuple"
  callable {
    param {
      name: "x"
      doc: "The object to convert."
      default_value: "()"
    }
  }
  doc: "Returns a tuple with the same elements as the given iterable value.<pre class=\"language-python\">tuple([1, 2]) == (1, 2)\ntuple((2, 3, 2)) == (2, 3, 2)\ntuple({5: \"a\", 2: \"b\", 4: \"c\"}) == (5, 2, 4)</pre>"
}
global {
  name: "type"
  callable {
    param {
      name: "x"
      doc: "The object to check type of."
      is_mandatory: true
    }
  }
  doc: "Returns the type name of its argument. This is useful for debugging and type-checking. Examples:<pre class=\"language-python\">type(2) == \"int\"\ntype([1]) == \"list\"\ntype(struct(a = 2)) == \"struct\"</pre>This function might change in the future. To write Python-compatible code and be future-proof, use it only to compare return values: <pre class=\"language-python\">if type(x) == type([]):  # if x is a list</pre>"
}
global {
  name: "zip"
  callable {
    param {
      name: "*args"
      doc: "lists to zip."
      is_star_arg: true
    }
  }
  doc: "Returns a <code>list</code> of <code>tuple</code>s, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. The list has the size of the shortest input. With a single iterable argument, it returns a list of 1-tuples. With no arguments, it returns an empty list. Examples:<pre class=\"language-python\">zip()  # == []\nzip([1, 2])  # == [(1,), (2,)]\nzip([1, 2], [3, 4])  # == [(1, 3), (2, 4)]\nzip([1, 2], [3, 4, 5])  # == [(1, 3), (2, 4)]</pre>"
}
global {
  name: "Actions"
  doc: "<b>Deprecated and subject to imminent removal. Please do not use.</b>"
  api_context: BZL
}
global {
  name: "AnalysisFailureInfo"
  doc: "<b>Experimental. This API is experimental and subject to change at any time</b><p> Encapsulates information about an analysis-phase error which would have occurred during a build. In most builds, an analysis-phase error would result in a build failure and the error description would be output to the console. However, if <code>--allow_analysis_failure</code> is set, targets which would otherwise fail in analysis will instead propagate an instance of this object (and no other provider instances). <p>Under <code>--allow_analysis_failure</code>, <code>AnalysisFailureInfo</code> objects are automatically re-propagated up a dependency tree using the following logic:<ul><li>If a target fails but none of its direct dependencies propagated <code>AnalysisFailureInfo</code>, then propagate an instance of this provider containing an <code>AnalysisFailure</code> object describing the failure.</li> <li>If one or more of a target\'s dependencies propagated <code>AnalysisFailureInfo</code>, then propagate a provider with <code>causes</code> equal to the union of the <code>causes</code> of the dependencies.</li></ul> If an aspect and the rule target that it is applied to both provide AnalysisFailureInfo, the instances are merged."
  api_context: BZL
}
global {
  name: "AnalysisTestResultInfo"
  callable {
    param {
      name: "success"
      doc: "If true, then the analysis-phase test represented by this target should pass. If false, the test should fail."
      is_mandatory: true
    }
    param {
      name: "message"
      doc: "A descriptive message containing information about the test and its success/failure."
      is_mandatory: true
    }
  }
  doc: "Encapsulates the result of analyis-phase testing. Build targets which return an instance of this provider signal to the build system that it should generate a \'stub\' test executable which generates the equivalent test result. Analysis test rules (rules created with <code>analysis_test=True</code> <b>must</b> return an instance of this provider, and non-analysis-phase test rules <b>cannot</b> return this provider."
  api_context: BZL
}
global {
  name: "AndroidIdeInfo"
  type: "CLASS: com.google.devtools.build.lib.packages.AutoloadSymbols$1"
  api_context: BZL
}
global {
  name: "CcInfo"
  callable {
    param {
      name: "compilation_context"
      doc: "The <code>CompilationContext</code>."
      default_value: "None"
    }
    param {
      name: "linking_context"
      doc: "The <code>LinkingContext</code>."
      default_value: "None"
    }
    param {
      name: "debug_context"
      doc: "The <code>DebugContext</code>."
      default_value: "None"
    }
  }
  doc: "A provider for compilation and linking of C++. This is also a marking provider telling C++ rules that they can depend on the rule with this provider. If it is not intended for the rule to be depended on by C++, the rule should wrap the CcInfo in some other provider."
  api_context: BZL
}
global {
  name: "CcSharedLibraryHintInfo"
  callable {
    param {
      name: "attributes"
      doc: "[String] - If not set, the aspect will use the result of every dependency that provides CcInfo, ProtoInfo or CcSharedLibraryHintInfo. If empty list, the aspect will not use the result of any dependency. If the list contains a list of attribute names, the aspect will only use the dependencies corresponding to those attributes as long as they provide CcInfo, ProtoInfo or CcSharedLibraryHintInfo"
      is_mandatory: true
    }
    param {
      name: "owners"
      doc: "[Label] - cc_shared_library will know which linker_inputs to link based on the owners field of each linker_input. Most rules will simply use the ctx.label but certain APIs like cc_common.create_linker_input(owner=) accept any label. cc_common.create_linking_context_from_compilation_outputs() accepts a `name` which will then be used to create the owner of the linker_input together with ctx.package.For these cases, since the cc_shared_library cannot guess, the rule author should provide a hint with the owners of the linker inputs. If the value of owners is not set, then ctx.label will be used. If the rule author passes a list and they want ctx.label plus some other label then they will have to add ctx.label explicitly. If you want to use custom owners from C++ rules keep as close to the original ctx.label as possible, to avoid conflicts with linker_inputs created by other targets keep the original repository name, the original package name and re-use the original name as part of your new name, limiting your custom addition to a prefix or suffix."
      is_mandatory: true
    }
  }
  doc: "This provider should be used by rules that provide C++ linker inputs and\nwant to guide what the cc_shared_library uses. The reason for this may be\nfor example because the rule is not providing a standard provider like\nCcInfo or ProtoInfo or because the rule does not want certain attributes\nto be used for linking into shared libraries. It may also be needed if the\nrule is using non-standard linker_input.owner names.\n\nPropagation of the cc_shared_library aspect will always happen via all\nattributes that provide either CcInfo, ProtoInfo or\nCcSharedLibraryHintInfo, the hints control whether the result of that\npropagation actually gets used."
  api_context: BZL
}
global {
  name: "CcSharedLibraryInfo"
  callable {
    param {
      name: "dynamic_deps"
      doc: "All shared libraries depended on transitively"
      is_mandatory: true
    }
    param {
      name: "exports"
      doc: "cc_libraries that are linked statically and exported"
      is_mandatory: true
    }
    param {
      name: "link_once_static_libs"
      doc: "All libraries linked statically into this library that should only be linked once, e.g. because they have static initializers. If we try to link them more than once, we will throw an error"
      is_mandatory: true
    }
    param {
      name: "linker_input"
      doc: "the resulting linker input artifact for the shared library"
      is_mandatory: true
    }
  }
  doc: "Information about a cc shared library."
  api_context: BZL
}
global {
  name: "CcToolchainConfigInfo"
  doc: "Additional layer of configurability for C++ rules. Encapsulates platform-dependent specifics of C++ actions through features and action configs. It is used to configure the C++ toolchain, and later on for command line construction. Replaces the functionality of CROSSTOOL file."
  api_context: BZL
}
global {
  name: "DebugPackageInfo"
  callable {
    param {
      name: "target_label"
      doc: "The label for the *_binary target"
      is_mandatory: true
    }
    param {
      name: "stripped_file"
      doc: "The stripped file (the explicit \".stripped\" target)"
      default_value: "None"
    }
    param {
      name: "unstripped_file"
      doc: "The unstripped file (the default executable target)."
      is_mandatory: true
    }
    param {
      name: "dwp_file"
      doc: "The .dwp file (for fission builds) or null if --fission=no."
      default_value: "None"
    }
  }
  doc: "A provider for the binary file and its associated .dwp files, if fission is enabled.If Fission ({@url https://gcc.gnu.org/wiki/DebugFission}) is not enabled, the dwp file will be null."
  api_context: BZL
}
global {
  name: "DefaultInfo"
  callable {
    param {
      name: "files"
      doc: "A <a href=\'../builtins/depset.html\'><code>depset</code></a> of <a href=\'../builtins/File.html\'><code>File</code></a> objects representing the default outputs to build when this target is specified on the bazel command line. By default it is all predeclared outputs."
      default_value: "None"
    }
    param {
      name: "runfiles"
      doc: "runfiles descriptor describing the files that this target needs when run (via the <code>run</code> command or as a tool dependency)."
      default_value: "None"
    }
    param {
      name: "data_runfiles"
      doc: "<p><b>It is recommended that you avoid using this parameter (see <a href=\'https://bazel.build/extending/rules#runfiles_features_to_avoid\'>\"runfiles features to avoid\"</a>)</b></p> runfiles descriptor describing the runfiles this target needs to run when it is a dependency via the <code>data</code> attribute."
      default_value: "None"
    }
    param {
      name: "default_runfiles"
      doc: "<p><b>It is recommended that you avoid using this parameter (see <a href=\'https://bazel.build/extending/rules#runfiles_features_to_avoid\'>\"runfiles features to avoid\"</a>)</b></p> runfiles descriptor describing the runfiles this target needs to run when it is a dependency via any attribute other than the <code>data</code> attribute."
      default_value: "None"
    }
    param {
      name: "executable"
      doc: "If this rule is marked <a href=\'../globals/bzl.html#rule.executable\'><code>executable</code></a> or <a href=\'../globals/bzl.html#rule.test\'><code>test</code></a>, this is a <a href=\'../builtins/File.html\'><code>File</code></a> object representing the file that should be executed to run the target. By default it is the predeclared output <code>ctx.outputs.executable</code> but it is recommended to pass another file (either predeclared or not) explicitly."
      default_value: "None"
    }
  }
  doc: "A provider that gives general information about a target\'s direct and transitive files. Every rule type has this provider, even if it is not returned explicitly by the rule\'s implementation function. Each <code>DefaultInfo</code> instance has the following fields: <ul><li><code>files</code><li><code>files_to_run</code><li><code>data_runfiles</code><li><code>default_runfiles</code></ul>See the <a href=\'https://bazel.build/extending/rules\'>rules</a> page for extensive guides on how to use this provider."
  api_context: BZL
}
global {
  name: "InstrumentedFilesInfo"
  doc: "Contains information about source files and instrumentation metadata files for rule targets matched by <a href=\"https://bazel.build/reference/command-line-reference#flag--instrumentation_filter\"><code>--instrumentation_filter</code></a> for purposes of <a href=\"https://bazel.build/extending/rules#code_coverage\">code coverage data collection</a>. When coverage data collection is enabled, a manifest containing the combined paths in <a href=\"#instrumented_files\"><code>instrumented_files</code></a> and <a href=\"#metadata_files\"><code>metadata_files</code></a> are passed to the test action as inputs, with the manifest\'s path noted in the environment variable <code>COVERAGE_MANIFEST</code>. The metadata files, but not the source files, are also passed to the test action as inputs. When <code>InstrumentedFilesInfo</code> is returned by an <a href=\"https://bazel.build/rules/aspects\">aspect</a>\'s implementation function, any <code>InstrumentedFilesInfo</code> from the base rule target is ignored."
  api_context: BZL
}
global {
  name: "JavaInfo"
  callable {
    param {
      name: "annotation_processing"
      doc: "Deprecated: Please use plugins instead."
      is_mandatory: true
    }
    param {
      name: "api_generating_plugins"
      doc: "\"(_JavaPluginDataInfo) Data about API generating plugins\ndefined or exported by this target.\nThose annotation processors are applied to a Java target before\nproducing its header jars (which contain method signatures). When\nno API plugins are present, header jars are generated from the\nsources, reducing critical path.\nThe `api_generating_plugins` is a subset of `plugins`."
      is_mandatory: true
    }
    param {
      name: "cc_link_params_info"
      doc: "Deprecated. Do not use. C++ libraries to be linked into Java targets."
      is_mandatory: true
    }
    param {
      name: "compilation_info"
      doc: "(java_compilation_info) Compilation information for this\nJava/Java-like target."
      is_mandatory: true
    }
    param {
      name: "compile_jars"
      doc: "(depset[File]) The jars required directly at compile time. They can be interface jars\n(ijar or hjar), regular jars or both, depending on whether rule\nimplementations chose to create interface jars or not."
      is_mandatory: true
    }
    param {
      name: "full_compile_jars"
      doc: "(depset[File]) The regular, full compile time Jars required by this target directly.\nThey can be:\n - the corresponding regular Jars of the interface Jars returned by JavaInfo.compile_jars\n - the regular (full) Jars returned by JavaInfo.compile_jars\n\nNote: JavaInfo.compile_jars can return a mix of interface Jars and\nregular Jars.<p>Only use this method if interface Jars don\'t work with\nyour rule set(s) (e.g. some Scala targets) If you\'re working with\nJava-only targets it\'s preferable to use interface Jars via\nJavaInfo.compile_jars"
      is_mandatory: true
    }
    param {
      name: "java_outputs"
      doc: "(_JavaOutputInfo) Information about outputs of this Java/Java-like target."
      is_mandatory: true
    }
    param {
      name: "module_flags_info"
      doc: "(_ModuleFlagsInfo) The Java module flag configuration."
      is_mandatory: true
    }
    param {
      name: "outputs"
      doc: "Deprecated: use java_outputs."
      is_mandatory: true
    }
    param {
      name: "plugins"
      doc: "(_JavaPluginDataInfo) Data about all plugins that a consuming target should\napply.\nThis is typically either a `java_plugin` itself or a `java_library` exporting\none or more plugins.\nA `java_library` runs annotation processing with all plugins from this field\nappearing in <code>deps</code> and `plugins` attributes."
      is_mandatory: true
    }
    param {
      name: "runtime_output_jars"
      doc: "([File]) A list of runtime Jars created by this Java/Java-like target."
      is_mandatory: true
    }
    param {
      name: "source_jars"
      doc: "([File]) A list of Jars with all the source files (including those generated by\nannotations) of the target itself, i.e. NOT including the sources of the\ntransitive dependencies."
      is_mandatory: true
    }
    param {
      name: "transitive_compile_time_jars"
      doc: "(depset[File]) The transitive set of jars required to\nbuild the target.\n<p/>Note: for binary targets (such as java_binary and java_test), this is empty, since such\ntargets are not intended to be dependencies of other Java targets."
      is_mandatory: true
    }
    param {
      name: "transitive_native_libraries"
      doc: "(depset[LibraryToLink]) The transitive set of CC native\nlibraries required by the target."
      is_mandatory: true
    }
    param {
      name: "transitive_runtime_jars"
      doc: "(depset[File]) A transitive set of jars required on the\nruntime classpath.\n<p/>Note: for binary targets (such as java_binary and java_test), this is empty, since such\ntargets are not intended to be dependencies of other Java targets."
      is_mandatory: true
    }
    param {
      name: "transitive_source_jars"
      doc: "(depset[File]) The Jars of all source files in the transitive closure."
      is_mandatory: true
    }
  }
  doc: "Info object encapsulating all information by java rules."
  api_context: BZL
}
global {
  name: "JavaPluginInfo"
  callable {
    param {
      name: "api_generating_plugins"
      doc: "Returns data about API generating plugins defined or exported by\nthis target.\nThose annotation processors are applied to a Java target before\nproducing its header jars (which contain method signatures). When\nno API plugins are present, header jars are generated from the\nsources, reducing critical path.\nThe <code>api_generating_plugins</code> is a subset of\n<code>plugins</code>."
      is_mandatory: true
    }
    param {
      name: "java_outputs"
      doc: "Returns information about outputs of this Java/Java-like target."
      is_mandatory: true
    }
    param {
      name: "plugins"
      doc: "Returns data about all plugins that a consuming target should apply.\nThis is typically either a <code>java_plugin</code> itself or a\n<code>java_library</code> exporting one or more plugins.\nA <code>java_library</code> runs annotation processing with all\nplugins from this field appearing in <code>deps</code> and\n<code>plugins</code> attributes."
      is_mandatory: true
    }
  }
  doc: "Provider encapsulating information about Java plugins."
  api_context: BZL
}
global {
  name: "Label"
  callable {
    param {
      name: "input"
      doc: "The input label string or Label object. If a Label object is passed, it\'s returned as is."
      is_mandatory: true
    }
  }
  doc: "Converts a label string into a <code>Label</code> object, in the context of the package where the calling <code>.bzl</code> source file lives. If the given value is already a <code>Label</code>, it is returned unchanged.<p>For macros, a related function, <code><a href=\'../toplevel/native.html#package_relative_label\'>native.package_relative_label()</a></code>, converts the input into a <code>Label</code> in the context of the package currently being constructed. Use that function to mimic the string-to-label conversion that is automatically done by label-valued rule attributes."
  api_context: BZL
}
global {
  name: "OutputGroupInfo"
  callable {
    param {
      name: "**kwargs"
      doc: "Dictionary of arguments."
      is_star_star_arg: true
    }
  }
  doc: "A provider that indicates what output groups a rule has.<br>See <a href=\"https://bazel.build/extending/rules#requesting_output_files\">Requesting output files</a> for more information."
  api_context: BZL
}
global {
  name: "PackageSpecificationInfo"
  doc: "Information about transitive package specifications used in package groups."
  api_context: BZL
}
global {
  name: "ProguardSpecProvider"
  callable {
    param {
      name: "specs"
      doc: "A list of proguard specs files"
      is_mandatory: true
    }
  }
  doc: "Information about proguard specs for Android binaries."
  api_context: BZL
}
global {
  name: "ProtoInfo"
  callable {
    param {
      name: "allow_exports"
      doc: "(Target) The packages where this proto_library can be exported."
      is_mandatory: true
    }
    param {
      name: "check_deps_sources"
      doc: "(depset[File]) The `.proto` sources from the \'srcs\' attribute.\nIf the library is a proxy library that has no sources, it contains the\n`check_deps_sources` from this library\'s direct deps."
      is_mandatory: true
    }
    param {
      name: "direct_descriptor_set"
      doc: "(File) The descriptor set of the direct sources. If no srcs,\ncontains an empty file."
      is_mandatory: true
    }
    param {
      name: "direct_sources"
      doc: "(list[File]) The `.proto` source files from the `srcs` attribute."
      is_mandatory: true
    }
    param {
      name: "proto_source_root"
      doc: "(str) The directory relative to which the `.proto` files defined in\nthe `proto_library` are defined. For example, if this is `a/b` and the rule has the\nfile `a/b/c/d.proto` as a source, that source file would be imported as\n`import c/d.proto`\n\nIn principle, the `proto_source_root` directory itself should always\nbe relative to the output directory (`ctx.bin_dir`).\n\nThis is at the moment not true for `proto_libraries` using (additional and/or strip)\nimport prefixes. `proto_source_root` is in this case prefixed with the output\ndirectory. For example, the value is similar to\n`bazel-out/k8-fastbuild/bin/a/_virtual_includes/b` for an input file in\n`a/_virtual_includes/b/c.proto` that should be imported as `c.proto`.\n\nWhen using the value please account for both cases in a general way.\nThat is assume the value is either prefixed with the output directory or not.\nThis will make it possible to fix `proto_library` in the future."
      is_mandatory: true
    }
    param {
      name: "transitive_descriptor_sets"
      doc: "(depset[File]) A set of descriptor set files of all\ndependent `proto_library` rules, and this one\'s. This is not the same as passing\n--include_imports to proto-compiler. Will be empty if no dependencies."
      is_mandatory: true
    }
    param {
      name: "transitive_imports"
      doc: "(depset[File]) Deprecated: use `transitive_sources` instead."
      is_mandatory: true
    }
    param {
      name: "transitive_proto_path"
      doc: "(depset(str) A set of `proto_source_root`s collected from the\ntransitive closure of this rule."
      is_mandatory: true
    }
    param {
      name: "transitive_sources"
      doc: "(depset[File]) The `.proto` source files from this rule and all\nits dependent protocol buffer rules."
      is_mandatory: true
    }
  }
  doc: "Encapsulates information provided by a `proto_library.`"
  api_context: BZL
}
global {
  name: "PyCcLinkParamsProvider"
  callable {
    param {
      name: "cc_info"
      doc: ":type: CcInfo\n\nLinking information; it has only {obj}`CcInfo.linking_context` set."
      is_mandatory: true
    }
  }
  doc: "Python-wrapper to forward {obj}`CcInfo.linking_context`. This is to allow Python targets to propagate C++ linking information, but without the Python target appearing to be a valid C++ rule dependency"
  api_context: BZL
}
global {
  name: "PyInfo"
  callable {
    param {
      name: "direct_pyc_files"
      doc: ":type: depset[File]\n\nPrecompiled Python files that are considered directly provided\nby the target and **must be included**.\n\nThese files usually come from, e.g., a library setting {attr}`precompile=enabled`\nto forcibly enable precompiling for itself. Downstream binaries are expected\nto always include these files, as the originating target expects them to exist."
      is_mandatory: true
    }
    param {
      name: "has_py2_only_sources"
      doc: ":type: bool\n\nWhether any of this target\'s transitive sources requires a Python 2 runtime."
      is_mandatory: true
    }
    param {
      name: "has_py3_only_sources"
      doc: ":type: bool\n\nWhether any of this target\'s transitive sources requires a Python 3 runtime."
      is_mandatory: true
    }
    param {
      name: "imports"
      doc: ":type: depset[str]\n\nA depset of import path strings to be added to the `PYTHONPATH` of executable\nPython targets. These are accumulated from the transitive `deps`.\nThe order of the depset is not guaranteed and may be changed in the future. It\nis recommended to use `default` order (the default)."
      is_mandatory: true
    }
    param {
      name: "transitive_implicit_pyc_files"
      doc: ":type: depset[File]\n\nAutomatically generated pyc files that downstream binaries (or equivalent)\ncan choose to include in their output. If not included, then\n{obj}`transitive_implicit_pyc_source_files` should be included instead.\n\n::::{versionadded} 0.37.0\n::::"
      is_mandatory: true
    }
    param {
      name: "transitive_implicit_pyc_source_files"
      doc: ":type: depset[File]\n\nSource `.py` files for {obj}`transitive_implicit_pyc_files` that downstream\nbinaries (or equivalent) can choose to include in their output. If not included,\nthen {obj}`transitive_implicit_pyc_files` should be included instead.\n\n::::{versionadded} 0.37.0\n::::"
      is_mandatory: true
    }
    param {
      name: "transitive_pyc_files"
      doc: ":type: depset[File]\n\nThe transitive set of precompiled files that must be included.\n\nThese files usually come from, e.g., a library setting {attr}`precompile=enabled`\nto forcibly enable precompiling for itself. Downstream binaries are expected\nto always include these files, as the originating target expects them to exist."
      is_mandatory: true
    }
    param {
      name: "transitive_sources"
      doc: ":type: depset[File]\n\nA (`postorder`-compatible) depset of `.py` files that are considered required\nand downstream binaries (or equivalent) **must** include in their outputs\nto have a functioning program.\n\nNormally, these are the `.py` files in the appearing in the target\'s `srcs` and\nthe `srcs` of the target\'s transitive `deps`, **however**, precompile settings\nmay cause `.py` files to be omitted. In particular, pyc-only builds may result\nin this depset being **empty**.\n\n::::{versionchanged} 0.37.0\nThe files are considered necessary for downstream binaries to function;\npreviously they were considerd informational and largely unused.\n::::"
      is_mandatory: true
    }
    param {
      name: "uses_shared_libraries"
      doc: ":type: bool\n\nWhether any of this target\'s transitive `deps` has a shared library file (such\nas a `.so` file).\n\nThis field is currently unused in Bazel and may go away in the future."
      is_mandatory: true
    }
  }
  doc: "Encapsulates information provided by the Python rules."
  api_context: BZL
}
global {
  name: "PyRuntimeInfo"
  callable {
    param {
      name: "abi_flags"
      doc: ":type: str\n\nThe runtime\'s ABI flags, i.e. `sys.abiflags`."
      is_mandatory: true
    }
    param {
      name: "bootstrap_template"
      doc: ":type: File\n\nA template of code responsible for the initial startup of a program.\n\nThis code is responsible for:\n\n* Locating the target interpreter. Typically it is in runfiles, but not always.\n* Setting necessary environment variables, command line flags, or other\n  configuration that can\'t be modified after the interpreter starts.\n* Invoking the appropriate entry point. This is usually a second-stage bootstrap\n  that performs additional setup prior to running a program\'s actual entry point.\n\nThe {obj}`--bootstrap_impl` flag affects how this stage 1 bootstrap\nis expected to behave and the substutitions performed.\n\n* `--bootstrap_impl=system_python` substitutions: `%is_zipfile%`, `%python_binary%`,\n  `%target%`, `%workspace_name`, `%coverage_tool%`, `%import_all%`, `%imports%`,\n  `%main%`, `%shebang%`\n* `--bootstrap_impl=script` substititions: `%is_zipfile%`, `%python_binary%`,\n  `%target%`, `%workspace_name`, `%shebang%, `%stage2_bootstrap%`\n\nSubstitution definitions:\n\n* `%shebang%`: The shebang to use with the bootstrap; the bootstrap template\n  may choose to ignore this.\n* `%stage2_bootstrap%`: A runfiles-relative path to the stage 2 bootstrap.\n* `%python_binary%`: The path to the target Python interpreter. There are three\n  types of paths:\n  * An absolute path to a system interpreter (e.g. begins with `/`).\n  * A runfiles-relative path to an interpreter (e.g. `somerepo/bin/python3`)\n  * A program to search for on PATH, i.e. a word without spaces, e.g. `python3`.\n* `%workspace_name%`: The name of the workspace the target belongs to.\n* `%is_zipfile%`: The string `1` if this template is prepended to a zipfile to\n  create a self-executable zip file. The string `0` otherwise.\n\nFor the other substitution definitions, see the {obj}`stage2_bootstrap_template`\ndocs.\n\n:::{versionchanged} 0.33.0\nThe set of substitutions depends on {obj}`--bootstrap_impl`\n:::"
      is_mandatory: true
    }
    param {
      name: "coverage_files"
      doc: ":type: depset[File] | None\n\nThe files required at runtime for using `coverage_tool`. Will be `None` if no\n`coverage_tool` was provided."
      is_mandatory: true
    }
    param {
      name: "coverage_tool"
      doc: ":type: File | None\n\nIf set, this field is a `File` representing tool used for collecting code\ncoverage information from python tests. Otherwise, this is `None`."
      is_mandatory: true
    }
    param {
      name: "files"
      doc: ":type: depset[File] | None\n\nIf this is an in-build runtime, this field is a `depset` of `File`s that need to\nbe added to the runfiles of an executable target that uses this runtime (in\nparticular, files needed by `interpreter`). The value of `interpreter` need not\nbe included in this field. If this is a platform runtime then this field is\n`None`."
      is_mandatory: true
    }
    param {
      name: "implementation_name"
      doc: ":type: str | None\n\nThe Python implementation name (`sys.implementation.name`)"
      is_mandatory: true
    }
    param {
      name: "interpreter"
      doc: ":type: File | None\n\nIf this is an in-build runtime, this field is a `File` representing the\ninterpreter. Otherwise, this is `None`. Note that an in-build runtime can use\neither a prebuilt, checked-in interpreter or an interpreter built from source."
      is_mandatory: true
    }
    param {
      name: "interpreter_path"
      doc: ":type: str | None\n\nIf this is a platform runtime, this field is the absolute filesystem path to the\ninterpreter on the target platform. Otherwise, this is `None`."
      is_mandatory: true
    }
    param {
      name: "interpreter_version_info"
      doc: ":type: struct\n\nVersion information about the interpreter this runtime provides.\nIt should match the format given by `sys.version_info`, however\nfor simplicity, the micro, releaselevel, and serial values are\noptional.\nA struct with the following fields:\n* `major`: {type}`int`, the major version number\n* `minor`: {type}`int`, the minor version number\n* `micro`: {type}`int | None`, the micro version number\n* `releaselevel`: {type}`str | None`, the release level\n* `serial`: {type}`int | None`, the serial number of the release"
      is_mandatory: true
    }
    param {
      name: "pyc_tag"
      doc: ":type: str | None\n\nThe tag portion of a pyc filename, e.g. the `cpython-39` infix\nof `foo.cpython-39.pyc`. See PEP 3147. If not specified, it will be computed\nfrom {obj}`implementation_name` and {obj}`interpreter_version_info`. If no\npyc_tag is available, then only source-less pyc generation will function\ncorrectly."
      is_mandatory: true
    }
    param {
      name: "python_version"
      doc: ":type: str\n\nIndicates whether this runtime uses Python major version 2 or 3. Valid values\nare (only) `\"PY2\"` and `\"PY3\"`."
      is_mandatory: true
    }
    param {
      name: "stage2_bootstrap_template"
      doc: ":type: File\n\nA template of Python code that runs under the desired interpreter and is\nresponsible for orchestrating calling the program\'s actual main code. This\nbootstrap is responsible for affecting the current runtime\'s state, such as\nimport paths or enabling coverage, so that, when it runs the program\'s actual\nmain code, it works properly under Bazel.\n\nThe following substitutions are made during template expansion:\n* `%main%`: A runfiles-relative path to the program\'s actual main file. This\n  can be a `.py` or `.pyc` file, depending on precompile settings.\n* `%coverage_tool%`: Runfiles-relative path to the coverage library\'s entry point.\n  If coverage is not enabled or available, an empty string.\n* `%import_all%`: The string `True` if all repositories in the runfiles should\n  be added to sys.path. The string `False` otherwise.\n* `%imports%`: A colon-delimited string of runfiles-relative paths to add to\n  sys.path.\n* `%target%`: The name of the target this is for.\n* `%workspace_name%`: The name of the workspace the target belongs to.\n\n:::{versionadded} 0.33.0\n:::"
      is_mandatory: true
    }
    param {
      name: "stub_shebang"
      doc: ":type: str\n\n\"Shebang\" expression prepended to the bootstrapping Python stub\nscript used when executing {obj}`py_binary` targets.  Does not\napply to Windows."
      is_mandatory: true
    }
    param {
      name: "zip_main_template"
      doc: ":type: File\n\nA template of Python code that becomes a zip file\'s top-level `__main__.py`\nfile. The top-level `__main__.py` file is used when the zip file is explicitly\npassed to a Python interpreter. See PEP 441 for more information about zipapp\nsupport. Note that py_binary-generated zip files are self-executing and\nskip calling `__main__.py`.\n\nThe following substitutions are made during template expansion:\n* `%stage2_bootstrap%`: A runfiles-relative string to the stage 2 bootstrap file.\n* `%python_binary%`: The path to the target Python interpreter. There are three\n  types of paths:\n  * An absolute path to a system interpreter (e.g. begins with `/`).\n  * A runfiles-relative path to an interpreter (e.g. `somerepo/bin/python3`)\n  * A program to search for on PATH, i.e. a word without spaces, e.g. `python3`.\n* `%workspace_name%`: The name of the workspace for the built target.\n\n:::{versionadded} 0.33.0\n:::"
      is_mandatory: true
    }
  }
  doc: "Contains information about a Python runtime, as returned by the `py_runtime`\nrule.\n\nA Python runtime describes either a *platform runtime* or an *in-build runtime*.\nA platform runtime accesses a system-installed interpreter at a known path,\nwhereas an in-build runtime points to a `File` that acts as the interpreter. In\nboth cases, an \"interpreter\" is really any executable binary or wrapper script\nthat is capable of running a Python script passed on the command line, following\nthe same conventions as the standard CPython interpreter."
  api_context: BZL
}
global {
  name: "RunEnvironmentInfo"
  callable {
    param {
      name: "environment"
      doc: "A map of string keys and values that represent environment variables and their values. These will be made available when the target that returns this provider is executed, either as a test or via the run command."
      default_value: "{}"
    }
    param {
      name: "inherited_environment"
      doc: "A sequence of names of environment variables. These variables are made  available with their current value taken from the shell environment when the target that returns this provider is executed, either as a test or via the run command. If a variable is contained in both <code>environment</code> and <code>inherited_environment</code>, the value inherited from the shell environment will take precedence if set."
      default_value: "[]"
    }
  }
  doc: "A provider that can be returned from executable rules to control the environment in which their executable is executed."
  api_context: BZL
}
global {
  name: "analysis_test_transition"
  callable {
    param {
      name: "settings"
      doc: "A dictionary containing information about configuration settings which should be set by this configuration transition. Keys are build setting labels and values are their new post-transition values. All other settings are unchanged. Use this to declare specific configuration settings that an analysis test requires to be set in order to pass."
      is_mandatory: true
    }
  }
  doc: "<p> Creates a configuration transition to be applied on an analysis-test rule\'s dependencies. This transition may only be applied on attributes of rules with <code>analysis_test = True</code>. Such rules are restricted in capabilities (for example, the size of their dependency tree is limited), so transitions created using this function are limited in potential scope as compared to transitions created using <a href=\"../builtins/transition.html\"><code>transition()</code></a>. <p>This function is primarily designed to facilitate the <a href=\"https://bazel.build/rules/testing\">Analysis Test Framework</a> core library. See its documentation (or its implementation) for best practices."
  api_context: BZL
}
global {
  name: "android_common"
  doc: "Do not use this module. It is intended for migration purposes only. If you depend on it, you will be broken when it is removed.Common utilities and functionality related to Android rules."
  api_context: BZL
  global_variable {
    name: "createDexMergerActions"
    callable {
      param {
        name: "ctx"
        doc: "The rule context."
        is_mandatory: true
      }
      param {
        name: "output"
        doc: "The output directory."
        is_mandatory: true
      }
      param {
        name: "input"
        doc: "The input directory."
        is_mandatory: true
      }
      param {
        name: "dexopts"
        doc: "A list of additional command-line flags for the dx tool. Optional"
        default_value: "[]"
      }
      param {
        name: "dexmerger"
        doc: "A FilesToRunProvider to be used for dex merging."
        is_mandatory: true
      }
      param {
        name: "min_sdk_version"
        doc: "The minSdkVersion the dexes were built for."
        default_value: "0"
      }
      param {
        name: "desugar_globals"
        doc: "The D8 desugar globals file."
        default_value: "None"
      }
    }
    doc: "Creates a list of DexMerger actions to be run in parallel, each action taking one shard from the input directory, merging all the dex archives inside the shard to a single dexarchive under the output directory."
    api_context: BZL
  }
  global_variable {
    name: "enableImplicitSourcelessDepsExportsCompatibility"
    callable {
      param {
        name: "dep"
        doc: "A JavaInfo that will be used as an implicit export for sourceless deps exports compatibility."
        is_mandatory: true
      }
      param {
        name: "neverlink"
        doc: "Whether to only use this JavaInfo at compile time and not at runtime."
        default_value: "False"
      }
    }
    doc: "Takes a JavaInfo and converts it to an implicit exportable JavaInfo."
    api_context: BZL
  }
  global_variable {
    name: "getSourceDirectoryRelativePathFromResource"
    callable {
      param {
        name: "resource"
        doc: "The android resource file."
        is_mandatory: true
      }
    }
    doc: "Returns a source directory for Android resource file. The source directory is a prefix of resource\'s relative path up to a directory that designates resource kind (cf. http://developer.android.com/guide/topics/resources/providing-resources.html)."
    api_context: BZL
  }
}
global {
  name: "apple_common"
  api_context: BZL
  global_variable {
    name: "Objc"
  }
  global_variable {
    name: "XcodeProperties"
  }
  global_variable {
    name: "XcodeVersionConfig"
  }
  global_variable {
    name: "apple_host_system_env"
  }
  global_variable {
    name: "apple_platform"
  }
  global_variable {
    name: "apple_toolchain"
  }
  global_variable {
    name: "compilation_support"
  }
  global_variable {
    name: "dotted_version"
  }
  global_variable {
    name: "get_apple_config"
  }
  global_variable {
    name: "get_cpu"
  }
  global_variable {
    name: "get_split_build_configs"
  }
  global_variable {
    name: "get_split_prerequisites"
  }
  global_variable {
    name: "new_objc_provider"
  }
  global_variable {
    name: "platform"
  }
  global_variable {
    name: "platform_type"
  }
  global_variable {
    name: "target_apple_env"
  }
}
global {
  name: "aspect"
  callable {
    param {
      name: "implementation"
      doc: "A Starlark function that implements this aspect, with exactly two parameters: <a href=\"../builtins/Target.html\">Target</a> (the target to which the aspect is applied) and <a href=\"../builtins/ctx.html\">ctx</a> (the rule context which the target is created from). Attributes of the target are available via the <code>ctx.rule</code> field. This function is evaluated during the analysis phase for each application of an aspect to a target."
      is_mandatory: true
    }
    param {
      name: "attr_aspects"
      doc: "List of attribute names. The aspect propagates along dependencies specified in the attributes of a target with these names. Common values here include <code>deps</code> and <code>exports</code>. The list can also contain a single string <code>\"*\"</code> to propagate along all dependencies of a target."
      default_value: "[]"
    }
    param {
      name: "toolchains_aspects"
      doc: "List of toolchain types. The aspect propagates to target toolchains which match these toolchain types."
      default_value: "[]"
    }
    param {
      name: "attrs"
      doc: "A dictionary declaring all the attributes of the aspect. It maps from an attribute name to an attribute object, like <code>attr.label</code> or <code>attr.string</code> (see <a href=\"../toplevel/attr.html\"><code>attr</code></a> module). Aspect attributes are available to implementation function as fields of <code>ctx</code> parameter. <p>Implicit attributes starting with <code>_</code> must have default values, and have type <code>label</code> or <code>label_list</code>.</p> <p>Explicit attributes must have type <code>string</code>, and must use the <code>values</code> restriction. Explicit attributes restrict the aspect to only be used with rules that have attributes of the same name, type, and valid values according to the restriction.</p>\n<p>Declared attributes will convert <code>None</code> to the default value.</p>\n"
      default_value: "{}"
    }
    param {
      name: "required_providers"
      doc: "This attribute allows the aspect to limit its propagation to only the targets whose rules advertise its required providers. The value must be a list containing either individual providers or lists of providers but not both. For example, <code>[[FooInfo], [BarInfo], [BazInfo, QuxInfo]]</code> is a valid value while <code>[FooInfo, BarInfo, [BazInfo, QuxInfo]]</code> is not valid.<p>An unnested list of providers will automatically be converted to a list containing one list of providers. That is, <code>[FooInfo, BarInfo]</code> will automatically be converted to <code>[[FooInfo, BarInfo]]</code>.<p>To make some rule (e.g. <code>some_rule</code>) targets visible to an aspect, <code>some_rule</code> must advertise all providers from at least one of the required providers lists. For example, if the <code>required_providers</code> of an aspect are <code>[[FooInfo], [BarInfo], [BazInfo, QuxInfo]]</code>, this aspect can see <code>some_rule</code> targets if and only if <code>some_rule</code> provides <code>FooInfo</code>, <em>or</em> <code>BarInfo</code>, <em>or</em> both <code>BazInfo</code> <em>and</em> <code>QuxInfo</code>."
      default_value: "[]"
    }
    param {
      name: "required_aspect_providers"
      doc: "This attribute allows this aspect to inspect other aspects. The value must be a list containing either individual providers or lists of providers but not both. For example, <code>[[FooInfo], [BarInfo], [BazInfo, QuxInfo]]</code> is a valid value while <code>[FooInfo, BarInfo, [BazInfo, QuxInfo]]</code> is not valid.<p>An unnested list of providers will automatically be converted to a list containing one list of providers. That is, <code>[FooInfo, BarInfo]</code> will automatically be converted to <code>[[FooInfo, BarInfo]]</code>. <p>To make another aspect (e.g. <code>other_aspect</code>) visible to this aspect, <code>other_aspect</code> must provide all providers from at least one of the lists. In the example of <code>[[FooInfo], [BarInfo], [BazInfo, QuxInfo]]</code>, this aspect can see <code>other_aspect</code> if and only if <code>other_aspect</code> provides <code>FooInfo</code>, <em>or</em> <code>BarInfo</code>, <em>or</em> both <code>BazInfo</code> <em>and</em> <code>QuxInfo</code>."
      default_value: "[]"
    }
    param {
      name: "provides"
      doc: "A list of providers that the implementation function must return.<p>It is an error if the implementation function omits any of the types of providers listed here from its return value. However, the implementation function may return additional providers not listed here.<p>Each element of the list is an <code>*Info</code> object returned by <a href=\'../globals/bzl.html#provider\'><code>provider()</code></a>, except that a legacy provider is represented by its string name instead.When a target of the rule is used as a dependency for a target that declares a required provider, it is not necessary to specify that provider here. It is enough that the implementation function returns it. However, it is considered best practice to specify it, even though this is not required. The <a href=\'../globals/bzl.html#aspect.required_providers\'><code>required_providers</code></a> field of an <a href=\'../globals/bzl.html#aspect\'>aspect</a> does, however, require that providers are specified here."
      default_value: "[]"
    }
    param {
      name: "requires"
      doc: "List of aspects required to be propagated before this aspect."
      default_value: "[]"
    }
    param {
      name: "fragments"
      doc: "List of names of configuration fragments that the aspect requires in target configuration."
      default_value: "[]"
    }
    param {
      name: "host_fragments"
      doc: "List of names of configuration fragments that the aspect requires in host configuration."
      default_value: "[]"
    }
    param {
      name: "toolchains"
      doc: "If set, the set of toolchains this aspect requires. The list can contain String, Label, or StarlarkToolchainTypeApi objects, in any combination. Toolchains will be found by checking the current platform, and provided to the aspect implementation via <code>ctx.toolchain</code>."
      default_value: "[]"
    }
    param {
      name: "incompatible_use_toolchain_transition"
      doc: "Deprecated, this is no longer in use and should be removed."
      default_value: "False"
    }
    param {
      name: "doc"
      doc: "A description of the aspect that can be extracted by documentation generating tools."
      default_value: "None"
    }
    param {
      name: "apply_to_generating_rules"
      doc: "If true, the aspect will, when applied to an output file, instead apply to the output file\'s generating rule. <p>For example, suppose an aspect propagates transitively through attribute `deps` and it is applied to target `alpha`. Suppose `alpha` has `deps = [\':beta_output\']`, where `beta_output` is a declared output of a target `beta`. Suppose `beta` has a target `charlie` as one of its `deps`. If `apply_to_generating_rules=True` for the aspect, then the aspect will propagate through `alpha`, `beta`, and `charlie`. If False, then the aspect will propagate only to `alpha`. </p><p>False by default.</p>"
      default_value: "False"
    }
    param {
      name: "exec_compatible_with"
      doc: "A list of constraints on the execution platform that apply to all instances of this aspect."
      default_value: "[]"
    }
    param {
      name: "exec_groups"
      doc: "Dict of execution group name (string) to <a href=\'../globals/bzl.html#exec_group\'><code>exec_group</code>s</a>. If set, allows aspects to run actions on multiple execution platforms within a single instance. See <a href=\'/reference/exec-groups\'>execution groups documentation</a> for more info."
      default_value: "None"
    }
    param {
      name: "subrules"
      doc: "Experimental: list of subrules used by this aspect."
      default_value: "[]"
    }
  }
  doc: "Creates a new aspect. The result of this function must be stored in a global value. Please see the <a href=\"https://bazel.build/rules/aspects\">introduction to Aspects</a> for more details."
  api_context: BZL
}
global {
  name: "attr"
  doc: "This is a top-level module for defining the attribute schemas of a rule or aspect. Each function returns an object representing the schema of a single attribute. These objects are used as the values of the <code>attrs</code> dictionary argument of <a href=\"../globals/bzl.html#rule\"><code>rule()</code></a>, <a href=\"../globals/bzl.html#aspect\"><code>aspect()</code></a>, <a href=\"../globals/bzl.html#repository_rule\"><code>repository_rule()</code></a> and <a href=\"../globals/bzl.html#tag_class\"><code>tag_class()</code></a>. <p>See the Rules page for more on <a href=\"https://bazel.build/extending/rules#attributes\">defining</a>\nand <a href=\"https://bazel.build/extending/rules#implementation_function\">using</a> attributes.</p>\n"
  api_context: BZL
  global_variable {
    name: "boolAttribute"
    callable {
      param {
        name: "configurable"
        doc: "This argument can only be specified for an attribute of a symbolic macro.<p>If <code>configurable</code> is explicitly set to <code>False</code>, the symbolic macro attribute is non-configurable - in other words, it cannot take a <code>select()</code> value. If the <code>configurable</code> is either unbound or explicitly set to <code>True</code>, the attribute is configurable and can take a <code>select()</code> value.<p>For an attribute of a rule or aspect, <code>configurable</code> must be left unbound. Most Starlark rule attributes are always configurable, with the exception of <code>attr.output()</code>, <code>attr.output_list()</code>, and <code>attr.license()</code> rule attributes, which are always non-configurable."
        default_value: "unbound"
      }
      param {
        name: "default"
        doc: "A default value to use if no value for this attribute is given when instantiating the rule."
        default_value: "False"
      }
      param {
        name: "doc"
        doc: "A description of the attribute that can be extracted by documentation generating tools."
        default_value: "None"
      }
      param {
        name: "mandatory"
        doc: "If true, the value must be specified explicitly (even if it has a <code>default</code>)."
        default_value: "False"
      }
    }
    doc: "Creates a schema for a boolean attribute. The corresponding <a href=\'../builtins/ctx.html#attr\'><code>ctx.attr</code></a> attribute will be of type <a href=\'../core/bool.html\'><code>bool</code></a>."
    api_context: BZL
  }
  global_variable {
    name: "intAttribute"
    callable {
      param {
        name: "configurable"
        doc: "This argument can only be specified for an attribute of a symbolic macro.<p>If <code>configurable</code> is explicitly set to <code>False</code>, the symbolic macro attribute is non-configurable - in other words, it cannot take a <code>select()</code> value. If the <code>configurable</code> is either unbound or explicitly set to <code>True</code>, the attribute is configurable and can take a <code>select()</code> value.<p>For an attribute of a rule or aspect, <code>configurable</code> must be left unbound. Most Starlark rule attributes are always configurable, with the exception of <code>attr.output()</code>, <code>attr.output_list()</code>, and <code>attr.license()</code> rule attributes, which are always non-configurable."
        default_value: "unbound"
      }
      param {
        name: "default"
        doc: "A default value to use if no value for this attribute is given when instantiating the rule."
        default_value: "0"
      }
      param {
        name: "doc"
        doc: "A description of the attribute that can be extracted by documentation generating tools."
        default_value: "None"
      }
      param {
        name: "mandatory"
        doc: "If true, the value must be specified explicitly (even if it has a <code>default</code>)."
        default_value: "False"
      }
      param {
        name: "values"
        doc: "The list of allowed values for the attribute. An error is raised if any other value is given."
        default_value: "[]"
      }
    }
    doc: "Creates a schema for an integer attribute. The value must be in the signed 32-bit range. The corresponding <a href=\'../builtins/ctx.html#attr\'><code>ctx.attr</code></a> attribute will be of type <a href=\'../core/int.html\'><code>int</code></a>."
    api_context: BZL
  }
  global_variable {
    name: "intListAttribute"
    callable {
      param {
        name: "mandatory"
        doc: "If true, the value must be specified explicitly (even if it has a <code>default</code>)."
        default_value: "False"
      }
      param {
        name: "allow_empty"
        doc: "True if the attribute can be empty."
        default_value: "True"
      }
      param {
        name: "configurable"
        doc: "This argument can only be specified for an attribute of a symbolic macro.<p>If <code>configurable</code> is explicitly set to <code>False</code>, the symbolic macro attribute is non-configurable - in other words, it cannot take a <code>select()</code> value. If the <code>configurable</code> is either unbound or explicitly set to <code>True</code>, the attribute is configurable and can take a <code>select()</code> value.<p>For an attribute of a rule or aspect, <code>configurable</code> must be left unbound. Most Starlark rule attributes are always configurable, with the exception of <code>attr.output()</code>, <code>attr.output_list()</code>, and <code>attr.license()</code> rule attributes, which are always non-configurable."
        default_value: "unbound"
      }
      param {
        name: "default"
        doc: "A default value to use if no value for this attribute is given when instantiating the rule."
        default_value: "[]"
      }
      param {
        name: "doc"
        doc: "A description of the attribute that can be extracted by documentation generating tools."
        default_value: "None"
      }
    }
    doc: "Creates a schema for a list-of-integers attribute. Each element must be in the signed 32-bit range."
    api_context: BZL
  }
  global_variable {
    name: "labelAttribute"
    callable {
      param {
        name: "configurable"
        doc: "This argument can only be specified for an attribute of a symbolic macro.<p>If <code>configurable</code> is explicitly set to <code>False</code>, the symbolic macro attribute is non-configurable - in other words, it cannot take a <code>select()</code> value. If the <code>configurable</code> is either unbound or explicitly set to <code>True</code>, the attribute is configurable and can take a <code>select()</code> value.<p>For an attribute of a rule or aspect, <code>configurable</code> must be left unbound. Most Starlark rule attributes are always configurable, with the exception of <code>attr.output()</code>, <code>attr.output_list()</code>, and <code>attr.license()</code> rule attributes, which are always non-configurable."
        default_value: "unbound"
      }
      param {
        name: "default"
        doc: "A default value to use if no value for this attribute is given when instantiating the rule.Use a string or the <a href=\"../builtins/Label.html#Label\"><code>Label</code></a> function to specify a default value, for example, <code>attr.label(default = \"//a:b\")</code>."
        default_value: "None"
      }
      param {
        name: "materializer"
        doc: "If set, the attribute materializes dormant dependencies from the transitive closure. The value of this parameter must be a functon that gets access to the values of the attributes of the rule that either are not dependencies or are marked as available for dependency resolution. It must return either a dormant dependency or a list of them depending on the type of the attribute"
        default_value: "None"
      }
      param {
        name: "doc"
        doc: "A description of the attribute that can be extracted by documentation generating tools."
        default_value: "None"
      }
      param {
        name: "executable"
        doc: "True if the dependency has to be executable. This means the label must refer to an executable file, or to a rule that outputs an executable file. Access the label with <code>ctx.executable.&lt;attribute_name&gt;</code>."
        default_value: "False"
      }
      param {
        name: "allow_files"
        doc: "Whether <code>File</code> targets are allowed. Can be <code>True</code>, <code>False</code> (default), or a list of file extensions that are allowed (for example, <code>[\".cc\", \".cpp\"]</code>)."
        default_value: "None"
      }
      param {
        name: "allow_single_file"
        doc: "This is similar to <code>allow_files</code>, with the restriction that the label must correspond to a single <a href=\"../builtins/File.html\">File</a>. Access it through <code>ctx.file.&lt;attribute_name&gt;</code>."
        default_value: "None"
      }
      param {
        name: "mandatory"
        doc: "If true, the value must be specified explicitly (even if it has a <code>default</code>)."
        default_value: "False"
      }
      param {
        name: "skip_validations"
        doc: "If true, validation actions of transitive dependencies from this attribute will not run. This is a temporary mitigation and WILL be removed in the future."
        default_value: "False"
      }
      param {
        name: "providers"
        doc: "The providers that must be given by any dependency appearing in this attribute.<p>The format of this argument is a list of lists of providers -- <code>*Info</code> objects returned by <a href=\'../globals/bzl.html#provider\'><code>provider()</code></a> (or in the case of a legacy provider, its string name). The dependency must return ALL providers mentioned in at least ONE of the inner lists. As a convenience, this argument may also be a single-level list of providers, in which case it is wrapped in an outer list with one element. It is NOT required that the rule of the dependency advertises those providers in its <code>provides</code> parameter, however, it is considered best practice."
        default_value: "[]"
      }
      param {
        name: "for_dependency_resolution"
        doc: "If this is set, the attribute is available for materializers. Only rules marked with the flag of the same name are allowed to be referenced through such attributes."
        default_value: "unbound"
      }
      param {
        name: "allow_rules"
        doc: "Which rule targets (name of the classes) are allowed. This is deprecated (kept only for compatibility), use providers instead."
        default_value: "None"
      }
      param {
        name: "cfg"
        doc: "<a href=\"https://bazel.build/extending/rules#configurations\">Configuration</a> of the attribute. It can be either <code>\"exec\"</code>, which indicates that the dependency is built for the <code>execution platform</code>, or <code>\"target\"</code>, which indicates that the dependency is build for the <code>target platform</code>. A typical example of the difference is when building mobile apps, where the <code>target platform</code> is <code>Android</code> or <code>iOS</code> while the <code>execution platform</code> is <code>Linux</code>, <code>macOS</code>, or <code>Windows</code>. This parameter is required if <code>executable</code> is True to guard against accidentally building host tools in the target configuration. <code>\"target\"</code> has no semantic effect, so don\'t set it when <code>executable</code> is False unless it really helps clarify your intentions."
        default_value: "None"
      }
      param {
        name: "aspects"
        doc: "Aspects that should be applied to the dependency or dependencies specified by this attribute."
        default_value: "[]"
      }
      param {
        name: "flags"
        doc: "Deprecated, will be removed."
        default_value: "[]"
      }
    }
    doc: "<p>Creates a schema for a label attribute. This is a dependency attribute.</p><p>This attribute contains unique <a href=\'../builtins/Label.html\'><code>Label</code></a> values. If a string is supplied in place of a <code>Label</code>, it will be converted using the <a href=\'../builtins/Label.html#Label\'>label constructor</a>. The relative parts of the label path, including the (possibly renamed) repository, are resolved with respect to the instantiated target\'s package.<p>At analysis time (within the rule\'s implementation function), when retrieving the attribute value from <code>ctx.attr</code>, labels are replaced by the corresponding <a href=\'../builtins/Target.html\'><code>Target</code></a>s. This allows you to access the providers of the current target\'s dependencies.<p>In addition to ordinary source files, this kind of attribute is often used to refer to a tool -- for example, a compiler. Such tools are considered to be dependencies, just like source files. To avoid requiring users to specify the tool\'s label every time they use the rule in their BUILD files, you can hard-code the label of a canonical tool as the <code>default</code> value of this attribute. If you also want to prevent users from overriding this default, you can make the attribute private by giving it a name that starts with an underscore. See the <a href=\'https://bazel.build/extending/rules#private-attributes\'>Rules</a> page for more information."
    api_context: BZL
  }
  global_variable {
    name: "labelKeyedStringDictAttribute"
    callable {
      param {
        name: "allow_empty"
        doc: "True if the attribute can be empty."
        default_value: "True"
      }
      param {
        name: "configurable"
        doc: "This argument can only be specified for an attribute of a symbolic macro.<p>If <code>configurable</code> is explicitly set to <code>False</code>, the symbolic macro attribute is non-configurable - in other words, it cannot take a <code>select()</code> value. If the <code>configurable</code> is either unbound or explicitly set to <code>True</code>, the attribute is configurable and can take a <code>select()</code> value.<p>For an attribute of a rule or aspect, <code>configurable</code> must be left unbound. Most Starlark rule attributes are always configurable, with the exception of <code>attr.output()</code>, <code>attr.output_list()</code>, and <code>attr.license()</code> rule attributes, which are always non-configurable."
        default_value: "unbound"
      }
      param {
        name: "default"
        doc: "A default value to use if no value for this attribute is given when instantiating the rule.Use strings or the <a href=\"../builtins/Label.html#Label\"><code>Label</code></a> function to specify default values, for example, <code>attr.label_keyed_string_dict(default = {\"//a:b\": \"value\", \"//a:c\": \"string\"})</code>."
        default_value: "{}"
      }
      param {
        name: "doc"
        doc: "A description of the attribute that can be extracted by documentation generating tools."
        default_value: "None"
      }
      param {
        name: "allow_files"
        doc: "Whether <code>File</code> targets are allowed. Can be <code>True</code>, <code>False</code> (default), or a list of file extensions that are allowed (for example, <code>[\".cc\", \".cpp\"]</code>)."
        default_value: "None"
      }
      param {
        name: "allow_rules"
        doc: "Which rule targets (name of the classes) are allowed. This is deprecated (kept only for compatibility), use providers instead."
        default_value: "None"
      }
      param {
        name: "providers"
        doc: "The providers that must be given by any dependency appearing in this attribute.<p>The format of this argument is a list of lists of providers -- <code>*Info</code> objects returned by <a href=\'../globals/bzl.html#provider\'><code>provider()</code></a> (or in the case of a legacy provider, its string name). The dependency must return ALL providers mentioned in at least ONE of the inner lists. As a convenience, this argument may also be a single-level list of providers, in which case it is wrapped in an outer list with one element. It is NOT required that the rule of the dependency advertises those providers in its <code>provides</code> parameter, however, it is considered best practice."
        default_value: "[]"
      }
      param {
        name: "for_dependency_resolution"
        doc: "If this is set, the attribute is available for materializers. Only rules marked with the flag of the same name are allowed to be referenced through such attributes."
        default_value: "unbound"
      }
      param {
        name: "flags"
        doc: "Deprecated, will be removed."
        default_value: "[]"
      }
      param {
        name: "mandatory"
        doc: "If true, the value must be specified explicitly (even if it has a <code>default</code>)."
        default_value: "False"
      }
      param {
        name: "cfg"
        doc: "<a href=\"https://bazel.build/extending/rules#configurations\">Configuration</a> of the attribute. It can be either <code>\"exec\"</code>, which indicates that the dependency is built for the <code>execution platform</code>, or <code>\"target\"</code>, which indicates that the dependency is build for the <code>target platform</code>. A typical example of the difference is when building mobile apps, where the <code>target platform</code> is <code>Android</code> or <code>iOS</code> while the <code>execution platform</code> is <code>Linux</code>, <code>macOS</code>, or <code>Windows</code>."
        default_value: "None"
      }
      param {
        name: "aspects"
        doc: "Aspects that should be applied to the dependency or dependencies specified by this attribute."
        default_value: "[]"
      }
    }
    doc: "<p>Creates a schema for an attribute holding a dictionary, where the keys are labels and the values are strings. This is a dependency attribute.</p><p>This attribute contains unique <a href=\'../builtins/Label.html\'><code>Label</code></a> values. If a string is supplied in place of a <code>Label</code>, it will be converted using the <a href=\'../builtins/Label.html#Label\'>label constructor</a>. The relative parts of the label path, including the (possibly renamed) repository, are resolved with respect to the instantiated target\'s package.<p>At analysis time (within the rule\'s implementation function), when retrieving the attribute value from <code>ctx.attr</code>, labels are replaced by the corresponding <a href=\'../builtins/Target.html\'><code>Target</code></a>s. This allows you to access the providers of the current target\'s dependencies."
    api_context: BZL
  }
  global_variable {
    name: "labelListAttribute"
    callable {
      param {
        name: "allow_empty"
        doc: "True if the attribute can be empty."
        default_value: "True"
      }
      param {
        name: "configurable"
        doc: "This argument can only be specified for an attribute of a symbolic macro.<p>If <code>configurable</code> is explicitly set to <code>False</code>, the symbolic macro attribute is non-configurable - in other words, it cannot take a <code>select()</code> value. If the <code>configurable</code> is either unbound or explicitly set to <code>True</code>, the attribute is configurable and can take a <code>select()</code> value.<p>For an attribute of a rule or aspect, <code>configurable</code> must be left unbound. Most Starlark rule attributes are always configurable, with the exception of <code>attr.output()</code>, <code>attr.output_list()</code>, and <code>attr.license()</code> rule attributes, which are always non-configurable."
        default_value: "unbound"
      }
      param {
        name: "default"
        doc: "A default value to use if no value for this attribute is given when instantiating the rule.Use strings or the <a href=\"../builtins/Label.html#Label\"><code>Label</code></a> function to specify default values, for example, <code>attr.label_list(default = [\"//a:b\", \"//a:c\"])</code>."
        default_value: "[]"
      }
      param {
        name: "materializer"
        doc: "If set, the attribute materializes dormant dependencies from the transitive closure. The value of this parameter must be a functon that gets access to the values of the attributes of the rule that either are not dependencies or are marked as available for dependency resolution. It must return either a dormant dependency or a list of them depending on the type of the attribute"
        default_value: "None"
      }
      param {
        name: "doc"
        doc: "A description of the attribute that can be extracted by documentation generating tools."
        default_value: "None"
      }
      param {
        name: "allow_files"
        doc: "Whether <code>File</code> targets are allowed. Can be <code>True</code>, <code>False</code> (default), or a list of file extensions that are allowed (for example, <code>[\".cc\", \".cpp\"]</code>)."
        default_value: "None"
      }
      param {
        name: "allow_rules"
        doc: "Which rule targets (name of the classes) are allowed. This is deprecated (kept only for compatibility), use providers instead."
        default_value: "None"
      }
      param {
        name: "providers"
        doc: "The providers that must be given by any dependency appearing in this attribute.<p>The format of this argument is a list of lists of providers -- <code>*Info</code> objects returned by <a href=\'../globals/bzl.html#provider\'><code>provider()</code></a> (or in the case of a legacy provider, its string name). The dependency must return ALL providers mentioned in at least ONE of the inner lists. As a convenience, this argument may also be a single-level list of providers, in which case it is wrapped in an outer list with one element. It is NOT required that the rule of the dependency advertises those providers in its <code>provides</code> parameter, however, it is considered best practice."
        default_value: "[]"
      }
      param {
        name: "for_dependency_resolution"
        doc: "If this is set, the attribute is available for materializers. Only rules marked with the flag of the same name are allowed to be referenced through such attributes."
        default_value: "unbound"
      }
      param {
        name: "flags"
        doc: "Deprecated, will be removed."
        default_value: "[]"
      }
      param {
        name: "mandatory"
        doc: "If true, the value must be specified explicitly (even if it has a <code>default</code>)."
        default_value: "False"
      }
      param {
        name: "skip_validations"
        doc: "If true, validation actions of transitive dependencies from this attribute will not run. This is a temporary mitigation and WILL be removed in the future."
        default_value: "False"
      }
      param {
        name: "cfg"
        doc: "<a href=\"https://bazel.build/extending/rules#configurations\">Configuration</a> of the attribute. It can be either <code>\"exec\"</code>, which indicates that the dependency is built for the <code>execution platform</code>, or <code>\"target\"</code>, which indicates that the dependency is build for the <code>target platform</code>. A typical example of the difference is when building mobile apps, where the <code>target platform</code> is <code>Android</code> or <code>iOS</code> while the <code>execution platform</code> is <code>Linux</code>, <code>macOS</code>, or <code>Windows</code>."
        default_value: "None"
      }
      param {
        name: "aspects"
        doc: "Aspects that should be applied to the dependency or dependencies specified by this attribute."
        default_value: "[]"
      }
    }
    doc: "<p>Creates a schema for a list-of-labels attribute. This is a dependency attribute. The corresponding <a href=\'../builtins/ctx.html#attr\'><code>ctx.attr</code></a> attribute will be of type <a href=\'../core/list.html\'>list</a> of <a href=\'../builtins/Target.html\'><code>Target</code>s</a>.</p><p>This attribute contains unique <a href=\'../builtins/Label.html\'><code>Label</code></a> values. If a string is supplied in place of a <code>Label</code>, it will be converted using the <a href=\'../builtins/Label.html#Label\'>label constructor</a>. The relative parts of the label path, including the (possibly renamed) repository, are resolved with respect to the instantiated target\'s package.<p>At analysis time (within the rule\'s implementation function), when retrieving the attribute value from <code>ctx.attr</code>, labels are replaced by the corresponding <a href=\'../builtins/Target.html\'><code>Target</code></a>s. This allows you to access the providers of the current target\'s dependencies."
    api_context: BZL
  }
  global_variable {
    name: "outputAttribute"
    callable {
      param {
        name: "doc"
        doc: "A description of the attribute that can be extracted by documentation generating tools."
        default_value: "None"
      }
      param {
        name: "mandatory"
        doc: "If true, the value must be specified explicitly (even if it has a <code>default</code>)."
        default_value: "False"
      }
    }
    doc: "<p>Creates a schema for an output (label) attribute.</p><p>This attribute contains unique <a href=\'../builtins/Label.html\'><code>Label</code></a> values. If a string is supplied in place of a <code>Label</code>, it will be converted using the <a href=\'../builtins/Label.html#Label\'>label constructor</a>. The relative parts of the label path, including the (possibly renamed) repository, are resolved with respect to the instantiated target\'s package.<p>At analysis time, the corresponding <a href=\'../builtins/File.html\'><code>File</code></a> can be retrieved using <a href=\'../builtins/ctx.html#outputs\'><code>ctx.outputs</code></a>."
    api_context: BZL
  }
  global_variable {
    name: "outputListAttribute"
    callable {
      param {
        name: "allow_empty"
        doc: "True if the attribute can be empty."
        default_value: "True"
      }
      param {
        name: "doc"
        doc: "A description of the attribute that can be extracted by documentation generating tools."
        default_value: "None"
      }
      param {
        name: "mandatory"
        doc: "If true, the value must be specified explicitly (even if it has a <code>default</code>)."
        default_value: "False"
      }
    }
    doc: "Creates a schema for a list-of-outputs attribute.<p>This attribute contains unique <a href=\'../builtins/Label.html\'><code>Label</code></a> values. If a string is supplied in place of a <code>Label</code>, it will be converted using the <a href=\'../builtins/Label.html#Label\'>label constructor</a>. The relative parts of the label path, including the (possibly renamed) repository, are resolved with respect to the instantiated target\'s package.<p>At analysis time, the corresponding <a href=\'../builtins/File.html\'><code>File</code></a> can be retrieved using <a href=\'../builtins/ctx.html#outputs\'><code>ctx.outputs</code></a>."
    api_context: BZL
  }
  global_variable {
    name: "stringAttribute"
    callable {
      param {
        name: "configurable"
        doc: "This argument can only be specified for an attribute of a symbolic macro.<p>If <code>configurable</code> is explicitly set to <code>False</code>, the symbolic macro attribute is non-configurable - in other words, it cannot take a <code>select()</code> value. If the <code>configurable</code> is either unbound or explicitly set to <code>True</code>, the attribute is configurable and can take a <code>select()</code> value.<p>For an attribute of a rule or aspect, <code>configurable</code> must be left unbound. Most Starlark rule attributes are always configurable, with the exception of <code>attr.output()</code>, <code>attr.output_list()</code>, and <code>attr.license()</code> rule attributes, which are always non-configurable."
        default_value: "unbound"
      }
      param {
        name: "default"
        doc: "A default value to use if no value for this attribute is given when instantiating the rule."
        default_value: "\'\'"
      }
      param {
        name: "doc"
        doc: "A description of the attribute that can be extracted by documentation generating tools."
        default_value: "None"
      }
      param {
        name: "mandatory"
        doc: "If true, the value must be specified explicitly (even if it has a <code>default</code>)."
        default_value: "False"
      }
      param {
        name: "values"
        doc: "The list of allowed values for the attribute. An error is raised if any other value is given."
        default_value: "[]"
      }
    }
    doc: "Creates a schema for a <a href=\'../core/string.html#attr\'>string</a> attribute."
    api_context: BZL
  }
  global_variable {
    name: "stringDictAttribute"
    callable {
      param {
        name: "allow_empty"
        doc: "True if the attribute can be empty."
        default_value: "True"
      }
      param {
        name: "configurable"
        doc: "This argument can only be specified for an attribute of a symbolic macro.<p>If <code>configurable</code> is explicitly set to <code>False</code>, the symbolic macro attribute is non-configurable - in other words, it cannot take a <code>select()</code> value. If the <code>configurable</code> is either unbound or explicitly set to <code>True</code>, the attribute is configurable and can take a <code>select()</code> value.<p>For an attribute of a rule or aspect, <code>configurable</code> must be left unbound. Most Starlark rule attributes are always configurable, with the exception of <code>attr.output()</code>, <code>attr.output_list()</code>, and <code>attr.license()</code> rule attributes, which are always non-configurable."
        default_value: "unbound"
      }
      param {
        name: "default"
        doc: "A default value to use if no value for this attribute is given when instantiating the rule."
        default_value: "{}"
      }
      param {
        name: "doc"
        doc: "A description of the attribute that can be extracted by documentation generating tools."
        default_value: "None"
      }
      param {
        name: "mandatory"
        doc: "If true, the value must be specified explicitly (even if it has a <code>default</code>)."
        default_value: "False"
      }
    }
    doc: "Creates a schema for an attribute holding a dictionary, where the keys and values are strings."
    api_context: BZL
  }
  global_variable {
    name: "stringKeyedLabelDictAttribute"
    callable {
      param {
        name: "allow_empty"
        doc: "True if the attribute can be empty."
        default_value: "True"
      }
      param {
        name: "configurable"
        doc: "This argument can only be specified for an attribute of a symbolic macro.<p>If <code>configurable</code> is explicitly set to <code>False</code>, the symbolic macro attribute is non-configurable - in other words, it cannot take a <code>select()</code> value. If the <code>configurable</code> is either unbound or explicitly set to <code>True</code>, the attribute is configurable and can take a <code>select()</code> value.<p>For an attribute of a rule or aspect, <code>configurable</code> must be left unbound. Most Starlark rule attributes are always configurable, with the exception of <code>attr.output()</code>, <code>attr.output_list()</code>, and <code>attr.license()</code> rule attributes, which are always non-configurable."
        default_value: "unbound"
      }
      param {
        name: "default"
        doc: "A default value to use if no value for this attribute is given when instantiating the rule.Use strings or the <a href=\"../builtins/Label.html#Label\"><code>Label</code></a> function to specify default values, for example, <code>attr.string_keyed_label_dict(default = {\"foo\": \"//a:b\", \"bar\": \"//a:c\"})</code>."
        default_value: "{}"
      }
      param {
        name: "doc"
        doc: "A description of the attribute that can be extracted by documentation generating tools."
        default_value: "None"
      }
      param {
        name: "allow_files"
        doc: "Whether <code>File</code> targets are allowed. Can be <code>True</code>, <code>False</code> (default), or a list of file extensions that are allowed (for example, <code>[\".cc\", \".cpp\"]</code>)."
        default_value: "None"
      }
      param {
        name: "allow_rules"
        doc: "Which rule targets (name of the classes) are allowed. This is deprecated (kept only for compatibility), use providers instead."
        default_value: "None"
      }
      param {
        name: "providers"
        doc: "The providers that must be given by any dependency appearing in this attribute.<p>The format of this argument is a list of lists of providers -- <code>*Info</code> objects returned by <a href=\'../globals/bzl.html#provider\'><code>provider()</code></a> (or in the case of a legacy provider, its string name). The dependency must return ALL providers mentioned in at least ONE of the inner lists. As a convenience, this argument may also be a single-level list of providers, in which case it is wrapped in an outer list with one element. It is NOT required that the rule of the dependency advertises those providers in its <code>provides</code> parameter, however, it is considered best practice."
        default_value: "[]"
      }
      param {
        name: "for_dependency_resolution"
        doc: "If this is set, the attribute is available for materializers. Only rules marked with the flag of the same name are allowed to be referenced through such attributes."
        default_value: "unbound"
      }
      param {
        name: "flags"
        doc: "Deprecated, will be removed."
        default_value: "[]"
      }
      param {
        name: "mandatory"
        doc: "If true, the value must be specified explicitly (even if it has a <code>default</code>)."
        default_value: "False"
      }
      param {
        name: "cfg"
        doc: "<a href=\"https://bazel.build/extending/rules#configurations\">Configuration</a> of the attribute. It can be either <code>\"exec\"</code>, which indicates that the dependency is built for the <code>execution platform</code>, or <code>\"target\"</code>, which indicates that the dependency is build for the <code>target platform</code>. A typical example of the difference is when building mobile apps, where the <code>target platform</code> is <code>Android</code> or <code>iOS</code> while the <code>execution platform</code> is <code>Linux</code>, <code>macOS</code>, or <code>Windows</code>."
        default_value: "None"
      }
      param {
        name: "aspects"
        doc: "Aspects that should be applied to the dependency or dependencies specified by this attribute."
        default_value: "[]"
      }
    }
    doc: "<p>Creates a schema for an attribute whose value is a dictionary where the keys are strings and the values are labels. This is a dependency attribute.</p><p>This attribute contains unique <a href=\'../builtins/Label.html\'><code>Label</code></a> values. If a string is supplied in place of a <code>Label</code>, it will be converted using the <a href=\'../builtins/Label.html#Label\'>label constructor</a>. The relative parts of the label path, including the (possibly renamed) repository, are resolved with respect to the instantiated target\'s package.<p>At analysis time (within the rule\'s implementation function), when retrieving the attribute value from <code>ctx.attr</code>, labels are replaced by the corresponding <a href=\'../builtins/Target.html\'><code>Target</code></a>s. This allows you to access the providers of the current target\'s dependencies."
    api_context: BZL
  }
  global_variable {
    name: "stringListAttribute"
    callable {
      param {
        name: "mandatory"
        doc: "If true, the value must be specified explicitly (even if it has a <code>default</code>)."
        default_value: "False"
      }
      param {
        name: "allow_empty"
        doc: "True if the attribute can be empty."
        default_value: "True"
      }
      param {
        name: "configurable"
        doc: "This argument can only be specified for an attribute of a symbolic macro.<p>If <code>configurable</code> is explicitly set to <code>False</code>, the symbolic macro attribute is non-configurable - in other words, it cannot take a <code>select()</code> value. If the <code>configurable</code> is either unbound or explicitly set to <code>True</code>, the attribute is configurable and can take a <code>select()</code> value.<p>For an attribute of a rule or aspect, <code>configurable</code> must be left unbound. Most Starlark rule attributes are always configurable, with the exception of <code>attr.output()</code>, <code>attr.output_list()</code>, and <code>attr.license()</code> rule attributes, which are always non-configurable."
        default_value: "unbound"
      }
      param {
        name: "default"
        doc: "A default value to use if no value for this attribute is given when instantiating the rule."
        default_value: "[]"
      }
      param {
        name: "doc"
        doc: "A description of the attribute that can be extracted by documentation generating tools."
        default_value: "None"
      }
    }
    doc: "Creates a schema for a list-of-strings attribute."
    api_context: BZL
  }
  global_variable {
    name: "stringListDictAttribute"
    callable {
      param {
        name: "allow_empty"
        doc: "True if the attribute can be empty."
        default_value: "True"
      }
      param {
        name: "configurable"
        doc: "This argument can only be specified for an attribute of a symbolic macro.<p>If <code>configurable</code> is explicitly set to <code>False</code>, the symbolic macro attribute is non-configurable - in other words, it cannot take a <code>select()</code> value. If the <code>configurable</code> is either unbound or explicitly set to <code>True</code>, the attribute is configurable and can take a <code>select()</code> value.<p>For an attribute of a rule or aspect, <code>configurable</code> must be left unbound. Most Starlark rule attributes are always configurable, with the exception of <code>attr.output()</code>, <code>attr.output_list()</code>, and <code>attr.license()</code> rule attributes, which are always non-configurable."
        default_value: "unbound"
      }
      param {
        name: "default"
        doc: "A default value to use if no value for this attribute is given when instantiating the rule."
        default_value: "{}"
      }
      param {
        name: "doc"
        doc: "A description of the attribute that can be extracted by documentation generating tools."
        default_value: "None"
      }
      param {
        name: "mandatory"
        doc: "If true, the value must be specified explicitly (even if it has a <code>default</code>)."
        default_value: "False"
      }
    }
    doc: "Creates a schema for an attribute holding a dictionary, where the keys are strings and the values are lists of strings."
    api_context: BZL
  }
}
global {
  name: "cc_common"
  api_context: BZL
  global_variable {
    name: "CcSharedLibraryHintInfo"
  }
  global_variable {
    name: "CcToolchainInfo"
  }
  global_variable {
    name: "action_is_enabled"
  }
  global_variable {
    name: "check_experimental_cc_shared_library"
  }
  global_variable {
    name: "check_experimental_cc_static_library"
  }
  global_variable {
    name: "compile"
  }
  global_variable {
    name: "configure_features"
  }
  global_variable {
    name: "create_cc_launcher_info"
  }
  global_variable {
    name: "create_cc_toolchain_config_info"
  }
  global_variable {
    name: "create_compilation_context"
  }
  global_variable {
    name: "create_compilation_outputs"
  }
  global_variable {
    name: "create_compile_action"
  }
  global_variable {
    name: "create_compile_variables"
  }
  global_variable {
    name: "create_debug_context"
  }
  global_variable {
    name: "create_extra_link_time_library"
  }
  global_variable {
    name: "create_library_to_link"
  }
  global_variable {
    name: "create_link_variables"
  }
  global_variable {
    name: "create_linker_input"
  }
  global_variable {
    name: "create_linking_context"
  }
  global_variable {
    name: "create_linking_context_from_compilation_outputs"
  }
  global_variable {
    name: "create_lto_backend_artifacts"
  }
  global_variable {
    name: "create_lto_compilation_context"
  }
  global_variable {
    name: "create_module_map"
  }
  global_variable {
    name: "do_not_use_tools_cpp_compiler_present"
  }
  global_variable {
    name: "empty_variables"
  }
  global_variable {
    name: "get_environment_variables"
  }
  global_variable {
    name: "get_execution_requirements"
  }
  global_variable {
    name: "get_memory_inefficient_command_line"
  }
  global_variable {
    name: "get_tool_for_action"
  }
  global_variable {
    name: "get_tool_requirement_for_action"
  }
  global_variable {
    name: "implementation_deps_allowed_by_allowlist"
  }
  global_variable {
    name: "incompatible_disable_objc_library_transition"
  }
  global_variable {
    name: "is_cc_toolchain_resolution_enabled_do_not_use"
  }
  global_variable {
    name: "is_enabled"
  }
  global_variable {
    name: "launcher_provider"
  }
  global_variable {
    name: "ld_tool_path"
  }
  global_variable {
    name: "legacy_cc_flags_make_variable_do_not_use"
  }
  global_variable {
    name: "link"
  }
  global_variable {
    name: "merge_cc_infos"
  }
  global_variable {
    name: "merge_compilation_contexts"
  }
  global_variable {
    name: "merge_compilation_outputs"
  }
  global_variable {
    name: "merge_debug_context"
  }
  global_variable {
    name: "merge_linking_contexts"
  }
  global_variable {
    name: "objcopy"
  }
  global_variable {
    name: "objcopy_tool_path"
  }
  global_variable {
    name: "register_linkstamp_compile_action"
  }
}
global {
  name: "cc_proto_aspect"
  callable {
  }
  api_context: BZL
}
global {
  name: "config"
  doc: "This is a top-level module for creating configuration transitions and build setting descriptors which describe what kind of build setting (if any) a rule is. <p>ex: the following rule is marked as a build setting by setting the <code>build_setting</code> parameter of the <code>rule()</code> function. Specifically it is a build setting of type <code>int</code> and is a <code>flag</code> which means this build setting is callable on the command line.<br><pre class=language-python>  my_rule = rule(\n    implementation = _impl,\n    build_setting = config.int(flag = True),\n    ...\n  )</pre>"
  api_context: BZL
  global_variable {
    name: "boolSetting"
    callable {
      param {
        name: "flag"
        doc: "Whether or not this build setting is callable on the command line."
        default_value: "False"
      }
    }
    doc: "A bool-typed build setting"
    api_context: BZL
  }
  global_variable {
    name: "exec"
    callable {
      param {
        name: "exec_group"
        doc: "The name of the exec group whose execution platform this transition will use. If not provided, this exec transition will use the target\'s default execution platform."
        default_value: "None"
      }
    }
    doc: "Creates an execution transition."
    api_context: BZL
  }
  global_variable {
    name: "intSetting"
    callable {
      param {
        name: "flag"
        doc: "Whether or not this build setting is callable on the command line."
        default_value: "False"
      }
    }
    doc: "An integer-typed build setting"
    api_context: BZL
  }
  global_variable {
    name: "none"
    callable {
    }
    doc: "Creates a transition which removes all configuration, unsetting all flags. Intended for the case where a dependency is data-only and contains no code that needs to be built, but should only be analyzed once."
    api_context: BZL
  }
  global_variable {
    name: "stringListSetting"
    callable {
      param {
        name: "flag"
        doc: "Whether or not this build setting is callable on the command line."
        default_value: "False"
      }
      param {
        name: "repeatable"
        doc: "If set, instead of expecting a comma-separated value, this flag is allowed to be set multiple times on the command line with each individual value treated as a single string to add to the list value. Insertion order and repeated values are both maintained. This list can be post-processed in the build setting implementation function if different behavior is desired."
        default_value: "False"
      }
    }
    doc: "A string list-typed build setting. On the command line pass a list using comma-separated value like <code>--//my/setting=foo,bar</code>."
    api_context: BZL
  }
  global_variable {
    name: "stringSetting"
    callable {
      param {
        name: "flag"
        doc: "Whether or not this build setting is callable on the command line."
        default_value: "False"
      }
      param {
        name: "allow_multiple"
        doc: "Deprecated, use a <code>string_list</code> setting with <code>repeatable = True</code> instead. If set, this flag is allowed to be set multiple times on the command line. The Value of the flag as accessed in transitions and build setting implementation function will be a list of strings. Insertion order and repeated values are both maintained. This list can be post-processed in the build setting implementation function if different behavior is desired."
        default_value: "False"
      }
    }
    doc: "A string-typed build setting"
    api_context: BZL
  }
  global_variable {
    name: "target"
    callable {
    }
    doc: "Creates a target transition. This is a no-op transition intended for the case where a transition object is needed, but doesn\'t want to actually change anything. Equivalent to <code>cfg = \"target\"</code> in <code>attr.label()</code>."
    api_context: BZL
  }
}
global {
  name: "config_common"
  doc: "Functions for Starlark to interact with Blaze\'s configurability APIs."
  api_context: BZL
  global_variable {
    name: "createConfigFeatureFlagTransitionFactory"
    callable {
      param {
        name: "attribute"
        doc: "string corresponding to rule attribute to read"
        is_mandatory: true
      }
    }
    api_context: BZL
  }
  global_variable {
    name: "getConfigFeatureFlagProviderConstructor"
    callable {
    }
    doc: "The key used to retrieve the provider containing config_feature_flag\'s value."
    api_context: BZL
  }
  global_variable {
    name: "toolchainType"
    callable {
      param {
        name: "name"
        doc: "The toolchain type that is required."
        is_mandatory: true
      }
      param {
        name: "mandatory"
        doc: "Whether the toolchain type is mandatory or optional."
        default_value: "True"
      }
    }
    doc: "Declare a rule\'s dependency on a toolchain type."
    api_context: BZL
  }
}
global {
  name: "configuration_field"
  callable {
    param {
      name: "fragment"
      doc: "The name of a configuration fragment which contains the late-bound value."
      is_mandatory: true
    }
    param {
      name: "name"
      doc: "The name of the value to obtain from the configuration fragment."
      is_mandatory: true
    }
  }
  doc: "References a late-bound default value for an attribute of type <a href=\"../toplevel/attr.html#label\">label</a>. A value is \'late-bound\' if it requires the configuration to be built before determining the value. Any attribute using this as a value must <a href=\"https://bazel.build/extending/rules#private-attributes\">be private</a>. <p>Example usage: <p>Defining a rule attribute: <br><pre class=language-python>\'_foo\': attr.label(default=configuration_field(fragment=\'java\', name=\'toolchain\'))</pre><p>Accessing in rule implementation: <br><pre class=language-python>  def _rule_impl(ctx):\n    foo_info = ctx.attr._foo\n    ...</pre>"
  api_context: BZL
}
global {
  name: "coverage_common"
  doc: "Helper functions to access coverage-related infrastructure."
  api_context: BZL
  global_variable {
    name: "instrumentedFilesInfo"
    callable {
      param {
        name: "ctx"
        doc: "The rule context."
        is_mandatory: true
      }
      param {
        name: "source_attributes"
        doc: "A list of attribute names which contain source files processed by this rule."
        default_value: "[]"
      }
      param {
        name: "dependency_attributes"
        doc: "A list of attribute names which might provide runtime dependencies (either code dependencies or runfiles)."
        default_value: "[]"
      }
      param {
        name: "extensions"
        default_value: "None"
      }
      param {
        name: "metadata_files"
        default_value: "[]"
      }
    }
    doc: "Creates a new <a class=\"anchor\" href=\"../providers/InstrumentedFilesInfo.html\">InstrumentedFilesInfo</a> instance. Use this provider to communicate coverage-related attributes of the current build rule."
    api_context: BZL
  }
}
global {
  name: "depset"
  callable {
    param {
      name: "direct"
      doc: "A list of <i>direct</i> elements of a depset. "
      default_value: "None"
    }
    param {
      name: "order"
      doc: "The traversal strategy for the new depset. See <a href=\"../builtins/depset.html\">here</a> for the possible values."
      default_value: "\"default\""
    }
    param {
      name: "transitive"
      doc: "A list of depsets whose elements will become indirect elements of the depset."
      default_value: "None"
    }
  }
  doc: "Creates a <a href=\"../builtins/depset.html\">depset</a>. The <code>direct</code> parameter is a list of direct elements of the depset, and <code>transitive</code> parameter is a list of depsets whose elements become indirect elements of the created depset. The order in which elements are returned when the depset is converted to a list is specified by the <code>order</code> parameter. See the <a href=\"https://bazel.build/extending/depsets\">Depsets overview</a> for more information.\n<p>All elements (direct and indirect) of a depset must be of the same type, as obtained by the expression <code>type(x)</code>.\n<p>Because a hash-based set is used to eliminate duplicates during iteration, all elements of a depset should be hashable. However, this invariant is not currently checked consistently in all constructors. Use the --incompatible_always_check_depset_elements flag to enable consistent checking; this will be the default behavior in future releases;  see <a href=\'https://github.com/bazelbuild/bazel/issues/10313\'>Issue 10313</a>.\n<p>In addition, elements must currently be immutable, though this restriction will be relaxed in future.\n<p> The order of the created depset should be <i>compatible</i> with the order of its <code>transitive</code> depsets. <code>\"default\"</code> order is compatible with any other order, all other orders are only compatible with themselves."
  api_context: BZL
}
global {
  name: "exec_group"
  callable {
    param {
      name: "toolchains"
      doc: "The set of toolchains this execution group requires. The list can contain String, Label, or StarlarkToolchainTypeApi objects, in any combination."
      default_value: "[]"
    }
    param {
      name: "exec_compatible_with"
      doc: "A list of constraints on the execution platform."
      default_value: "[]"
    }
  }
  doc: "Creates an <a href=\'/reference/exec-groups\'>execution group</a> which can be used to create actions for a specific execution platform during rule implementation."
  api_context: BZL
}
global {
  name: "exec_transition"
  callable {
    param {
      name: "implementation"
      is_mandatory: true
    }
    param {
      name: "inputs"
      is_mandatory: true
    }
    param {
      name: "outputs"
      is_mandatory: true
    }
  }
  doc: "A specialized version of <a href=\"../builtins/transition.html\"><code>transition()</code></a> used to define the exec transition. See its documentation (or its implementation) for best practices. Only usable from the Bazel builtins."
  api_context: BZL
}
global {
  name: "experimental_java_library_export_do_not_use"
  doc: "The type of the Starlark None value."
  api_context: BZL
}
global {
  name: "java_common"
  api_context: BZL
  global_variable {
    name: "BootClassPathInfo"
  }
  global_variable {
    name: "JavaPluginInfo"
  }
  global_variable {
    name: "JavaRuntimeClasspathInfo"
  }
  global_variable {
    name: "JavaRuntimeInfo"
  }
  global_variable {
    name: "JavaToolchainInfo"
  }
  global_variable {
    name: "compile"
  }
  global_variable {
    name: "default_javac_opts"
  }
  global_variable {
    name: "default_javac_opts_depset"
  }
  global_variable {
    name: "make_non_strict"
  }
  global_variable {
    name: "merge"
  }
  global_variable {
    name: "pack_sources"
  }
  global_variable {
    name: "provider"
  }
  global_variable {
    name: "run_ijar"
  }
  global_variable {
    name: "stamp_jar"
  }
}
global {
  name: "json"
  doc: "Module json is a Starlark module of JSON-related functions."
  api_context: BZL
  global_variable {
    name: "decode"
    callable {
      param {
        name: "x"
        doc: "JSON string to decode."
        is_mandatory: true
      }
      param {
        name: "default"
        doc: "If specified, the value to return when <code>x</code> cannot be decoded."
        default_value: "unbound"
      }
    }
    doc: "The decode function has one required positional parameter: a JSON string.\nIt returns the Starlark value that the string denotes.\n<ul><li><code>\"null\"</code>, <code>\"true\"</code> and <code>\"false\"</code> are parsed as <code>None</code>, <code>True</code>, and <code>False</code>.\n<li>Numbers are parsed as int, or as a float if they contain a decimal point or an exponent. Although JSON has no syntax  for non-finite values, very large values may be decoded as infinity.\n<li>a JSON object is parsed as a new unfrozen Starlark dict. If the same key string occurs more than once in the object, the last value for the key is kept.\n<li>a JSON array is parsed as new unfrozen Starlark list.\n</ul>\nIf <code>x</code> is not a valid JSON encoding and the optional <code>default</code> parameter is specified (including specified as <code>None</code>), this function returns the <code>default</code> value.\nIf <code>x</code> is not a valid JSON encoding and the optional <code>default</code> parameter is <em>not</em> specified, this function fails."
    api_context: BZL
  }
  global_variable {
    name: "encode"
    callable {
      param {
        name: "x"
        is_mandatory: true
      }
    }
    doc: "<p>The encode function accepts one required positional argument, which it converts to JSON by cases:\n<ul>\n<li>None, True, and False are converted to \'null\', \'true\', and \'false\', respectively.\n<li>An int, no matter how large, is encoded as a decimal integer. Some decoders may not be able to decode very large integers.\n<li>A float is encoded using a decimal point or an exponent or both, even if its numeric value is an integer. It is an error to encode a non-finite  floating-point value.\n<li>A string value is encoded as a JSON string literal that denotes the value.  Each unpaired surrogate is replaced by U+FFFD.\n<li>A dict is encoded as a JSON object, in key order.  It is an error if any key is not a string.\n<li>A list or tuple is encoded as a JSON array.\n<li>A struct-like value is encoded as a JSON object, in field name order.\n</ul>\nAn application-defined type may define its own JSON encoding.\nEncoding any other value yields an error.\n"
    api_context: BZL
  }
  global_variable {
    name: "encodeIndent"
    callable {
      param {
        name: "x"
        is_mandatory: true
      }
      param {
        name: "prefix"
        default_value: "\'\'"
      }
      param {
        name: "indent"
        default_value: "\'\\t\'"
      }
    }
    doc: "The encode_indent function is equivalent to <code>json.indent(json.encode(x), ...)</code>. See <code>indent</code> for description of formatting parameters."
    api_context: BZL
  }
  global_variable {
    name: "indent"
    callable {
      param {
        name: "s"
        is_mandatory: true
      }
      param {
        name: "prefix"
        default_value: "\'\'"
      }
      param {
        name: "indent"
        default_value: "\'\\t\'"
      }
    }
    doc: "The indent function returns the indented form of a valid JSON-encoded string.\nEach array element or object field appears on a new line, beginning with the prefix string followed by one or more copies of the indent string, according to its nesting depth.\nThe function accepts one required positional parameter, the JSON string,\nand two optional keyword-only string parameters, prefix and indent,\nthat specify a prefix of each new line, and the unit of indentation.\nIf the input is not valid, the function may fail or return invalid output.\n"
    api_context: BZL
  }
}
global {
  name: "macro"
  callable {
    param {
      name: "implementation"
      doc: "The Starlark function implementing this macro. The values of the macro\'s attributes are passed to\nthe implementation function as keyword arguments. The implementation function must have at least two\nnamed parameters, <code>name</code> and <code>visibility</code>, and if the macro inherits\nattributes (see <code>inherit_attrs</code> below), it must have a <code>**kwargs</code> residual\nkeyword parameter.\n\n<p>By convention, the implementation function should have a named parameter for any attribute that\nthe macro needs to examine, modify, or pass to non-\"main\" targets, while the \"bulk\" inherited\nattributes which will be passed to the \"main\" target unchanged are passed as <code>**kwargs</code>.\n\n<p>The implementation function must not return a value. Instead, the implementation function\n<em>declares targets</em> by calling rule or macro symbols.\n\n<p>The name of any target or inner symbolic macro declared by a symbolic macro (including by any\nStarlark function that the macro\'s implementation function transitively calls) must either equal\n<code>name</code> (this is referred to as the \"main\" target) or start with <code>name</code>,\nfollowed by a separator chracter (<code>\"_\"</code>, <code>\"-\"</code>, or <code>\".\"</code>) and a\nstring suffix. (Targets violating this naming scheme are allowed to be declared, but cannot be\nbuilt, configured, or depended upon.)\n\n<p>By default, targets declared by a symbolic macro (including by any Starlark function that the\nmacro\'s implementation function transitively calls) are visible only in the package containing the\n.bzl file defining the macro. To declare targets visible externally, <em>including to the caller of\nthe symbolic macro</em>, the implementation function must set <code>visibility</code> appropriately\n&ndash; typically, by passing <code>visibility = visibility</code> to the rule or macro symbol being\ncalled.\n\n<p>The following APIs are unavailable within a macro implementation function and any Starlark\nfunction it transitively calls:\n<ul>\n  <li><a href=\"/reference/be/functions#package\"><code>package()</code>, <code>licenses()</code>\n  <li><code>environment_group()</code>\n  <li><a href=\"../toplevel/native#glob\"><code>native.glob()</code></a> &ndash; instead, you may pass\n    a glob into the macro via a label list attribute\n  <li><a href=\"../toplevel/native#subpackages\"><code>native.subpackages()</code></a>\n  <li>(allowed in rule finalizers only, see <code>finalizer</code> below)\n    <a href=\"../toplevel/native#existing_rules\"><code>native.existing_rules()</code></a>,\n    <a href=\"../toplevel/native#existing_rule\"><code>native.existing_rule()</code></a>\n  <li>(for <code>WORKSPACE</code> threads)\n    <a href=\"../globals/workspace#workspace\"><code>workspace()</code></a>,\n    <a href=\"../globals/workspace#register_toolchains\"><code>register_toolchains()</code></a>,\n    <a href=\"../globals/workspace#register_execution_platforms><code>register_execution_platforms()</code></a>,\n    <a href=\"../globals/workspace#bind\"><code>bind()</code></a>, repository rule instantiation\n</ul>\n"
      is_mandatory: true
    }
    param {
      name: "attrs"
      doc: "A dictionary of the attributes this macro supports, analogous to\n<a href=\"#rule.attrs\">rule.attrs</a>. Keys are attribute names, and values are either attribute\nobjects like <code>attr.label_list(...)</code> (see the <a href=\"../toplevel/attr.html\">attr</a>\nmodule), or <code>None</code>. A <code>None</code> entry means that the macro does not have an\nattribute by that name, even if it would have otherwise inherited one via <code>inherit_attrs</code>\n(see below).\n\n<p>The special <code>name</code> attribute is predeclared and must not be included in the\ndictionary. The <code>visibility</code> attribute name is reserved and must not be included in the\ndictionary.\n\n<p>Attributes whose names start with <code>_</code> are private -- they cannot be passed at the call\nsite of the rule. Such attributes can be assigned a default value (as in\n<code>attr.label(default=\"//pkg:foo\")</code>) to create an implicit dependency on a label.\n\n<p>To limit memory usage, there is a cap on the number of attributes that may be declared.\n"
      default_value: "{}"
    }
    param {
      name: "inherit_attrs"
      doc: "A rule symbol, macro symbol, or the name of a built-in common attribute list (see below) from which\nthe macro should inherit attributes.\n\n<p>If <code>inherit_attrs</code> is set to the string <code>\"common\"</code>, the macro will inherit\n<a href=\"/reference/be/common-definitions#common-attributes\">common rule attribute definitions</a>\nused by all Starlark rules.\n\n<p>Note that if the return value of <code>rule()</code> or <code>macro()</code> was not assigned to\na global variable in a .bzl file, then such a value has not been registered as a rule or macro\nsymbol, and therefore cannot be used for <code>inherit_attrs</code>.\n\n<p>The inheritance mechanism works as follows:</p>\n<ol>\n  <li>The special <code>name</code> and <code>visibility</code> attributes are never inherited;\n  <li>Hidden attributes (ones whose name starts with <code>\"_\"</code>) are never inherited;\n  <li>Attributes whose names are already defined in the <code>attrs</code> dictionary are never\n    inherited (the entry in <code>attrs</code> takes precedence; note that an entry may be set to\n    <code>None</code> to ensure that no attribute by that name gets defined on the macro);\n  <li>All other attributes are inherited from the rule or macro and effectively merged into the\n    <code>attrs</code> dict.\n</ol>\n\n<p>When a non-mandatory attribute is inherited, the default value of the attribute is overridden\nto be <code>None</code>, regardless of what it was specified in the original rule or macro. This\nensures that when the macro forwards the attribute\'s value to an instance of the wrapped rule or\nmacro &ndash; such as by passing in the unmodified <code>**kwargs</code> &ndash; a value that was\nabsent from the outer macro\'s call will also be absent in the inner rule or macro\'s call (since\npassing <code>None</code> to an attribute is treated the same as omitting the attribute).\nThis is important because omitting an attribute has subtly different semantics from passing\nits apparent default value. In particular, omitted attributes are not shown in some <code>bazel\nquery</code> output formats, and computed defaults only execute when the value is omitted. If the\nmacro needs to examine or modify an inherited attribute &ndash; for example, to add a value to an\ninherited <code>tags</code> attribute &ndash; you must make sure to handle the <code>None</code>\ncase in the macro\'s implementation function.\n\n<p>For example, the following macro inherits all attributes from <code>native.cc_library</code>,\nexcept for <code>cxxopts</code> (which is removed from the attribute list) and <code>copts</code>\n(which is given a new definition). It also takes care to checks for the default <code>None</code>\nvalue of the inherited <code>tags</code> attribute before appending an additional tag.\n\n<pre class=\"language-python\">\ndef _my_cc_library_impl(name, visibility, tags, **kwargs):\n    # Append a tag; tags attr was inherited from native.cc_library, and\n    # therefore is None unless explicitly set by the caller of my_cc_library()\n    my_tags = (tags or []) + [\"my_custom_tag\"]\n    native.cc_library(\n        name = name,\n        visibility = visibility,\n        tags = my_tags,\n        **kwargs\n    )\n\nmy_cc_library = macro(\n    implementation = _my_cc_library_impl,\n    inherit_attrs = native.cc_library,\n    attrs = {\n        \"cxxopts\": None,\n        \"copts\": attr.string_list(default = [\"-D_FOO\"]),\n    },\n)\n</pre>\n\n<p>If <code>inherit_attrs</code> is set, the macro\'s implementation function <em>must</em> have a\n<code>**kwargs</code> residual keyword parameter.\n\n<p>By convention, a macro should pass inherited, non-overridden attributes unchanged to the \"main\"\nrule or macro symbol which the macro is wrapping. Typically, most inherited attributes will not have\na parameter in the implementation function\'s parameter list, and will simply be passed via\n<code>**kwargs</code>. It can be convenient for the implementation function to have explicit\nparameters for some inherited attributes (most commonly, <code>tags</code> and\n<code>testonly</code>) if the macro needs to pass those attributes to both \"main\" and non-\"main\"\ntargets &ndash; but if the macro also needs to examine or manipulate those attributes, you must take\ncare to handle the <code>None</code> default value of non-mandatory inherited attributes.\n"
      default_value: "None"
    }
    param {
      name: "finalizer"
      doc: "Whether this macro is a rule finalizer, which is a macro that, regardless of its position in a\n<code>BUILD</code> file, is evaluated at the end of package loading, after all non-finalizer targets\nhave been defined.\n\n<p>Unlike ordinary symbolic macros, rule finalizers may call\n<a href=\"../toplevel/native#existing_rule\"><code>native.existing_rule()</code></a> and\n<a href=\"../toplevel/native#existing_rules\"><code>native.existing_rules()</code></a> to query the\nset of <em>non-finalizer</em> rule targets defined in the current package. Note that\n<code>native.existing_rule()</code> and <code>native.existing_rules()</code> cannot access the\ntargets defined by any rule finalizer, including this one.\n"
      default_value: "False"
    }
    param {
      name: "doc"
      doc: "A description of the macro that can be extracted by documentation generating tools."
      default_value: "None"
    }
  }
  doc: "Defines a symbolic macro, which may be called in <code>BUILD</code> files or macros (legacy or\nsymbolic) to define targets &ndash; possibly multiple ones.\n\n<p>The value returned by <code>macro(...)</code> must be assigned to a global variable in a .bzl\nfile; the name of the global variable will be the macro symbol\'s name.\n\n<p>See <a href=\"/extending/macros\">Macros</a> for a comprehensive guide on how to use symbolic\nmacros.\n"
  api_context: BZL
}
global {
  name: "module_extension"
  callable {
    param {
      name: "implementation"
      doc: "The function that implements this module extension. Must take a single parameter, <code><a href=\"../builtins/module_ctx.html\">module_ctx</a></code>. The function is called once at the beginning of a build to determine the set of available repos."
      is_mandatory: true
    }
    param {
      name: "tag_classes"
      doc: "A dictionary to declare all the tag classes used by the extension. It maps from the name of the tag class to a <code><a href=\"../builtins/tag_class.html\">tag_class</a></code> object."
      default_value: "{}"
    }
    param {
      name: "doc"
      doc: "A description of the module extension that can be extracted by documentation generating tools."
      default_value: "None"
    }
    param {
      name: "environ"
      doc: "Provides a list of environment variable that this module extension depends on. If an environment variable in that list changes, the extension will be re-evaluated."
      default_value: "[]"
    }
    param {
      name: "os_dependent"
      doc: "Indicates whether this extension is OS-dependent or not"
      default_value: "False"
    }
    param {
      name: "arch_dependent"
      doc: "Indicates whether this extension is architecture-dependent or not"
      default_value: "False"
    }
  }
  doc: "Creates a new module extension. Store it in a global value, so that it can be exported and used in a MODULE.bazel file with <code><a href=\"../globals/module.html#use_extension\">use_extension</a></code>."
  api_context: BZL
}
global {
  name: "native"
  api_context: BZL
  global_variable {
    name: "aar_import"
  }
  global_variable {
    name: "action_listener"
  }
  global_variable {
    name: "alias"
  }
  global_variable {
    name: "android_binary"
  }
  global_variable {
    name: "android_library"
  }
  global_variable {
    name: "android_local_test"
  }
  global_variable {
    name: "android_sdk"
  }
  global_variable {
    name: "android_tools_defaults_jar"
  }
  global_variable {
    name: "available_xcodes"
  }
  global_variable {
    name: "cc_binary"
  }
  global_variable {
    name: "cc_import"
  }
  global_variable {
    name: "cc_libc_top_alias"
  }
  global_variable {
    name: "cc_library"
  }
  global_variable {
    name: "cc_proto_library"
  }
  global_variable {
    name: "cc_shared_library"
  }
  global_variable {
    name: "cc_static_library"
  }
  global_variable {
    name: "cc_test"
  }
  global_variable {
    name: "cc_toolchain"
  }
  global_variable {
    name: "cc_toolchain_alias"
  }
  global_variable {
    name: "cc_toolchain_suite"
  }
  global_variable {
    name: "config_feature_flag"
  }
  global_variable {
    name: "config_setting"
  }
  global_variable {
    name: "constraint_setting"
  }
  global_variable {
    name: "constraint_value"
  }
  global_variable {
    name: "environment"
  }
  global_variable {
    name: "existing_rule"
  }
  global_variable {
    name: "existing_rules"
  }
  global_variable {
    name: "exports_files"
  }
  global_variable {
    name: "extra_action"
  }
  global_variable {
    name: "fdo_prefetch_hints"
  }
  global_variable {
    name: "fdo_profile"
  }
  global_variable {
    name: "filegroup"
  }
  global_variable {
    name: "genquery"
  }
  global_variable {
    name: "genrule"
  }
  global_variable {
    name: "glob"
  }
  global_variable {
    name: "java_binary"
  }
  global_variable {
    name: "java_import"
  }
  global_variable {
    name: "java_library"
  }
  global_variable {
    name: "java_lite_proto_library"
  }
  global_variable {
    name: "java_package_configuration"
  }
  global_variable {
    name: "java_plugin"
  }
  global_variable {
    name: "java_plugins_flag_alias"
  }
  global_variable {
    name: "java_proto_library"
  }
  global_variable {
    name: "java_runtime"
  }
  global_variable {
    name: "java_test"
  }
  global_variable {
    name: "java_toolchain"
  }
  global_variable {
    name: "label_flag"
  }
  global_variable {
    name: "label_setting"
  }
  global_variable {
    name: "memprof_profile"
  }
  global_variable {
    name: "module_name"
  }
  global_variable {
    name: "module_version"
  }
  global_variable {
    name: "objc_import"
  }
  global_variable {
    name: "objc_library"
  }
  global_variable {
    name: "package"
  }
  global_variable {
    name: "package_group"
  }
  global_variable {
    name: "package_name"
  }
  global_variable {
    name: "package_relative_label"
  }
  global_variable {
    name: "platform"
  }
  global_variable {
    name: "propeller_optimize"
  }
  global_variable {
    name: "proto_lang_toolchain"
  }
  global_variable {
    name: "proto_library"
  }
  global_variable {
    name: "py_binary"
  }
  global_variable {
    name: "py_library"
  }
  global_variable {
    name: "py_runtime"
  }
  global_variable {
    name: "py_test"
  }
  global_variable {
    name: "repo_name"
  }
  global_variable {
    name: "repository_name"
  }
  global_variable {
    name: "sh_binary"
  }
  global_variable {
    name: "sh_library"
  }
  global_variable {
    name: "sh_test"
  }
  global_variable {
    name: "starlark_doc_extract"
  }
  global_variable {
    name: "subpackages"
  }
  global_variable {
    name: "test_suite"
  }
  global_variable {
    name: "toolchain"
  }
  global_variable {
    name: "toolchain_type"
  }
  global_variable {
    name: "xcode_config"
  }
  global_variable {
    name: "xcode_config_alias"
  }
  global_variable {
    name: "xcode_version"
  }
}
global {
  name: "platform_common"
  doc: "Functions for Starlark to interact with the platform APIs."
  api_context: BZL
  global_variable {
    name: "getConstraintSettingInfoConstructor"
    callable {
    }
    doc: "The constructor/key for the <a href=\'../providers/ConstraintSettingInfo.html\'>ConstraintSettingInfo</a> provider.<br/><i>Note: This API is experimental and may change at any time. It is disabled by default, but may be enabled with <code>--experimental_platforms_api</code></i>"
    api_context: BZL
  }
  global_variable {
    name: "getConstraintValueInfoConstructor"
    callable {
    }
    doc: "The constructor/key for the <a href=\'../providers/ConstraintValueInfo.html\'>ConstraintValueInfo</a> provider.<br/><i>Note: This API is experimental and may change at any time. It is disabled by default, but may be enabled with <code>--experimental_platforms_api</code></i>"
    api_context: BZL
  }
  global_variable {
    name: "getMakeVariableProvider"
    callable {
    }
    doc: "The constructor/key for the <a href=\'../providers/TemplateVariableInfo.html\'>TemplateVariableInfo</a> provider."
    api_context: BZL
  }
  global_variable {
    name: "getPlatformInfoConstructor"
    callable {
    }
    doc: "The constructor/key for the <a href=\'../providers/PlatformInfo.html\'>PlatformInfo</a> provider.<br/><i>Note: This API is experimental and may change at any time. It is disabled by default, but may be enabled with <code>--experimental_platforms_api</code></i>"
    api_context: BZL
  }
  global_variable {
    name: "getToolchainInfoConstructor"
    callable {
    }
    doc: "The constructor/key for the <a href=\'../providers/ToolchainInfo.html\'>ToolchainInfo</a> provider."
    api_context: BZL
  }
}
global {
  name: "proto"
  doc: "A module for protocol message processing."
  api_context: BZL
  global_variable {
    name: "encodeText"
    callable {
      param {
        name: "x"
        is_mandatory: true
      }
    }
    doc: "Returns the struct argument\'s encoding as a text-format protocol message.\nThe data structure must be recursively composed of strings, ints, floats, or bools, or structs, sequences, and dicts of these types.\n<p>A struct is converted to a message. Fields are emitted in name order.\nEach struct field whose value is None is ignored.\n<p>A sequence (such as a list or tuple) is converted to a repeated field.\nIts elements must not be sequences or dicts.\n<p>A dict is converted to a repeated field of messages with fields named \'key\' and \'value\'.\nEntries are emitted in iteration (insertion) order.\nThe dict\'s keys must be strings or ints, and its values must not be sequences or dicts.\nExamples:<br><pre class=language-python>proto.encode_text(struct(field=123))\n# field: 123\n\nproto.encode_text(struct(field=True))\n# field: true\n\nproto.encode_text(struct(field=[1, 2, 3]))\n# field: 1\n# field: 2\n# field: 3\n\nproto.encode_text(struct(field=\'text\', ignored_field=None))\n# field: \"text\"\n\nproto.encode_text(struct(field=struct(inner_field=\'text\', ignored_field=None)))\n# field {\n#   inner_field: \"text\"\n# }\n\nproto.encode_text(struct(field=[struct(inner_field=1), struct(inner_field=2)]))\n# field {\n#   inner_field: 1\n# }\n# field {\n#   inner_field: 2\n# }\n\nproto.encode_text(struct(field=struct(inner_field=struct(inner_inner_field=\'text\'))))\n# field {\n#    inner_field {\n#     inner_inner_field: \"text\"\n#   }\n# }\n\nproto.encode_text(struct(foo={4: 3, 2: 1}))\n# foo: {\n#   key: 4\n#   value: 3\n# }\n# foo: {\n#   key: 2\n#   value: 1\n# }\n</pre>"
    api_context: BZL
  }
}
global {
  name: "proto_common_do_not_use"
  api_context: BZL
  global_variable {
    name: "INCOMPATIBLE_ENABLE_PROTO_TOOLCHAIN_RESOLUTION"
  }
}
global {
  name: "provider"
  callable {
    param {
      name: "doc"
      doc: "A description of the provider that can be extracted by documentation generating tools."
      default_value: "None"
    }
    param {
      name: "fields"
      doc: "If specified, restricts the set of allowed fields. <br>Possible values are:<ul>  <li> list of fields:<br>       <pre class=\"language-python\">provider(fields = [\'a\', \'b\'])</pre><p>  <li> dictionary field name -> documentation:<br>       <pre class=\"language-python\">provider(\n       fields = { \'a\' : \'Documentation for a\', \'b\' : \'Documentation for b\' })</pre></ul>All fields are optional."
      default_value: "None"
    }
    param {
      name: "init"
      doc: "An optional callback for preprocessing and validating the provider\'s field values during instantiation. If <code>init</code> is specified, <code>provider()</code> returns a tuple of 2 elements: the normal provider symbol and a <em>raw constructor</em>.<p>A precise description follows; see <a href=\'https://bazel.build/extending/rules#custom_initialization_of_providers\'>Rules (Custom initialization of providers)</a> for an intuitive discussion and use cases.<p>Let <code>P</code> be the provider symbol created by calling <code>provider()</code>. Conceptually, an instance of <code>P</code> is generated by calling a default constructor function <code>c(*args, **kwargs)</code>, which does the following:<ul><li>If <code>args</code> is non-empty, an error occurs.</li><li>If the <code>fields</code> parameter was specified when <code>provider()</code> was called, and if <code>kwargs</code> contains any key that was not listed in <code>fields</code>, an error occurs.</li><li>Otherwise, <code>c</code> returns a new instance that has, for each <code>k: v</code> entry in <code>kwargs</code>, a field named <code>k</code> with value <code>v</code>.</ul>In the case where an <code>init</code> callback is <em>not</em> given, a call to the symbol <code>P</code> itself acts as a call to the default constructor function <code>c</code>; in other words, <code>P(*args, **kwargs)</code> returns <code>c(*args, **kwargs)</code>. For example,<pre class=\"language-python\">MyInfo = provider()\nm = MyInfo(foo = 1)</pre>will straightforwardly make it so that <code>m</code> is a <code>MyInfo</code> instance with <code>m.foo == 1</code>.<p>But in the case where <code>init</code> is specified, the call <code>P(*args, **kwargs)</code> will perform the following steps instead:<ol><li>The callback is invoked as <code>init(*args, **kwargs)</code>, that is, with the exact same positional and keyword arguments as were passed to <code>P</code>.</li><li>The return value of <code>init</code> is expected to be a dictionary, <code>d</code>, whose keys are field name strings. If it is not, an error occurs.</li><li>A new instance of <code>P</code> is generated as if by calling the default constructor with <code>d</code>\'s entries as keyword arguments, as in <code>c(**d)</code>.</li></ol><p>NB: the above steps imply that an error occurs if <code>*args</code> or <code>**kwargs</code> does not match <code>init</code>\'s signature, or the evaluation of <code>init</code>\'s body fails (perhaps intentionally via a call to <a href=\"../globals/all.html#fail\"><code>fail()</code></a>), or if the return value of <code>init</code> is not a dictionary with the expected schema.<p>In this way, the <code>init</code> callback generalizes normal provider construction by allowing positional arguments and arbitrary logic for preprocessing and validation. It does <em>not</em> enable circumventing the list of allowed <code>fields</code>.<p>When <code>init</code> is specified, the return value of <code>provider()</code> becomes a tuple <code>(P, r)</code>, where <code>r</code> is the <em>raw constructor</em>. In fact, the behavior of <code>r</code> is exactly that of the default constructor function <code>c</code> discussed above. Typically, <code>r</code> is bound to a variable whose name is prefixed with an underscore, so that only the current .bzl file has direct access to it:<pre class=\"language-python\">MyInfo, _new_myinfo = provider(init = ...)</pre>"
      default_value: "None"
    }
  }
  doc: "Defines a provider symbol. The resulting value of this function must be stored in a global value to be usable in a rule or aspect implementation. Providers can be instantiated by calling the resulting value as a function, or used directly as an index key for retrieving an instance of that provider from a target. Example:<br><pre class=\"language-python\">MyInfo = provider()\n...\ndef _my_library_impl(ctx):\n    ...\n    my_info = MyInfo(x = 2, y = 3)\n    # my_info.x == 2\n    # my_info.y == 3\n    ...</pre><p>See <a href=\'https://bazel.build/extending/rules#providers\'>Rules (Providers)</a> for a comprehensive guide on how to use providers.<p>Returns a <a href=\'../builtins/Provider.html\'><code>Provider</code></a> callable value if <code>init</code> is not specified.<p>If <code>init</code> is specified, returns a tuple of 2 elements: a <a href=\'../builtins/Provider.html\'><code>Provider</code></a> callable value and a <em>raw constructor</em> callable value. See <a href=\'https://bazel.build/extending/rules#custom_initialization_of_providers\'> Rules (Custom initialization of custom providers)</a> and the discussion of the <code>init</code> parameter below for details."
  api_context: BZL
}
global {
  name: "py_internal"
  api_context: BZL
  global_variable {
    name: "CcLauncherInfo"
  }
  global_variable {
    name: "PackageSpecificationInfo"
  }
  global_variable {
    name: "add_py_extra_pseudo_action"
  }
  global_variable {
    name: "are_action_listeners_enabled"
  }
  global_variable {
    name: "cc_helper"
  }
  global_variable {
    name: "cc_info_debug_context"
  }
  global_variable {
    name: "cc_launcher_info_cc_info"
  }
  global_variable {
    name: "cc_semantics_get_cc_runtimes"
  }
  global_variable {
    name: "cc_semantics_get_runtimes_toolchain"
  }
  global_variable {
    name: "cc_semantics_get_stl"
  }
  global_variable {
    name: "cc_toolchain_build_info_files"
  }
  global_variable {
    name: "cc_toolchain_strip_files"
  }
  global_variable {
    name: "compilation_outputs"
  }
  global_variable {
    name: "compilation_outputs_gcno_files"
  }
  global_variable {
    name: "compilation_outputs_pic_gcno_files"
  }
  global_variable {
    name: "compile"
  }
  global_variable {
    name: "copy_without_caching"
  }
  global_variable {
    name: "create_linking_context_from_compilation_outputs"
  }
  global_variable {
    name: "create_repo_mapping_manifest"
  }
  global_variable {
    name: "create_sources_only_manifest"
  }
  global_variable {
    name: "declare_constant_metadata_file"
  }
  global_variable {
    name: "declare_shareable_artifact"
  }
  global_variable {
    name: "expand_location_and_make_variables"
  }
  global_variable {
    name: "extra_libraries_build_libraries"
  }
  global_variable {
    name: "get_current_os_name"
  }
  global_variable {
    name: "get_label_repo_runfiles_path"
  }
  global_variable {
    name: "get_legacy_external_runfiles"
  }
  global_variable {
    name: "get_rule_name"
  }
  global_variable {
    name: "is_available_for"
  }
  global_variable {
    name: "is_bzlmod_enabled"
  }
  global_variable {
    name: "is_singleton_depset"
  }
  global_variable {
    name: "is_tool_configuration"
  }
  global_variable {
    name: "link"
  }
  global_variable {
    name: "linking_context_extra_link_time_libraries"
  }
  global_variable {
    name: "linking_context_linkstamps"
  }
  global_variable {
    name: "linkstamp_file"
  }
  global_variable {
    name: "make_runfiles_respect_legacy_external_runfiles"
  }
  global_variable {
    name: "merge_debug_context"
  }
  global_variable {
    name: "merge_linking_contexts"
  }
  global_variable {
    name: "merge_runfiles_with_generated_inits_empty_files_supplier"
  }
  global_variable {
    name: "regex_match"
  }
  global_variable {
    name: "runfiles_enabled"
  }
  global_variable {
    name: "share_native_deps"
  }
  global_variable {
    name: "stamp_binaries"
  }
  global_variable {
    name: "strip_opts"
  }
}
global {
  name: "repository_rule"
  callable {
    param {
      name: "implementation"
      doc: "the function that implements this rule. Must have a single parameter, <code><a href=\"../builtins/repository_ctx.html\">repository_ctx</a></code>. The function is called during the loading phase for each instance of the rule."
      is_mandatory: true
    }
    param {
      name: "attrs"
      doc: "A dictionary to declare all the attributes of the repository rule. It maps from an attribute name to an attribute object (see\n<a href=\"../toplevel/attr.html\"><code>attr</code></a> module). Attributes starting with <code>_</code> are private, and can be used to add an implicit dependency on a label to a file (a repository rule cannot depend on a generated artifact). The attribute <code>name</code> is implicitly added and must not be specified.\n<p>Declared attributes will convert <code>None</code> to the default value.</p>\n"
      default_value: "None"
    }
    param {
      name: "local"
      doc: "Indicate that this rule fetches everything from the local system and should be reevaluated at every fetch."
      default_value: "False"
    }
    param {
      name: "environ"
      doc: "<b>Deprecated</b>. This parameter has been deprecated. Migrate to <code>repository_ctx.getenv</code> instead.<br/>Provides a list of environment variable that this repository rule depends on. If an environment variable in that list change, the repository will be refetched."
      default_value: "[]"
    }
    param {
      name: "configure"
      doc: "Indicate that the repository inspects the system for configuration purpose"
      default_value: "False"
    }
    param {
      name: "remotable"
      doc: "Compatible with remote execution"
      default_value: "False"
    }
    param {
      name: "doc"
      doc: "A description of the repository rule that can be extracted by documentation generating tools."
      default_value: "None"
    }
  }
  doc: "Creates a new repository rule. Store it in a global value, so that it can be loaded and called from a <a href=\"#module_extension\"><code>module_extension()</code></a> implementation function, or used by <a href=\"../globals/module.html#use_repo_rule\"><code>use_repo_rule()</code></a>.\n"
  api_context: BZL
}
global {
  name: "rule"
  callable {
    param {
      name: "implementation"
      doc: "the Starlark function implementing this rule, must have exactly one parameter: <a href=\"../builtins/ctx.html\">ctx</a>. The function is called during the analysis phase for each instance of the rule. It can access the attributes provided by the user. It must create actions to generate all the declared outputs."
      is_mandatory: true
    }
    param {
      name: "test"
      doc: "Whether this rule is a test rule, that is, whether it may be the subject of a <code>blaze test</code> command. All test rules are automatically considered <a href=\'#rule.executable\'>executable</a>; it is unnecessary (and discouraged) to explicitly set <code>executable = True</code> for a test rule. The value defaults to <code>False</code>. See the <a href=\'https://bazel.build/extending/rules#executable_rules_and_test_rules\'> Rules page</a> for more information."
      default_value: "unbound"
    }
    param {
      name: "attrs"
      doc: "A dictionary to declare all the attributes of the rule. It maps from an attribute name to an attribute object (see\n<a href=\"../toplevel/attr.html\"><code>attr</code></a> module). Attributes starting with <code>_</code> are private, and can be used to add an implicit dependency on a label. The attribute <code>name</code> is implicitly added and must not be specified. Attributes <code>visibility</code>, <code>deprecation</code>, <code>tags</code>, <code>testonly</code>, and <code>features</code> are implicitly added and cannot be overridden. Most rules need only a handful of attributes. To limit memory usage, there is a cap on the number of attributes that may be declared.\n<p>Declared attributes will convert <code>None</code> to the default value.</p>\n"
      default_value: "{}"
    }
    param {
      name: "outputs"
      doc: "This parameter has been deprecated. Migrate rules to use <code>OutputGroupInfo</code> or <code>attr.output</code> instead. <p>A schema for defining predeclared outputs. Unlike <a href=\'../toplevel/attr.html#output\'><code>output</code></a> and <a href=\'../toplevel/attr.html#output_list\'><code>output_list</code></a> attributes, the user does not specify the labels for these files. See the <a href=\'https://bazel.build/extending/rules#files\'>Rules page</a> for more on predeclared outputs.<p>The value of this argument is either a dictionary or a callback function that produces a dictionary. The callback works similar to computed dependency attributes: The function\'s parameter names are matched against the rule\'s attributes, so for example if you pass <code>outputs = _my_func</code> with the definition <code>def _my_func(srcs, deps): ...</code>, the function has access to the attributes <code>srcs</code> and <code>deps</code>. Whether the dictionary is specified directly or via a function, it is interpreted as follows.<p>Each entry in the dictionary creates a predeclared output where the key is an identifier and the value is a string template that determines the output\'s label. In the rule\'s implementation function, the identifier becomes the field name used to access the output\'s <a href=\'../builtins/File.html\'><code>File</code></a> in <a href=\'../builtins/ctx.html#outputs\'><code>ctx.outputs</code></a>. The output\'s label has the same package as the rule, and the part after the package is produced by substituting each placeholder of the form <code>\"%{ATTR}\"</code> with a string formed from the value of the attribute <code>ATTR</code>:<ul><li>String-typed attributes are substituted verbatim.<li>Label-typed attributes become the part of the label after the package, minus the file extension. For example, the label <code>\"//pkg:a/b.c\"</code> becomes <code>\"a/b\"</code>.<li>Output-typed attributes become the part of the label after the package, including the file extension (for the above example, <code>\"a/b.c\"</code>).<li>All list-typed attributes (for example, <code>attr.label_list</code>) used in placeholders are required to have <i>exactly one element</i>. Their conversion is the same as their non-list version (<code>attr.label</code>).<li>Other attribute types may not appear in placeholders.<li>The special non-attribute placeholders <code>%{dirname}</code> and <code>%{basename}</code> expand to those parts of the rule\'s label, excluding its package. For example, in <code>\"//pkg:a/b.c\"</code>, the dirname is <code>a</code> and the basename is <code>b.c</code>.</ul><p>In practice, the most common substitution placeholder is <code>\"%{name}\"</code>. For example, for a target named \"foo\", the outputs dict <code>{\"bin\": \"%{name}.exe\"}</code> predeclares an output named <code>foo.exe</code> that is accessible in the implementation function as <code>ctx.outputs.bin</code>."
      default_value: "None"
    }
    param {
      name: "executable"
      doc: "Whether this rule is considered executable, that is, whether it may be the subject of a <code>blaze run</code> command. It defaults to <code>False</code>. See the <a href=\'https://bazel.build/extending/rules#executable_rules_and_test_rules\'> Rules page</a> for more information."
      default_value: "unbound"
    }
    param {
      name: "output_to_genfiles"
      doc: "If true, the files will be generated in the genfiles directory instead of the bin directory. Unless you need it for compatibility with existing rules (e.g. when generating header files for C++), do not set this flag."
      default_value: "False"
    }
    param {
      name: "fragments"
      doc: "List of names of configuration fragments that the rule requires in target configuration."
      default_value: "[]"
    }
    param {
      name: "host_fragments"
      doc: "List of names of configuration fragments that the rule requires in host configuration."
      default_value: "[]"
    }
    param {
      name: "toolchains"
      doc: "If set, the set of toolchains this rule requires. The list can contain String, Label, or StarlarkToolchainTypeApi objects, in any combination. Toolchains will be found by checking the current platform, and provided to the rule implementation via <code>ctx.toolchain</code>."
      default_value: "[]"
    }
    param {
      name: "incompatible_use_toolchain_transition"
      doc: "Deprecated, this is no longer in use and should be removed."
      default_value: "False"
    }
    param {
      name: "doc"
      doc: "A description of the rule that can be extracted by documentation generating tools."
      default_value: "None"
    }
    param {
      name: "provides"
      doc: "A list of providers that the implementation function must return.<p>It is an error if the implementation function omits any of the types of providers listed here from its return value. However, the implementation function may return additional providers not listed here.<p>Each element of the list is an <code>*Info</code> object returned by <a href=\'../globals/bzl.html#provider\'><code>provider()</code></a>, except that a legacy provider is represented by its string name instead.When a target of the rule is used as a dependency for a target that declares a required provider, it is not necessary to specify that provider here. It is enough that the implementation function returns it. However, it is considered best practice to specify it, even though this is not required. The <a href=\'../globals/bzl.html#aspect.required_providers\'><code>required_providers</code></a> field of an <a href=\'../globals/bzl.html#aspect\'>aspect</a> does, however, require that providers are specified here."
      default_value: "[]"
    }
    param {
      name: "dependency_resolution_rule"
      doc: "If set, the rule can be a dependency through attributes also marked as available in materializers. Every attribute of rules with this flag set must be marked as  available in materializers also. This is so that rules so marked cannot depend on rules that are not so marked."
      default_value: "False"
    }
    param {
      name: "exec_compatible_with"
      doc: "A list of constraints on the execution platform that apply to all targets of this rule type."
      default_value: "[]"
    }
    param {
      name: "analysis_test"
      doc: "If true, then this rule is treated as an analysis test. <p>Note: Analysis test rules are primarily defined using infrastructure provided in core Starlark libraries. See <a href=\"https://bazel.build/rules/testing#testing-rules\">Testing</a> for guidance. <p>If a rule is defined as an analysis test rule, it becomes allowed to use configuration transitions defined using <a href=\"#analysis_test_transition\">analysis_test_transition</a> on its attributes, but opts into some restrictions: <ul><li>Targets of this rule are limited in the number of transitive dependencies they may have. <li>The rule is considered a test rule (as if <code>test=True</code> were set). This supersedes the value of <code>test</code></li> <li>The rule implementation function may not register actions. Instead, it must register a pass/fail result via providing <a href=\'../providers/AnalysisTestResultInfo.html\'>AnalysisTestResultInfo</a>.</li></ul>"
      default_value: "False"
    }
    param {
      name: "build_setting"
      doc: "If set, describes what kind of <a href=\'/rules/config#user-defined-build-settings\'><code>build setting</code></a> this rule is. See the <a href=\'../toplevel/config.html\'><code>config</code></a> module. If this is set, a mandatory attribute named \"build_setting_default\" is automatically added to this rule, with a type corresponding to the value passed in here."
      default_value: "None"
    }
    param {
      name: "cfg"
      doc: "If set, points to the configuration transition the rule will apply to its own configuration before analysis."
      default_value: "None"
    }
    param {
      name: "exec_groups"
      doc: "Dict of execution group name (string) to <a href=\'../globals/bzl.html#exec_group\'><code>exec_group</code>s</a>. If set, allows rules to run actions on multiple execution platforms within a single target. See <a href=\'/reference/exec-groups\'>execution groups documentation</a> for more info."
      default_value: "None"
    }
    param {
      name: "initializer"
      doc: "Experimental: the Stalark function initializing the attributes of the rule. <p>The function is called at load time for each instance of the rule. It\'s called with <code>name</code> and the values of public attributes defined by the rule (not with generic attributes, for example <code>tags</code>). <p>It has to return a dictionary from the attribute names to the desired values. The attributes that are not returned are unaffected. Returning <code>None</code> as value results in using the default value specified in the attribute definition. <p>Initializers are evaluated before the default values specified in an attribute definition. Consequently, if a parameter in the initializer\'s signature contains a default values, it overwrites the default from the attribute definition (except if returning <code>None</code>). <p>Similarly, if a parameter in the initializer\'s signature doesn\'t have a default, the parameter will become mandatory. It\'s a good practice to omit default/mandatory settings on an attribute definition in such cases. <p>It\'s a good practice to use <code>**kwargs</code> for attributes that are not handled.<p>In case of extended rules, all initializers are called proceeding from child to ancestors. Each initializer is passed only the public attributes it knows about."
      default_value: "None"
    }
    param {
      name: "parent"
      doc: "Experimental: the Stalark rule that is extended. When set the public attributes are merged as well as advertised providers. The rule matches <code>executable</code> and <code>test</code> from the parent. Values of <code>fragments</code>, <code>toolchains</code>, <code>exec_compatible_with</code>, and <code>exec_groups</code> are merged. Legacy or deprecated parameters may not be set. Incoming configuration transition <code>cfg</code> of parent is applied after thisrule\'s incoming configuration."
      default_value: "None"
    }
    param {
      name: "extendable"
      doc: "Experimental: A label of an allowlist defining which rules can extending this rule. It can be set also to True/False to always allow/disallow extending. Bazel defaults to always allowing extensions."
      default_value: "None"
    }
    param {
      name: "subrules"
      doc: "Experimental: List of subrules used by this rule."
      default_value: "[]"
    }
  }
  doc: "Creates a new rule, which can be called from a BUILD file or a macro to create targets.<p>Rules must be assigned to global variables in a .bzl file; the name of the global variable is the rule\'s name.<p>Test rules are required to have a name ending in <code>_test</code>, while all other rules must not have this suffix. (This restriction applies only to rules, not to their targets.)"
  api_context: BZL
}
global {
  name: "select"
  callable {
    param {
      name: "x"
      doc: "A dict that maps configuration conditions to values. Each key is a <a href=\"../builtins/Label.html\">Label</a> or a label string that identifies a config_setting or constraint_value instance. See the <a href=\"https://bazel.build/rules/macros#label-resolution\">documentation on macros</a> for when to use a Label instead of a string."
      is_mandatory: true
    }
    param {
      name: "no_match_error"
      doc: "Optional custom error to report if no condition matches."
      default_value: "\'\'"
    }
  }
  doc: "<code>select()</code> is the helper function that makes a rule attribute <a href=\"/reference/be/common-definitions#configurable-attributes\">configurable</a>. See <a href=\"/reference/be/functions#select\">build encyclopedia</a> for details."
  api_context: BZL
}
global {
  name: "struct"
  callable {
    param {
      name: "**kwargs"
      doc: "Dictionary of arguments."
      is_star_star_arg: true
    }
  }
  doc: "A generic object with fields.<p>Structs fields cannot be reassigned once the struct is created. Two structs are equal if they have the same fields and if corresponding field values are equal."
  api_context: BZL
}
global {
  name: "subrule"
  callable {
    param {
      name: "implementation"
      doc: "The Starlark function implementing this subrule"
      is_mandatory: true
    }
    param {
      name: "attrs"
      doc: "A dictionary to declare all the (private) attributes of the subrule. <p/>Subrules may only have private attributes that are label-typed (i.e. label or label-list). The resolved values corresponding to these labels are automatically passed by Bazel to the subrule\'s implementation function as named arguments (thus the implementation function is required to accept named parameters matching the attribute names). The types of these values will be: <ul><li><code>FilesToRunProvider</code> for label attributes with <code>executable=True</code></li><li><code>File</code> for label attributes with <code>allow_single_file=True</code></li><li><code>Target</code> for all other label attributes</li><li><code>[Target]</code> for all label-list attributes</li></ul>"
      default_value: "{}"
    }
    param {
      name: "toolchains"
      doc: "If set, the set of toolchains this subrule requires. The list can contain String, Label, or StarlarkToolchainTypeApi objects, in any combination. Toolchains will be found by checking the current platform, and provided to the subrule implementation via <code>ctx.toolchains</code>. Note that AEGs need to be enabled on the consuming rule(s) if this parameter is set. In case you haven\'t migrated to AEGs yet, see https://bazel.build/extending/auto-exec-groups#migration-aegs."
      default_value: "[]"
    }
    param {
      name: "fragments"
      doc: "List of names of configuration fragments that the subrule requires in target configuration."
      default_value: "[]"
    }
    param {
      name: "subrules"
      doc: "List of other subrules needed by this subrule."
      default_value: "[]"
    }
  }
  doc: "Constructs a new instance of a subrule. The result of this function must be stored in a global variable before it can be used."
  api_context: BZL
}
global {
  name: "tag_class"
  callable {
    param {
      name: "attrs"
      doc: "A dictionary to declare all the attributes of this tag class. It maps from an attribute name to an attribute object (see <a href=\"../toplevel/attr.html\">\nattr</a> module).\n<p>Note that unlike <a href=\"../globals/bzl.html#rule\"><code>rule()</code></a>, <a href=\"../globals/bzl.html#aspect\"><code>aspect()</code></a> and <a href=\"../globals/bzl.html#repository_rule\"><code>repository_rule()</code></a>,\ndeclared attributes will not convert <code>None</code> to the default value. For the default to be used, the attribute must be omitted entirely by the caller.</p>\n"
      default_value: "{}"
    }
    param {
      name: "doc"
      doc: "A description of the tag class that can be extracted by documentation generating tools."
      default_value: "None"
    }
  }
  doc: "Creates a new tag_class object, which defines an attribute schema for a class of tags, which are data objects usable by a module extension."
  api_context: BZL
}
global {
  name: "testing"
  doc: "Helper methods for Starlark to access testing infrastructure."
  api_context: BZL
  global_variable {
    name: "analysisTest"
    callable {
      param {
        name: "name"
        doc: "Name of the target. It should be a Starlark identifier, matching pattern \'[A-Za-z_][A-Za-z0-9_]*\'."
        is_mandatory: true
      }
      param {
        name: "implementation"
        doc: "The Starlark function implementing this analysis test. It must have exactly one parameter: <a href=\"../builtins/ctx.html\">ctx</a>. The function is called during the analysis phase. It can access the attributes declared by <code>attrs</code> and populated via <code>attr_values</code>. The implementation function may not register actions. Instead, it must register a pass/fail result via providing <a href=\'../providers/AnalysisTestResultInfo.html\'>AnalysisTestResultInfo</a>."
        is_mandatory: true
      }
      param {
        name: "attrs"
        doc: "Dictionary declaring the attributes. See the <a href=\"../globals/bzl.html#rule\">rule</a> call. Attributes are allowed to use configuration transitions defined using <a  href=\"../globals/bzl.html#analysis_test_transition\">analysis_test_transition</a>."
        default_value: "{}"
      }
      param {
        name: "fragments"
        doc: "List of configuration fragments that are available to the implementation of the analysis test."
        default_value: "[]"
      }
      param {
        name: "toolchains"
        doc: "The set of toolchains the test requires. See the <a href=\"../globals/bzl.html#rule\">rule</a> call."
        default_value: "[]"
      }
      param {
        name: "attr_values"
        doc: "Dictionary of attribute values to pass to the implementation."
        default_value: "{}"
      }
    }
    doc: "Creates a new analysis test target. <p>The number of transitive dependencies of the test are limited. The limit is controlled by <code>--analysis_testing_deps_limit</code> flag."
    api_context: BZL
  }
  global_variable {
    name: "executionInfo"
    callable {
    }
    doc: "<a href=\'../providers/ExecutionInfo.html\'>testing.ExecutionInfo</a> provider key/constructor"
    api_context: BZL
  }
  global_variable {
    name: "testEnvironment"
    callable {
      param {
        name: "environment"
        doc: "A map of string keys and values that represent environment variables and their values. These will be made available during the test execution."
        is_mandatory: true
      }
      param {
        name: "inherited_environment"
        doc: "A sequence of names of environment variables. These variables are made available during the test execution with their current value taken from the shell environment. If a variable is contained in both <code>environment</code> and <code>inherited_environment</code>, the value inherited from the shell environment will take precedence if set."
        default_value: "[]"
      }
    }
    doc: "<b>Deprecated: Use RunEnvironmentInfo instead.</b> Creates a new test environment provider. Use this provider to specify extra environment variables to be made available during test execution."
    api_context: BZL
  }
}
global {
  name: "transition"
  callable {
    param {
      name: "implementation"
      doc: "The function implementing this transition. This function always has two parameters: <code>settings</code> and <code>attr</code>. The <code>settings</code> param is a dictionary whose set of keys is defined by the inputs parameter. So, for each build setting <code>--//foo=bar</code>, if <code>inputs</code> contains <code>//foo</code>, <code>settings</code> will have an entry <code>settings[\'//foo\']=\'bar\'</code>.<p>The <code>attr</code> param is a reference to <code>ctx.attr</code>. This gives the implementation function access to the rule\'s attributes to make attribute-parameterized transitions possible.<p>This function must return a <code>dict</code> from build setting identifier to build setting value; this represents the configuration transition: for each entry in the returned <code>dict</code>, the transition updates that setting to the new value. All other settings are unchanged. This function can also return a <code>list</code> of <code>dict</code>s or a <code>dict</code> of <code>dict</code>s in the case of a split transition."
      is_mandatory: true
    }
    param {
      name: "inputs"
      doc: "List of build settings that can be read by this transition. This becomes the key set of the settings parameter of the implementation function parameter."
      is_mandatory: true
    }
    param {
      name: "outputs"
      doc: "List of build settings that can be written by this transition. This must be a superset of the key set of the dictionary returned by this transition."
      is_mandatory: true
    }
  }
  doc: "A transition that reads a set of input build settings and writes a set of output build settings.<p>Example:</p><p><pre class=\"language-python\">\ndef _transition_impl(settings, attr):\n    # This transition just reads the current CPU value as a demonstration.\n    # A real transition could incorporate this into its followup logic.\n    current_cpu = settings[\"//command_line_option:cpu\"]\n    return {\"//command_line_option:compilation_mode\": \"dbg\"}\n\nbuild_in_debug_mode = transition(\n    implementation = _transition_impl,\n    inputs = [\"//command_line_option:cpu\"],\n    outputs = [\"//command_line_option:compilation_mode\"],\n)</pre></p><p>For more details see <a href=\"https://bazel.build/rules/config#user-defined-transitions\">here</a>.</p>"
  api_context: BZL
}
global {
  name: "visibility"
  callable {
    param {
      name: "value"
      doc: "A list of package specification strings, or a single package specification string.<p>Package specifications follow the same format as for <code><a href=\'/reference/be/functions#package_group\'>package_group</a></code>, except that negative package specifications are not permitted. That is, a specification may have the forms:<ul><li><code>\"//foo\"</code>: the package <code>//foo</code><li><code>\"//foo/...\"</code>: the package <code>//foo</code> and all of its subpackages.<li><code>\"public\"</code> or <code>\"private\"</code>: all packages or no packages, respectively</ul><p>The \"@\" syntax is not allowed; all specifications are interpreted relative to the current module\'s repository.<p>If <code>value</code> is a list of strings, the set of packages granted visibility to this module is the union of the packages represented by each specification. (An empty list has the same effect as <code>private</code>.) If <code>value</code> is a single string, it is treated as if it were the singleton list <code>[value]</code>.<p>Note that the flags <code>--incompatible_package_group_has_public_syntax</code> and <code>--incompatible_fix_package_group_reporoot_syntax</code> have no effect on this argument. The <code>\"public\"</code> and <code>\"private\"</code> values are always available, and <code>\"//...\"</code> is always interpreted as \"all packages in the current repository\"."
      is_mandatory: true
    }
  }
  doc: "<p>Sets the load visibility of the .bzl module currently being initialized.<p>The load visibility of a module governs whether or not other BUILD and .bzl files may load it. (This is distinct from the target visibility of the underlying .bzl source file, which governs whether the file may appear as a dependency of other targets.) Load visibility works at the level of packages: To load a module the file doing the loading must live in a package that has been granted visibility to the module. A module can always be loaded within its own package, regardless of its visibility.<p><code>visibility()</code> may only be called once per .bzl file, and only at the top level, not inside a function. The preferred style is to put this call immediately below the <code>load()</code> statements and any brief logic needed to determine the argument.<p>If the flag <code>--check_bzl_visibility</code> is set to false, load visibility violations will emit warnings but not fail the build."
  api_context: BZL
}
global {
  name: "aar_import"
  type: "CLASS: com.google.devtools.build.lib.packages.AutoloadSymbols$1"
  api_context: BUILD
}
global {
  name: "action_listener"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "extra_actions"
      doc: "        A list of <code><a href=\"/reference/be/extra-actions.html#extra_action\">extra_action</a></code> targets\n        this <code>action_listener</code> should add to the build graph.\n        E.g. <code>[ \"//my/tools:analyzer\" ]</code>.\n"
      is_mandatory: true
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "mnemonics"
      doc: "        A list of action mnemonics this <code>action_listener</code> should listen\n        for, e.g. <code>[ \"Javac\" ]</code>.\n        <p>\n          Mnemonics are not a public interface.\n          There\'s no guarantee that the mnemonics and their actions don\'t change.\n        </p>\n"
      is_mandatory: true
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\n<p>\n  <b>WARNING:</b> Extra actions are deprecated. Use\n  <a href=\"https://bazel.build/rules/aspects\">aspects</a>\n  instead.\n</p>\n\n<p>\n  An <code>action_listener</code> rule doesn\'t produce any output itself.\n  Instead, it allows tool developers to insert\n  <a href=\"/reference/be/extra-actions.html#extra_action\"><code>extra_action</code></a>s into the build system,\n  by providing a mapping from action to <a href=\"/reference/be/extra-actions.html#extra_action\"><code>extra_action</code>\n  </a>.\n</p>\n\n<p>\n  This rule\'s arguments map action mnemonics to\n  <a href=\"/reference/be/extra-actions.html#extra_action\"><code>extra_action</code></a> rules.\n</p>\n\n<p>\n  By specifying the option <a href=\"/docs/user-manual#flag--experimental_action_listener\">\n  <code>--experimental_action_listener=&lt;label&gt;</code></a>,\n  the build will use the specified <code>action_listener</code> to insert\n  <a href=\"/reference/be/extra-actions.html#extra_action\"><code>extra_action</code></a>s into the build graph.\n</p>\n\n<h4 id=\"action_listener_example\">Example</h4>\n<pre>\naction_listener(\n    name = \"index_all_languages\",\n    mnemonics = [\n        \"Javac\",\n        \"CppCompile\",\n        \"Python\",\n    ],\n    extra_actions = [\":indexer\"],\n)\n\naction_listener(\n    name = \"index_java\",\n    mnemonics = [\"Javac\"],\n    extra_actions = [\":indexer\"],\n)\n\nextra_action(\n    name = \"indexer\",\n    tools = [\"//my/tools:indexer\"],\n    cmd = \"$(location //my/tools:indexer)\" +\n          \"--extra_action_file=$(EXTRA_ACTION_FILE)\",\n)\n</pre>\n\n"
  api_context: BUILD
}
global {
  name: "alias"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "actual"
      doc: "          The target this alias refers to. It does not need to be a rule, it can also be an input\n          file.\n"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\n<p>\n  The <code>alias</code> rule creates another name a rule can be referred to as.\n</p>\n\n<p>\n  Aliasing only works for \"regular\" targets. In particular, <code>package_group</code>\n  and <code>test_suite</code> cannot be aliased.\n</p>\n\n<p>\n  Aliasing may be of help in large repositories where renaming a target would require making\n  changes to lots of files. You can also use alias rule to store a\n  <a href=\"/reference/be/functions.html#select\">select</a> function call if you want to reuse that logic for\n  multiple targets.\n</p>\n\n<p>\n  The alias rule has its own visibility declaration. In all other respects, it behaves\n  like the rule it references (e.g. testonly <em>on the alias</em> is ignored; the testonly-ness\n   of the referenced rule is used instead) with some minor exceptions:\n\n  <ul>\n    <li>\n      Tests are not run if their alias is mentioned on the command line. To define an alias\n      that runs the referenced test, use a <a href=\"#test_suite\"><code>test_suite</code></a>\n      rule with a single target in its <a href=\"#test_suite.tests\"><code>tests</code></a>\n      attribute.\n    </li>\n    <li>\n      When defining environment groups, the aliases to <code>environment</code> rules are not\n      supported. They are not supported in the <code>--target_environment</code> command line\n      option, either.\n    </li>\n  </ul>\n</p>\n\n<h4 id=\"alias_example\">Examples</h4>\n\n<pre class=\"code\">\nfilegroup(\n    name = \"data\",\n    srcs = [\"data.txt\"],\n)\n\nalias(\n    name = \"other\",\n    actual = \":data\",\n)\n</pre>\n\n"
  api_context: BUILD
}
global {
  name: "android_binary"
  type: "CLASS: com.google.devtools.build.lib.packages.AutoloadSymbols$1"
  api_context: BUILD
}
global {
  name: "android_library"
  type: "CLASS: com.google.devtools.build.lib.packages.AutoloadSymbols$1"
  api_context: BUILD
}
global {
  name: "android_local_test"
  type: "CLASS: com.google.devtools.build.lib.packages.AutoloadSymbols$1"
  api_context: BUILD
}
global {
  name: "android_sdk"
  type: "CLASS: com.google.devtools.build.lib.packages.AutoloadSymbols$1"
  api_context: BUILD
}
global {
  name: "android_tools_defaults_jar"
  type: "CLASS: com.google.devtools.build.lib.packages.AutoloadSymbols$1"
  api_context: BUILD
}
global {
  name: "available_xcodes"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "default"
      doc: "The default Xcode version for this platform."
      is_mandatory: true
    }
    param {
      name: "deprecation"
    }
    param {
      name: "exec_compatible_with"
      default_value: "[]"
    }
    param {
      name: "exec_properties"
      default_value: "{}"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "toolchains"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "versions"
      doc: "The Xcode versions that are available on this platform."
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  doc: "Two targets of this rule can be depended on by an `xcode_config` rule instance\nto indicate the remotely and locally available Xcode versions. This allows\nselection of an official Xcode version from the collectively available Xcodes."
  api_context: BUILD
}
global {
  name: "cc_binary"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deps"
      doc: "<a name=\"common.deps\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nDependencies for this target. Generally should only list rule targets. (Though\nsome rules permit files to be listed directly in <code>deps</code>, this\nshould be avoided when possible.)\n</p>\n\n<p>\nLanguage-specific rules generally limit the listed targets to those with\nspecific <a href=\"https://bazel.build/extending/rules#providers\">providers</a>.</p>\n\n<p>\nThe precise semantics of what it means for a target to depend on another using\n<code>deps</code> are specific to the kind of rule, and the rule-specific\ndocumentation goes into more detail. For rules which process source code,\n<code>deps</code> generally specifies code dependencies used by the code in\n<a href=\"#typical.srcs\"><code>srcs</code></a>.\n</p>\n\n<p>\nMost often, a <code>deps</code> dependency is used to allow one module to use\nsymbols defined in another module written in the same programming language and\nseparately compiled.  Cross-language dependencies are also permitted in many\ncases: For example, a <code>java_library</code> target may depend on C++ code\nin a <code>cc_library</code> target, by listing the latter in the\n<code>deps</code> attribute.  See the definition of\n<a href=\"/concepts/build-ref#deps\">dependencies</a>\nfor more information.\n</p>\n"
    }
    param {
      name: "srcs"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nFiles processed or included by this rule. Generally lists files directly, but\nmay list rule targets (like <code>filegroup</code> or <code>genrule</code>) to\ninclude their default outputs.\n</p>\n\n<p>\nLanguage-specific rules often require that the listed files have particular\nfile extensions.\n</p>\n"
    }
    param {
      name: "data"
      doc: "<a name=\"common.data\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nFiles needed by this rule at runtime. May list file or rule targets. Generally\nallows any target.\n</p>\n\n<p>\nThe default outputs and runfiles of targets in the <code>data</code> attribute\nshould appear in the <code>*.runfiles</code> area of any executable which is\noutput by or has a runtime dependency on this target. This may include data\nfiles or binaries used when this target\'s\n<a href=\"#typical.srcs\"><code>srcs</code></a> are executed. See the\n<a href=\"/concepts/dependencies#data-dependencies\">data dependencies</a>\nsection for more information about how to depend on and use data files.\n</p>\n\n<p>\nNew rules should define a <code>data</code> attribute if they process\ninputs which might use other inputs at runtime. Rules\' implementation functions\nmust also <a href=\"https://bazel.build/rules/rules#runfiles\">populate the target\'s\nrunfiles</a> from the outputs and runfiles of any <code>data</code> attribute,\nas well as runfiles from any dependency attribute which provides either\nsource code or runtime dependencies.\n</p>\n"
    }
    param {
      name: "additional_linker_inputs"
      doc: "Pass these files to the C++ linker command.\n<p>\n  For example, compiled Windows .res files can be provided here to be embedded in\n  the binary target.\n</p>"
      default_value: "[]"
    }
    param {
      name: "args"
      doc: "<p>\n  List of strings; subject to\n  <a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n  <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution, and\n  <a href=\"#sh-tokenization\">Bourne shell tokenization</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\nCommand line arguments that Bazel will pass to the target when it is executed\neither by the <code>run</code> command or as a test. These arguments are\npassed before the ones that are specified on the <code>bazel run</code> or\n<code>bazel test</code> command line.\n</p>\n\n<p>\n<em class=\"harmful\">NOTE: The arguments are not passed when you run the target\noutside of Bazel (for example, by manually executing the binary in\n<code>bazel-bin/</code>).</em>\n</p>\n"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "conlyopts"
      doc: "Add these options to the C compilation command.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>."
      default_value: "[]"
    }
    param {
      name: "copts"
      doc: "Add these options to the C/C++ compilation command.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>.\n<p>\n  Each string in this attribute is added in the given order to <code>COPTS</code> before\n  compiling the binary target. The flags take effect only for compiling this target, not\n  its dependencies, so be careful about header files included elsewhere.\n  All paths should be relative to the workspace, not to the current package.\n  This attribute should not be needed outside of <code>third_party</code>.\n</p>\n<p>\n  If the package declares the <a href=\"/reference/be/functions.html#package.features\">feature</a>\n  <code>no_copts_tokenization</code>, Bourne shell tokenization applies only to strings\n  that consist of a single \"Make\" variable.\n</p>"
      default_value: "[]"
    }
    param {
      name: "cxxopts"
      doc: "Add these options to the C++ compilation command.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>."
      default_value: "[]"
    }
    param {
      name: "defines"
      doc: "List of defines to add to the compile line.\nSubject to <a href=\"/reference/be/make-variables\">\"Make\" variable</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>.\nEach string, which must consist of a single Bourne shell token,\nis prepended with <code>-D</code> and added to the compile command line to this target,\nas well as to every rule that depends on it. Be very careful, since this may have\nfar-reaching effects.  When in doubt, add define values to\n<a href=\"#cc_binary.local_defines\"><code>local_defines</code></a> instead."
      default_value: "[]"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "dynamic_deps"
      doc: "These are other <code>cc_shared_library</code> dependencies the current target depends on.\n\n<p>\nThe <code>cc_shared_library</code> implementation will use the list of\n<code>dynamic_deps</code> (transitively, i.e. also the <code>dynamic_deps</code> of the\ncurrent target\'s <code>dynamic_deps</code>) to decide which <code>cc_libraries</code> in\nthe transitive <code>deps</code> should not be linked in because they are already provided\nby a different <code>cc_shared_library</code>."
      default_value: "[]"
    }
    param {
      name: "env"
      doc: "<p>Dictionary of strings; values are subject to\n<a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n<a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution; default is <code>{}</code></p>\n\n<p>Specifies additional environment variables to set when the target is\n  executed by <code>bazel run</code>.\n</p>\n\n<p>\n  This attribute only applies to native rules, like <code>cc_binary</code>, <code>py_binary</code>,\n  and <code>sh_binary</code>.  It does not apply to Starlark-defined executable rules.\n</p>\n\n<p>\n<em class=\"harmful\">NOTE: The environment variables are not set when you run the target\noutside of Bazel (for example, by manually executing the binary in\n<code>bazel-bin/</code>).</em>\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "hdrs_check"
      doc: "Deprecated, no-op."
    }
    param {
      name: "includes"
      doc: "List of include dirs to be added to the compile line.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution.\nEach string is prepended with the package path and passed to the C++ toolchain for\nexpansion via the \"include_paths\" CROSSTOOL feature. A toolchain running on a POSIX system\nwith typical feature definitions will produce\n<code>-isystem path_to_package/include_entry</code>.\nThis should only be used for third-party libraries that\ndo not conform to the Google style of writing #include statements.\nUnlike <a href=\"#cc_binary.copts\">COPTS</a>, these flags are added for this rule\nand every rule that depends on it. (Note: not the rules it depends upon!) Be\nvery careful, since this may have far-reaching effects.  When in doubt, add\n\"-I\" flags to <a href=\"#cc_binary.copts\">COPTS</a> instead.\n<p>\nThe added <code>include</code> paths will include generated files as well as\nfiles in the source tree.\n</p>"
      default_value: "[]"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "link_extra_lib"
      doc: "Control linking of extra libraries.\n<p>\n    By default, C++ binaries are linked against <code>//tools/cpp:link_extra_lib</code>,\n    which by default depends on the label flag <code>//tools/cpp:link_extra_libs</code>.\n    Without setting the flag, this library is empty by default. Setting the label flag\n    allows linking optional dependencies, such as overrides for weak symbols, interceptors\n    for shared library functions, or special runtime libraries (for malloc replacements,\n    prefer <code>malloc</code> or <code>--custom_malloc</code>). Setting this attribute to\n    <code>None</code> disables this behaviour.\n</p>"
      is_mandatory: true
    }
    param {
      name: "linkopts"
      doc: "Add these flags to the C++ linker command.\nSubject to <a href=\"make-variables.html\">\"Make\" variable</a> substitution,\n<a href=\"common-definitions.html#sh-tokenization\">\nBourne shell tokenization</a> and\n<a href=\"common-definitions.html#label-expansion\">label expansion</a>.\nEach string in this attribute is added to <code>LINKOPTS</code> before\nlinking the binary target.\n<p>\n    Each element of this list that does not start with <code>$</code> or <code>-</code> is\n    assumed to be the label of a target in <code>deps</code>. The\n    list of files generated by that target is appended to the linker\n    options.  An error is reported if the label is invalid, or is\n    not declared in <code>deps</code>.\n</p>"
      default_value: "[]"
    }
    param {
      name: "linkshared"
      doc: "Create a shared library.\nTo enable this attribute, include <code>linkshared=True</code> in your rule. By default\nthis option is off.\n<p>\n  The presence of this flag means that linking occurs with the <code>-shared</code> flag\n  to <code>gcc</code>, and the resulting shared library is suitable for loading into for\n  example a Java program. However, for build purposes it will never be linked into the\n  dependent binary, as it is assumed that shared libraries built with a\n  <a href=\"#cc_binary\">cc_binary</a> rule are only loaded manually by other programs, so\n  it should not be considered a substitute for the <a href=\"#cc_library\">cc_library</a>\n  rule. For sake of scalability we recommend avoiding this approach altogether and\n  simply letting <code>java_library</code> depend on <code>cc_library</code> rules\n  instead.\n</p>\n<p>\n  If you specify both <code>linkopts=[\'-static\']</code> and <code>linkshared=True</code>,\n  you get a single completely self-contained unit. If you specify both\n  <code>linkstatic=True</code> and <code>linkshared=True</code>, you get a single, mostly\n  self-contained unit.\n</p>"
      default_value: "false"
    }
    param {
      name: "linkstatic"
      doc: "For <a href=\"/reference/be/c-cpp.html#cc_binary\"><code>cc_binary</code></a> and\n<a href=\"/reference/be/c-cpp.html#cc_test\"><code>cc_test</code></a>: link the binary in static\nmode. For <code>cc_library.link_static</code>: see below.\n<p>By default this option is on for <code>cc_binary</code> and off for the rest.</p>\n<p>\n  If enabled and this is a binary or test, this option tells the build tool to link in\n  <code>.a</code>\'s instead of <code>.so</code>\'s for user libraries whenever possible.\n  System libraries such as libc (but <i>not</i> the C/C++ runtime libraries,\n  see below) are still linked dynamically, as are libraries for which\n  there is no static library. So the resulting executable will still be dynamically\n  linked, hence only <i>mostly</i> static.\n</p>\n<p>\nThere are really three different ways to link an executable:\n</p>\n<ul>\n<li> STATIC with fully_static_link feature, in which everything is linked statically;\n  e.g. \"<code>gcc -static foo.o libbar.a libbaz.a -lm</code>\".<br/>\n  This mode is enabled by specifying <code>fully_static_link</code> in the\n  <a href=\"/reference/be/common-definitions#features\"><code>features</code></a> attribute.</li>\n<li> STATIC, in which all user libraries are linked statically (if a static\n  version is available), but where system libraries (excluding C/C++ runtime libraries)\n  are linked dynamically, e.g. \"<code>gcc foo.o libfoo.a libbaz.a -lm</code>\".<br/>\n  This mode is enabled by specifying <code>linkstatic=True</code>.</li>\n<li> DYNAMIC, in which all libraries are linked dynamically (if a dynamic version is\n  available), e.g. \"<code>gcc foo.o libfoo.so libbaz.so -lm</code>\".<br/>\n  This mode is enabled by specifying <code>linkstatic=False</code>.</li>\n</ul>\n<p>\nIf the <code>linkstatic</code> attribute or <code>fully_static_link</code> in\n<code>features</code> is used outside of <code>//third_party</code>\nplease include a comment near the rule to explain why.\n</p>\n<p>\nThe <code>linkstatic</code> attribute has a different meaning if used on a\n<a href=\"/reference/be/c-cpp.html#cc_library\"><code>cc_library()</code></a> rule.\nFor a C++ library, <code>linkstatic=True</code> indicates that only\nstatic linking is allowed, so no <code>.so</code> will be produced. linkstatic=False does\nnot prevent static libraries from being created. The attribute is meant to control the\ncreation of dynamic libraries.\n</p>\n<p>\nThere should be very little code built with <code>linkstatic=False</code> in production.\nIf <code>linkstatic=False</code>, then the build tool will create symlinks to\ndepended-upon shared libraries in the <code>*.runfiles</code> area.\n</p>"
      default_value: "false"
    }
    param {
      name: "local_defines"
      doc: "List of defines to add to the compile line.\nSubject to <a href=\"/reference/be/make-variables\">\"Make\" variable</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>.\nEach string, which must consist of a single Bourne shell token,\nis prepended with <code>-D</code> and added to the compile command line for this target,\nbut not to its dependents."
      default_value: "[]"
    }
    param {
      name: "malloc"
      doc: "Override the default dependency on malloc.\n<p>\n  By default, C++ binaries are linked against <code>//tools/cpp:malloc</code>,\n  which is an empty library so the binary ends up using libc malloc.\n  This label must refer to a <code>cc_library</code>. If compilation is for a non-C++\n  rule, this option has no effect. The value of this attribute is ignored if\n  <code>linkshared=True</code> is specified.\n</p>"
      is_mandatory: true
    }
    param {
      name: "module_interfaces"
      doc: "The list of files are regarded as C++20 Modules Interface.\n\n<p>\nC++ Standard has no restriction about module interface file extension\n<ul>\n<li>Clang use cppm </li>\n<li>GCC can use any source file extension </li>\n<li>MSVC use ixx </li>\n</ul>\n</p>\n<p>The use is guarded by the flag\n<code>--experimental_cpp_modules</code>.</p>"
      default_value: "[]"
    }
    param {
      name: "nocopts"
      doc: "Remove matching options from the C++ compilation command.\nSubject to <a href=\"/reference/be/make-variables\">\"Make\" variable</a> substitution.\nThe value of this attribute is interpreted as a regular expression.\nAny preexisting <code>COPTS</code> that match this regular expression\n(including values explicitly specified in the rule\'s <a\nhref=\"#cc_binary.copts\">copts</a> attribute)\nwill be removed from <code>COPTS</code> for purposes of compiling this rule.\nThis attribute should not be needed or used\noutside of <code>third_party</code>.  The values are not preprocessed\nin any way other than the \"Make\" variable substitution."
    }
    param {
      name: "output_licenses"
      doc: "<p>List of strings; default is <code>[]</code></p>\n\n<p>\nThe licenses of the output files that this binary generates.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n\n"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "reexport_deps"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "stamp"
      doc: "Whether to encode build information into the binary. Possible values:\n<ul>\n<li>\n  <code>stamp = 1</code>: Always stamp the build information into the binary, even in\n  <a href=\"/docs/user-manual#flag--stamp\"><code>--nostamp</code></a> builds. <b>This\n  setting should be avoided</b>, since it potentially kills remote caching for the\n  binary and any downstream actions that depend on it.\n</li>\n<li>\n  <code>stamp = 0</code>: Always replace build information by constant values. This\n  gives good build result caching.\n</li>\n<li>\n  <code>stamp = -1</code>: Embedding of build information is controlled by the\n  <a href=\"/docs/user-manual#flag--stamp\"><code>--[no]stamp</code></a> flag.\n</li>\n</ul>\n<p>Stamped binaries are <em>not</em> rebuilt unless their dependencies change.</p>"
      default_value: "0"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
    param {
      name: "win_def_file"
      doc: "The Windows DEF file to be passed to linker.\n<p>This attribute should only be used when Windows is the target platform.\nIt can be used to <a href=\"https://msdn.microsoft.com/en-us/library/d91k01sh.aspx\">\nexport symbols</a> during linking a shared library.</p>"
      is_mandatory: true
    }
  }
  doc: "<p>It produces an executable binary.</p>\n\n<br/>The <code>name</code> of the target should be the same as the name of the\nsource file that is the main entry point of the application (minus the extension).\nFor example, if your entry point is in <code>main.cc</code>, then your name should\nbe <code>main</code>.\n\n<h4>Implicit output targets</h4>\n<ul>\n<li><code><var>name</var>.stripped</code> (only built if explicitly requested): A stripped\n  version of the binary. <code>strip -g</code> is run on the binary to remove debug\n  symbols.  Additional strip options can be provided on the command line using\n  <code>--stripopt=-foo</code>.</li>\n<li><code><var>name</var>.dwp</code> (only built if explicitly requested): If\n  <a href=\"https://gcc.gnu.org/wiki/DebugFission\">Fission</a> is enabled: a debug\n  information package file suitable for debugging remotely deployed binaries. Else: an\n  empty file.</li>\n</ul>"
  api_context: BUILD
}
global {
  name: "cc_import"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deps"
      doc: "<a name=\"common.deps\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nDependencies for this target. Generally should only list rule targets. (Though\nsome rules permit files to be listed directly in <code>deps</code>, this\nshould be avoided when possible.)\n</p>\n\n<p>\nLanguage-specific rules generally limit the listed targets to those with\nspecific <a href=\"https://bazel.build/extending/rules#providers\">providers</a>.</p>\n\n<p>\nThe precise semantics of what it means for a target to depend on another using\n<code>deps</code> are specific to the kind of rule, and the rule-specific\ndocumentation goes into more detail. For rules which process source code,\n<code>deps</code> generally specifies code dependencies used by the code in\n<a href=\"#typical.srcs\"><code>srcs</code></a>.\n</p>\n\n<p>\nMost often, a <code>deps</code> dependency is used to allow one module to use\nsymbols defined in another module written in the same programming language and\nseparately compiled.  Cross-language dependencies are also permitted in many\ncases: For example, a <code>java_library</code> target may depend on C++ code\nin a <code>cc_library</code> target, by listing the latter in the\n<code>deps</code> attribute.  See the definition of\n<a href=\"/concepts/build-ref#deps\">dependencies</a>\nfor more information.\n</p>\n"
    }
    param {
      name: "data"
      doc: "<a name=\"common.data\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nFiles needed by this rule at runtime. May list file or rule targets. Generally\nallows any target.\n</p>\n\n<p>\nThe default outputs and runfiles of targets in the <code>data</code> attribute\nshould appear in the <code>*.runfiles</code> area of any executable which is\noutput by or has a runtime dependency on this target. This may include data\nfiles or binaries used when this target\'s\n<a href=\"#typical.srcs\"><code>srcs</code></a> are executed. See the\n<a href=\"/concepts/dependencies#data-dependencies\">data dependencies</a>\nsection for more information about how to depend on and use data files.\n</p>\n\n<p>\nNew rules should define a <code>data</code> attribute if they process\ninputs which might use other inputs at runtime. Rules\' implementation functions\nmust also <a href=\"https://bazel.build/rules/rules#runfiles\">populate the target\'s\nrunfiles</a> from the outputs and runfiles of any <code>data</code> attribute,\nas well as runfiles from any dependency attribute which provides either\nsource code or runtime dependencies.\n</p>\n"
    }
    param {
      name: "hdrs"
      doc: "The list of header files published by\nthis precompiled library to be directly included by sources in dependent rules."
      default_value: "[]"
    }
    param {
      name: "alwayslink"
      doc: "If 1, any binary that depends (directly or indirectly) on this C++\nprecompiled library will link in all the object files archived in the static library,\neven if some contain no symbols referenced by the binary.\nThis is useful if your code isn\'t explicitly called by code in\nthe binary, e.g., if your code registers to receive some callback\nprovided by some service.\n\n<p>If alwayslink doesn\'t work with VS 2017 on Windows, that is due to a\n<a href=\"https://github.com/bazelbuild/bazel/issues/3949\">known issue</a>,\nplease upgrade your VS 2017 to the latest version.</p>"
      default_value: "false"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "includes"
      doc: "List of include dirs to be added to the compile line.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution.\nEach string is prepended with the package path and passed to the C++ toolchain for\nexpansion via the \"include_paths\" CROSSTOOL feature. A toolchain running on a POSIX system\nwith typical feature definitions will produce\n<code>-isystem path_to_package/include_entry</code>.\nThis should only be used for third-party libraries that\ndo not conform to the Google style of writing #include statements.\nUnlike <a href=\"#cc_binary.copts\">COPTS</a>, these flags are added for this rule\nand every rule that depends on it. (Note: not the rules it depends upon!) Be\nvery careful, since this may have far-reaching effects.  When in doubt, add\n\"-I\" flags to <a href=\"#cc_binary.copts\">COPTS</a> instead.\n<p>\nThe default <code>include</code> path doesn\'t include generated\nfiles. If you need to <code>#include</code> a generated header\nfile, list it in the <code>srcs</code>.\n</p>"
      default_value: "[]"
    }
    param {
      name: "interface_library"
      doc: "A single interface library for linking the shared library.\n<p> Permitted file types:\n  <code>.ifso</code>,\n  <code>.tbd</code>,\n  <code>.lib</code>,\n  <code>.so</code>\n  or <code>.dylib</code>\n</p>"
      is_mandatory: true
    }
    param {
      name: "linkopts"
      doc: "Add these flags to the C++ linker command.\nSubject to <a href=\"make-variables.html\">\"Make\" variable</a> substitution,\n<a href=\"common-definitions.html#sh-tokenization\">\nBourne shell tokenization</a> and\n<a href=\"common-definitions.html#label-expansion\">label expansion</a>.\nEach string in this attribute is added to <code>LINKOPTS</code> before\nlinking the binary target.\n<p>\n  Each element of this list that does not start with <code>$</code> or <code>-</code> is\n  assumed to be the label of a target in <code>deps</code>. The\n  list of files generated by that target is appended to the linker\n  options.  An error is reported if the label is invalid, or is\n  not declared in <code>deps</code>.\n</p>"
      default_value: "[]"
    }
    param {
      name: "objects"
      default_value: "[]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "pic_objects"
      default_value: "[]"
    }
    param {
      name: "pic_static_library"
      is_mandatory: true
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "shared_library"
      doc: "A single precompiled shared library. Bazel ensures it is available to the\nbinary that depends on it during runtime.\n<p> Permitted file types:\n  <code>.so</code>,\n  <code>.dll</code>\n  or <code>.dylib</code>\n</p>"
      is_mandatory: true
    }
    param {
      name: "static_library"
      doc: "A single precompiled static library.\n<p> Permitted file types:\n  <code>.a</code>,\n  <code>.pic.a</code>\n  or <code>.lib</code>\n</p>"
      is_mandatory: true
    }
    param {
      name: "system_provided"
      doc: "If 1, it indicates the shared library required at runtime is provided by the system. In\nthis case, <code>interface_library</code> should be specified and\n<code>shared_library</code> should be empty."
      default_value: "false"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "<p>\n<code>cc_import</code> rules allows users to import precompiled C/C++ libraries.\n</p>\n\n<p>\nThe following are the typical use cases: <br/>\n\n1. Linking a static library\n<pre><code class=\"lang-starlark\">\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  static_library = \"libmylib.a\",\n  # If alwayslink is turned on,\n  # libmylib.a will be forcely linked into any binary that depends on it.\n  # alwayslink = True,\n)\n</code></pre>\n\n2. Linking a shared library (Unix)\n<pre><code class=\"lang-starlark\">\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  shared_library = \"libmylib.so\",\n)\n</code></pre>\n\n3. Linking a shared library with interface library\n\n<p>On Unix:\n<pre><code class=\"lang-starlark\">\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  # libmylib.ifso is an interface library for libmylib.so which will be passed to linker\n  interface_library = \"libmylib.ifso\",\n  # libmylib.so will be available for runtime\n  shared_library = \"libmylib.so\",\n)\n</code></pre>\n\n<p>On Windows:\n<pre><code class=\"lang-starlark\">\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  # mylib.lib is an import library for mylib.dll which will be passed to linker\n  interface_library = \"mylib.lib\",\n  # mylib.dll will be available for runtime\n  shared_library = \"mylib.dll\",\n)\n</code></pre>\n\n4. Linking a shared library with <code>system_provided=True</code>\n\n<p>On Unix:\n<pre><code class=\"lang-starlark\">\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  interface_library = \"libmylib.ifso\", # Or we can also use libmylib.so as its own interface library\n  # libmylib.so is provided by system environment, for example it can be found in LD_LIBRARY_PATH.\n  # This indicates that Bazel is not responsible for making libmylib.so available.\n  system_provided = True,\n)\n</code></pre>\n\n<p>On Windows:\n<pre><code class=\"lang-starlark\">\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  # mylib.lib is an import library for mylib.dll which will be passed to linker\n  interface_library = \"mylib.lib\",\n  # mylib.dll is provided by system environment, for example it can be found in PATH.\n  # This indicates that Bazel is not responsible for making mylib.dll available.\n  system_provided = True,\n)\n</code></pre>\n\n5. Linking to static or shared library\n\n<p>On Unix:\n<pre><code class=\"lang-starlark\">\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  static_library = \"libmylib.a\",\n  shared_library = \"libmylib.so\",\n)\n</code></pre>\n\n<p>On Windows:\n<pre><code class=\"lang-starlark\">\ncc_import(\n  name = \"mylib\",\n  hdrs = [\"mylib.h\"],\n  static_library = \"libmylib.lib\", # A normal static library\n  interface_library = \"mylib.lib\", # An import library for mylib.dll\n  shared_library = \"mylib.dll\",\n)\n</code></pre>\n\n<p>The remaining is the same on Unix and Windows:\n<pre><code class=\"lang-starlark\">\n# first will link to libmylib.a (or libmylib.lib)\ncc_binary(\n  name = \"first\",\n  srcs = [\"first.cc\"],\n  deps = [\":mylib\"],\n  linkstatic = True, # default value\n)\n\n# second will link to libmylib.so (or libmylib.lib)\ncc_binary(\n  name = \"second\",\n  srcs = [\"second.cc\"],\n  deps = [\":mylib\"],\n  linkstatic = False,\n)\n</code></pre>\n\n<p>\n<code>cc_import</code> supports an include attribute. For example:\n<pre><code class=\"lang-starlark\">\ncc_import(\n  name = \"curl_lib\",\n  hdrs = glob([\"vendor/curl/include/curl/*.h\"]),\n  includes = [\"vendor/curl/include\"],\n  shared_library = \"vendor/curl/lib/.libs/libcurl.dylib\",\n)\n</code></pre>\n</p>"
  api_context: BUILD
}
global {
  name: "cc_libc_top_alias"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "deprecation"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  api_context: BUILD
}
global {
  name: "cc_library"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deps"
      doc: "<a name=\"common.deps\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nDependencies for this target. Generally should only list rule targets. (Though\nsome rules permit files to be listed directly in <code>deps</code>, this\nshould be avoided when possible.)\n</p>\n\n<p>\nLanguage-specific rules generally limit the listed targets to those with\nspecific <a href=\"https://bazel.build/extending/rules#providers\">providers</a>.</p>\n\n<p>\nThe precise semantics of what it means for a target to depend on another using\n<code>deps</code> are specific to the kind of rule, and the rule-specific\ndocumentation goes into more detail. For rules which process source code,\n<code>deps</code> generally specifies code dependencies used by the code in\n<a href=\"#typical.srcs\"><code>srcs</code></a>.\n</p>\n\n<p>\nMost often, a <code>deps</code> dependency is used to allow one module to use\nsymbols defined in another module written in the same programming language and\nseparately compiled.  Cross-language dependencies are also permitted in many\ncases: For example, a <code>java_library</code> target may depend on C++ code\nin a <code>cc_library</code> target, by listing the latter in the\n<code>deps</code> attribute.  See the definition of\n<a href=\"/concepts/build-ref#deps\">dependencies</a>\nfor more information.\n</p>\n"
    }
    param {
      name: "srcs"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nFiles processed or included by this rule. Generally lists files directly, but\nmay list rule targets (like <code>filegroup</code> or <code>genrule</code>) to\ninclude their default outputs.\n</p>\n\n<p>\nLanguage-specific rules often require that the listed files have particular\nfile extensions.\n</p>\n"
    }
    param {
      name: "data"
      doc: "<a name=\"common.data\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nFiles needed by this rule at runtime. May list file or rule targets. Generally\nallows any target.\n</p>\n\n<p>\nThe default outputs and runfiles of targets in the <code>data</code> attribute\nshould appear in the <code>*.runfiles</code> area of any executable which is\noutput by or has a runtime dependency on this target. This may include data\nfiles or binaries used when this target\'s\n<a href=\"#typical.srcs\"><code>srcs</code></a> are executed. See the\n<a href=\"/concepts/dependencies#data-dependencies\">data dependencies</a>\nsection for more information about how to depend on and use data files.\n</p>\n\n<p>\nNew rules should define a <code>data</code> attribute if they process\ninputs which might use other inputs at runtime. Rules\' implementation functions\nmust also <a href=\"https://bazel.build/rules/rules#runfiles\">populate the target\'s\nrunfiles</a> from the outputs and runfiles of any <code>data</code> attribute,\nas well as runfiles from any dependency attribute which provides either\nsource code or runtime dependencies.\n</p>\n"
    }
    param {
      name: "hdrs"
      doc: "The list of header files published by\nthis library to be directly included by sources in dependent rules.\n<p>This is the strongly preferred location for declaring header files that\n describe the interface for the library. These headers will be made\n available for inclusion by sources in this rule or in dependent rules.\n Headers not meant to be included by a client of this library should be\n listed in the <code>srcs</code> attribute instead, even if they are\n included by a published header. See <a href=\"#hdrs\">\"Header inclusion\n checking\"</a> for a more detailed description. </p>\n<p>Permitted <code>headers</code> file types:\n  <code>.h</code>,\n  <code>.hh</code>,\n  <code>.hpp</code>,\n  <code>.hxx</code>.\n</p>"
      default_value: "[]"
    }
    param {
      name: "additional_compiler_inputs"
      doc: "Any additional files you might want to pass to the compiler command line, such as sanitizer\nignorelists, for example. Files specified here can then be used in copts with the\n$(location) function."
      default_value: "[]"
    }
    param {
      name: "additional_linker_inputs"
      doc: "Pass these files to the C++ linker command.\n<p>\n  For example, compiled Windows .res files can be provided here to be embedded in\n  the binary target.\n</p>"
      default_value: "[]"
    }
    param {
      name: "alwayslink"
      doc: "If 1, any binary that depends (directly or indirectly) on this C++\nlibrary will link in all the object files for the files listed in\n<code>srcs</code>, even if some contain no symbols referenced by the binary.\nThis is useful if your code isn\'t explicitly called by code in\nthe binary, e.g., if your code registers to receive some callback\nprovided by some service.\n\n<p>If alwayslink doesn\'t work with VS 2017 on Windows, that is due to a\n<a href=\"https://github.com/bazelbuild/bazel/issues/3949\">known issue</a>,\nplease upgrade your VS 2017 to the latest version.</p>"
      default_value: "false"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "conlyopts"
      doc: "Add these options to the C compilation command.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>."
      default_value: "[]"
    }
    param {
      name: "copts"
      doc: "Add these options to the C/C++ compilation command.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>.\n<p>\n  Each string in this attribute is added in the given order to <code>COPTS</code> before\n  compiling the binary target. The flags take effect only for compiling this target, not\n  its dependencies, so be careful about header files included elsewhere.\n  All paths should be relative to the workspace, not to the current package.\n  This attribute should not be needed outside of <code>third_party</code>.\n</p>\n<p>\n  If the package declares the <a href=\"/reference/be/functions.html#package.features\">feature</a>\n  <code>no_copts_tokenization</code>, Bourne shell tokenization applies only to strings\n  that consist of a single \"Make\" variable.\n</p>"
      default_value: "[]"
    }
    param {
      name: "cxxopts"
      doc: "Add these options to the C++ compilation command.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>."
      default_value: "[]"
    }
    param {
      name: "defines"
      doc: "List of defines to add to the compile line.\nSubject to <a href=\"/reference/be/make-variables\">\"Make\" variable</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>.\nEach string, which must consist of a single Bourne shell token,\nis prepended with <code>-D</code> and added to the compile command line to this target,\nas well as to every rule that depends on it. Be very careful, since this may have\nfar-reaching effects.  When in doubt, add define values to\n<a href=\"#cc_binary.local_defines\"><code>local_defines</code></a> instead."
      default_value: "[]"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "hdrs_check"
      doc: "Deprecated, no-op."
    }
    param {
      name: "implementation_deps"
      doc: "The list of other libraries that the library target depends on. Unlike with\n<code>deps</code>, the headers and include paths of these libraries (and all their\ntransitive deps) are only used for compilation of this library, and not libraries that\ndepend on it. Libraries specified with <code>implementation_deps</code> are still linked in\nbinary targets that depend on this library."
      default_value: "[]"
    }
    param {
      name: "include_prefix"
      doc: "The prefix to add to the paths of the headers of this rule.\n\n<p>When set, the headers in the <code>hdrs</code> attribute of this rule are accessible\nat is the value of this attribute prepended to their repository-relative path.\n\n<p>The prefix in the <code>strip_include_prefix</code> attribute is removed before this\nprefix is added.\n\n<p>This attribute is only legal under <code>third_party</code>."
    }
    param {
      name: "includes"
      doc: "List of include dirs to be added to the compile line.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution.\nEach string is prepended with the package path and passed to the C++ toolchain for\nexpansion via the \"include_paths\" CROSSTOOL feature. A toolchain running on a POSIX system\nwith typical feature definitions will produce\n<code>-isystem path_to_package/include_entry</code>.\nThis should only be used for third-party libraries that\ndo not conform to the Google style of writing #include statements.\nUnlike <a href=\"#cc_binary.copts\">COPTS</a>, these flags are added for this rule\nand every rule that depends on it. (Note: not the rules it depends upon!) Be\nvery careful, since this may have far-reaching effects.  When in doubt, add\n\"-I\" flags to <a href=\"#cc_binary.copts\">COPTS</a> instead.\n<p>\nThe added <code>include</code> paths will include generated files as well as\nfiles in the source tree.\n</p>"
      default_value: "[]"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "linkopts"
      doc: "See <a href=\"/reference/be/c-cpp.html#cc_binary.linkopts\"><code>cc_binary.linkopts</code></a>.\nThe <code>linkopts</code> attribute is also applied to any target that\ndepends, directly or indirectly, on this library via <code>deps</code>\nattributes (or via other attributes that are treated similarly:\nthe <a href=\"/reference/be/c-cpp.html#cc_binary.malloc\"><code>malloc</code></a>\nattribute of <a href=\"/reference/be/c-cpp.html#cc_binary\"><code>cc_binary</code></a>). Dependency\nlinkopts take precedence over dependent linkopts (i.e. dependency linkopts\nappear later in the command line). Linkopts specified in\n<a href=\'../user-manual.html#flag--linkopt\'><code>--linkopt</code></a>\ntake precedence over rule linkopts.\n</p>\n<p>\nNote that the <code>linkopts</code> attribute only applies\nwhen creating <code>.so</code> files or executables, not\nwhen creating <code>.a</code> or <code>.lo</code> files.\nSo if the <code>linkstatic=True</code> attribute is set, the\n<code>linkopts</code> attribute has no effect on the creation of\nthis library, only on other targets which depend on this library.\n</p>\n<p>\nAlso, it is important to note that \"-Wl,-soname\" or \"-Xlinker -soname\"\noptions are not supported and should never be specified in this attribute.\n</p>\n<p> The <code>.so</code> files produced by <code>cc_library</code>\nrules are not linked against the libraries that they depend\non.  If you\'re trying to create a shared library for use\noutside of the main repository, e.g. for manual use\nwith <code>dlopen()</code> or <code>LD_PRELOAD</code>,\nit may be better to use a <code>cc_binary</code> rule\nwith the <code>linkshared=True</code> attribute.\nSee <a href=\"/reference/be/c-cpp.html#cc_binary.linkshared\"><code>cc_binary.linkshared</code></a>.\n</p>"
      default_value: "[]"
    }
    param {
      name: "linkstamp"
      doc: "Simultaneously compiles and links the specified C++ source file into the final\nbinary. This trickery is required to introduce timestamp\ninformation into binaries; if we compiled the source file to an\nobject file in the usual way, the timestamp would be incorrect.\nA linkstamp compilation may not include any particular set of\ncompiler flags and so should not depend on any particular\nheader, compiler option, or other build variable.\n<em class=\'harmful\'>This option should only be needed in the\n<code>base</code> package.</em>"
      is_mandatory: true
    }
    param {
      name: "linkstatic"
      doc: "For <a href=\"/reference/be/c-cpp.html#cc_binary\"><code>cc_binary</code></a> and\n<a href=\"/reference/be/c-cpp.html#cc_test\"><code>cc_test</code></a>: link the binary in static\nmode. For <code>cc_library.link_static</code>: see below.\n<p>By default this option is on for <code>cc_binary</code> and off for the rest.</p>\n<p>\n  If enabled and this is a binary or test, this option tells the build tool to link in\n  <code>.a</code>\'s instead of <code>.so</code>\'s for user libraries whenever possible.\n  System libraries such as libc (but <i>not</i> the C/C++ runtime libraries,\n  see below) are still linked dynamically, as are libraries for which\n  there is no static library. So the resulting executable will still be dynamically\n  linked, hence only <i>mostly</i> static.\n</p>\n<p>\nThere are really three different ways to link an executable:\n</p>\n<ul>\n<li> STATIC with fully_static_link feature, in which everything is linked statically;\n  e.g. \"<code>gcc -static foo.o libbar.a libbaz.a -lm</code>\".<br/>\n  This mode is enabled by specifying <code>fully_static_link</code> in the\n  <a href=\"/reference/be/common-definitions#features\"><code>features</code></a> attribute.</li>\n<li> STATIC, in which all user libraries are linked statically (if a static\n  version is available), but where system libraries (excluding C/C++ runtime libraries)\n  are linked dynamically, e.g. \"<code>gcc foo.o libfoo.a libbaz.a -lm</code>\".<br/>\n  This mode is enabled by specifying <code>linkstatic=True</code>.</li>\n<li> DYNAMIC, in which all libraries are linked dynamically (if a dynamic version is\n  available), e.g. \"<code>gcc foo.o libfoo.so libbaz.so -lm</code>\".<br/>\n  This mode is enabled by specifying <code>linkstatic=False</code>.</li>\n</ul>\n<p>\nIf the <code>linkstatic</code> attribute or <code>fully_static_link</code> in\n<code>features</code> is used outside of <code>//third_party</code>\nplease include a comment near the rule to explain why.\n</p>\n<p>\nThe <code>linkstatic</code> attribute has a different meaning if used on a\n<a href=\"/reference/be/c-cpp.html#cc_library\"><code>cc_library()</code></a> rule.\nFor a C++ library, <code>linkstatic=True</code> indicates that only\nstatic linking is allowed, so no <code>.so</code> will be produced. linkstatic=False does\nnot prevent static libraries from being created. The attribute is meant to control the\ncreation of dynamic libraries.\n</p>\n<p>\nThere should be very little code built with <code>linkstatic=False</code> in production.\nIf <code>linkstatic=False</code>, then the build tool will create symlinks to\ndepended-upon shared libraries in the <code>*.runfiles</code> area.\n</p>"
      default_value: "false"
    }
    param {
      name: "local_defines"
      doc: "List of defines to add to the compile line.\nSubject to <a href=\"/reference/be/make-variables\">\"Make\" variable</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>.\nEach string, which must consist of a single Bourne shell token,\nis prepended with <code>-D</code> and added to the compile command line for this target,\nbut not to its dependents."
      default_value: "[]"
    }
    param {
      name: "module_interfaces"
      doc: "The list of files are regarded as C++20 Modules Interface.\n\n<p>\nC++ Standard has no restriction about module interface file extension\n<ul>\n<li>Clang use cppm </li>\n<li>GCC can use any source file extension </li>\n<li>MSVC use ixx </li>\n</ul>\n</p>\n<p>The use is guarded by the flag\n<code>--experimental_cpp_modules</code>.</p>"
      default_value: "[]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "strip_include_prefix"
      doc: "The prefix to strip from the paths of the headers of this rule.\n\n<p>When set, the headers in the <code>hdrs</code> attribute of this rule are accessible\nat their path with this prefix cut off.\n\n<p>If it\'s a relative path, it\'s taken as a package-relative one. If it\'s an absolute one,\nit\'s understood as a repository-relative path.\n\n<p>The prefix in the <code>include_prefix</code> attribute is added after this prefix is\nstripped.\n\n<p>This attribute is only legal under <code>third_party</code>."
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "textual_hdrs"
      doc: "The list of header files published by\nthis library to be textually included by sources in dependent rules.\n<p>This is the location for declaring header files that cannot be compiled on their own;\n that is, they always need to be textually included by other source files to build valid\n code.</p>"
      default_value: "[]"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
    param {
      name: "win_def_file"
      doc: "The Windows DEF file to be passed to linker.\n<p>This attribute should only be used when Windows is the target platform.\nIt can be used to <a href=\"https://msdn.microsoft.com/en-us/library/d91k01sh.aspx\">\nexport symbols</a> during linking a shared library.</p>"
      is_mandatory: true
    }
  }
  doc: "<p>Use <code>cc_library()</code> for C++-compiled libraries.\n  The result is  either a <code>.so</code>, <code>.lo</code>,\n  or <code>.a</code>, depending on what is needed.\n</p>\n\n<p>\n  If you build something with static linking that depends on\n  a <code>cc_library</code>, the output of a depended-on library rule\n  is the <code>.a</code> file. If you specify\n   <code>alwayslink=True</code>, you get the <code>.lo</code> file.\n</p>\n\n<p>\n  The actual output file name is <code>lib<i>foo</i>.so</code> for\n  the shared library, where <i>foo</i> is the name of the rule.  The\n  other kinds of libraries end with <code>.lo</code> and <code>.a</code>,\n  respectively.  If you need a specific shared library name, for\n  example, to define a Python module, use a genrule to copy the library\n  to the desired name.\n</p>\n\n<h4 id=\"hdrs\">Header inclusion checking</h4>\n\n<p>\n  All header files that are used in the build must be declared in\n  the <code>hdrs</code> or <code>srcs</code> of <code>cc_*</code> rules.\n  This is enforced.\n</p>\n\n<p>\n  For <code>cc_library</code> rules, headers in <code>hdrs</code> comprise the\n  public interface of the library and can be directly included both\n  from the files in <code>hdrs</code> and <code>srcs</code> of the library\n  itself as well as from files in <code>hdrs</code> and <code>srcs</code>\n  of <code>cc_*</code> rules that list the library in their <code>deps</code>.\n  Headers in <code>srcs</code> must only be directly included from the files\n  in <code>hdrs</code> and <code>srcs</code> of the library itself. When\n  deciding whether to put a header into <code>hdrs</code> or <code>srcs</code>,\n  you should ask whether you want consumers of this library to be able to\n  directly include it. This is roughly the same decision as\n  between <code>public</code> and <code>private</code> visibility in programming languages.\n</p>\n\n<p>\n  <code>cc_binary</code> and <code>cc_test</code> rules do not have an exported\n  interface, so they also do not have a <code>hdrs</code> attribute. All headers\n  that belong to the binary or test directly should be listed in\n  the <code>srcs</code>.\n</p>\n\n<p>\n  To illustrate these rules, look at the following example.\n</p>\n\n<pre><code class=\"lang-starlark\">\ncc_binary(\n    name = \"foo\",\n    srcs = [\n        \"foo.cc\",\n        \"foo.h\",\n    ],\n    deps = [\":bar\"],\n)\n\ncc_library(\n    name = \"bar\",\n    srcs = [\n        \"bar.cc\",\n        \"bar-impl.h\",\n    ],\n    hdrs = [\"bar.h\"],\n    deps = [\":baz\"],\n)\n\ncc_library(\n    name = \"baz\",\n    srcs = [\n        \"baz.cc\",\n        \"baz-impl.h\",\n    ],\n    hdrs = [\"baz.h\"],\n)\n</code></pre>\n\n<p>\n  The allowed direct inclusions in this example are listed in the table below.\n  For example <code>foo.cc</code> is allowed to directly\n  include <code>foo.h</code> and <code>bar.h</code>, but not <code>baz.h</code>.\n</p>\n\n<table class=\"table table-striped table-bordered table-condensed\">\n  <thead>\n    <tr><th>Including file</th><th>Allowed inclusions</th></tr>\n  </thead>\n  <tbody>\n    <tr><td>foo.h</td><td>bar.h</td></tr>\n    <tr><td>foo.cc</td><td>foo.h bar.h</td></tr>\n    <tr><td>bar.h</td><td>bar-impl.h baz.h</td></tr>\n    <tr><td>bar-impl.h</td><td>bar.h baz.h</td></tr>\n    <tr><td>bar.cc</td><td>bar.h bar-impl.h baz.h</td></tr>\n    <tr><td>baz.h</td><td>baz-impl.h</td></tr>\n    <tr><td>baz-impl.h</td><td>baz.h</td></tr>\n    <tr><td>baz.cc</td><td>baz.h baz-impl.h</td></tr>\n  </tbody>\n</table>\n\n<p>\n  The inclusion checking rules only apply to <em>direct</em>\n  inclusions. In the example above <code>foo.cc</code> is allowed to\n  include <code>bar.h</code>, which may include <code>baz.h</code>, which in\n  turn is allowed to include <code>baz-impl.h</code>. Technically, the\n  compilation of a <code>.cc</code> file may transitively include any header\n  file in the <code>hdrs</code> or <code>srcs</code> in\n  any <code>cc_library</code> in the transitive <code>deps</code> closure. In\n  this case the compiler may read <code>baz.h</code> and <code>baz-impl.h</code>\n  when compiling <code>foo.cc</code>, but <code>foo.cc</code> must not\n  contain <code>#include \"baz.h\"</code>. For that to be\n  allowed, <code>baz</code> must be added to the <code>deps</code>\n  of <code>foo</code>.\n</p>\n\n<p>\n  Bazel depends on toolchain support to enforce the inclusion checking rules.\n  The <code>layering_check</code> feature has to be supported by the toolchain\n  and requested explicitly, for example via the\n  <code>--features=layering_check</code> command-line flag or the\n  <code>features</code> parameter of the\n  <a href=\"/reference/be/functions.html#package\"><code>package</code></a> function. The toolchains\n  provided by Bazel only support this feature with clang on Unix and macOS.\n</p>\n\n<h4 id=\"cc_library_examples\">Examples</h4>\n\n<p id=\"alwayslink_lib_example\">\n   We use the <code>alwayslink</code> flag to force the linker to link in\n   this code although the main binary code doesn\'t reference it.\n</p>\n\n<pre><code class=\"lang-starlark\">\ncc_library(\n    name = \"ast_inspector_lib\",\n    srcs = [\"ast_inspector_lib.cc\"],\n    hdrs = [\"ast_inspector_lib.h\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\"//third_party/llvm/llvm/tools/clang:frontend\"],\n    # alwayslink as we want to be able to call things in this library at\n    # debug time, even if they aren\'t used anywhere in the code.\n    alwayslink = 1,\n)\n</code></pre>\n\n\n<p>The following example comes from\n   <code>third_party/python2_4_3/BUILD</code>.\n   Some of the code uses the <code>dl</code> library (to load\n   another, dynamic library), so this\n   rule specifies the <code>-ldl</code> link option to link the\n   <code>dl</code> library.\n</p>\n\n<pre><code class=\"lang-starlark\">\ncc_library(\n    name = \"python2_4_3\",\n    linkopts = [\n        \"-ldl\",\n        \"-lutil\",\n    ],\n    deps = [\"//third_party/expat\"],\n)\n</code></pre>\n\n<p>The following example comes from <code>third_party/kde/BUILD</code>.\n   We keep pre-built <code>.so</code> files in the depot.\n   The header files live in a subdirectory named <code>include</code>.\n</p>\n\n<pre><code class=\"lang-starlark\">\ncc_library(\n    name = \"kde\",\n    srcs = [\n        \"lib/libDCOP.so\",\n        \"lib/libkdesu.so\",\n        \"lib/libkhtml.so\",\n        \"lib/libkparts.so\",\n        <var>...more .so files...</var>,\n    ],\n    includes = [\"include\"],\n    deps = [\"//third_party/X11\"],\n)\n</code></pre>\n\n<p>The following example comes from <code>third_party/gles/BUILD</code>.\n   Third-party code often needs some <code>defines</code> and\n   <code>linkopts</code>.\n</p>\n\n<pre><code class=\"lang-starlark\">\ncc_library(\n    name = \"gles\",\n    srcs = [\n        \"GLES/egl.h\",\n        \"GLES/gl.h\",\n        \"ddx.c\",\n        \"egl.c\",\n    ],\n    defines = [\n        \"USE_FLOAT\",\n        \"__GL_FLOAT\",\n        \"__GL_COMMON\",\n    ],\n    linkopts = [\"-ldl\"],  # uses dlopen(), dl library\n    deps = [\n        \"es\",\n        \"//third_party/X11\",\n    ],\n)\n</code></pre>"
  api_context: BUILD
}
global {
  name: "cc_proto_library"
  callable {
    param {
      name: "**kwattrs"
      is_star_star_arg: true
    }
  }
  doc: "<p>\n<code>cc_proto_library</code> generates C++ code from <code>.proto</code> files.\n</p>\n\n<p>\n<code>deps</code> must point to <a href=\"protocol-buffer.html#proto_library\"><code>proto_library\n</code></a> rules.\n</p>\n\n<p>\nExample:\n</p>\n\n<pre>\n<code class=\"lang-starlark\">\ncc_library(\n    name = \"lib\",\n    deps = [\":foo_cc_proto\"],\n)\n\ncc_proto_library(\n    name = \"foo_cc_proto\",\n    deps = [\":foo_proto\"],\n)\n\nproto_library(\n    name = \"foo_proto\",\n)\n</code>\n</pre>"
  api_context: BUILD
}
global {
  name: "cc_shared_library"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deps"
      doc: "<a name=\"common.deps\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nDependencies for this target. Generally should only list rule targets. (Though\nsome rules permit files to be listed directly in <code>deps</code>, this\nshould be avoided when possible.)\n</p>\n\n<p>\nLanguage-specific rules generally limit the listed targets to those with\nspecific <a href=\"https://bazel.build/extending/rules#providers\">providers</a>.</p>\n\n<p>\nThe precise semantics of what it means for a target to depend on another using\n<code>deps</code> are specific to the kind of rule, and the rule-specific\ndocumentation goes into more detail. For rules which process source code,\n<code>deps</code> generally specifies code dependencies used by the code in\n<a href=\"#typical.srcs\"><code>srcs</code></a>.\n</p>\n\n<p>\nMost often, a <code>deps</code> dependency is used to allow one module to use\nsymbols defined in another module written in the same programming language and\nseparately compiled.  Cross-language dependencies are also permitted in many\ncases: For example, a <code>java_library</code> target may depend on C++ code\nin a <code>cc_library</code> target, by listing the latter in the\n<code>deps</code> attribute.  See the definition of\n<a href=\"/concepts/build-ref#deps\">dependencies</a>\nfor more information.\n</p>\n"
    }
    param {
      name: "additional_linker_inputs"
      doc: "Any additional files that you may want to pass to the linker, for example, linker scripts.\nYou have to separately pass any linker flags that the linker needs in order to be aware\nof this file. You can do so via the <code>user_link_flags</code> attribute."
      default_value: "[]"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "dynamic_deps"
      doc: "These are other <code>cc_shared_library</code> dependencies the current target depends on.\n\n<p>\nThe <code>cc_shared_library</code> implementation will use the list of\n<code>dynamic_deps</code> (transitively, i.e. also the <code>dynamic_deps</code> of the\ncurrent target\'s <code>dynamic_deps</code>) to decide which <code>cc_libraries</code> in\nthe transitive <code>deps</code> should not be linked in because they are already provided\nby a different <code>cc_shared_library</code>.\n</p>"
      default_value: "[]"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "exports_filter"
      doc: "This attribute contains a list of targets that are claimed to be exported by the current\nshared library.\n\n<p>\nAny target <code>deps</code> is already understood to be exported by the shared library.\nThis attribute should be used to list any targets that are exported by the shared library\nbut are transitive dependencies of <code>deps</code>.\n</p>\n\n<p>\nNote that this attribute is not actually adding a dependency edge to those targets, the\ndependency edge should instead be created by <code>deps</code>.The entries in this\nattribute are just strings. Keep in mind that when placing a target in this attribute,\nthis is considered a claim that the shared library exports the symbols from that target.\nThe <code>cc_shared_library</code> logic  doesn\'t actually handle telling the linker which\nsymbols should be exported.\n</p>\n\n<p>The following syntax is allowed:</p>\n<p><code>//foo:__pkg__</code> to account for any target in foo/BUILD</p>\n<p><code>//foo:__subpackages__</code> to account for any target in foo/BUILD or any other\npackage below foo/ like foo/bar/BUILD</p>"
      default_value: "[]"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "roots"
      default_value: "[]"
    }
    param {
      name: "shared_lib_name"
      doc: "By default cc_shared_library will use a name for the shared library output file based on\nthe target\'s name and the platform. This includes an extension and sometimes a prefix.\nSometimes you may not want the default name, for example, when loading C++ shared libraries\nfor Python the default lib* prefix is often not desired, in which case you can use this\nattribute to choose a custom name."
    }
    param {
      name: "static_deps"
      default_value: "[]"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "user_link_flags"
      doc: "Any additional flags that you may want to pass to the linker. For example, to make the\nlinker aware of a linker script passed via additional_linker_inputs you can use the\nfollowing:\n\n<pre><code class=\"lang-starlark\">\n cc_shared_library(\n    name = \"foo_shared\",\n    additional_linker_inputs = select({\n      \"//src/conditions:linux\": [\n        \":foo.lds\",\n        \":additional_script.txt\",\n      ],\n      \"//conditions:default\": []}),\n    user_link_flags = select({\n      \"//src/conditions:linux\": [\n        \"-Wl,-rpath,kittens\",\n        \"-Wl,--version-script=$(location :foo.lds)\",\n        \"-Wl,--script=$(location :additional_script.txt)\",\n      ],\n      \"//conditions:default\": []}),\n      ...\n )\n</code></pre>"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
    param {
      name: "win_def_file"
      doc: "The Windows DEF file to be passed to linker.\n<p>This attribute should only be used when Windows is the target platform.\nIt can be used to <a href=\"https://msdn.microsoft.com/en-us/library/d91k01sh.aspx\">\nexport symbols</a> during linking a shared library.</p>"
      is_mandatory: true
    }
  }
  doc: "<p>It produces a shared library.</p>\n\n<h4 id=\"cc_shard_library_examples\">Example</h4>\n\n<pre class=\"code\">\ncc_shared_library(\n    name = \"foo_shared\",\n    deps = [\n        \":foo\",\n    ],\n    dynamic_deps = [\n        \":bar_shared\",\n    ],\n    additional_linker_inputs = [\n        \":foo.lds\",\n    ],\n    user_link_flags = [\n        \"-Wl,--version-script=$(location :foo.lds)\",\n    ],\n)\ncc_library(\n    name = \"foo\",\n    srcs = [\"foo.cc\"],\n    hdrs = [\"foo.h\"],\n    deps = [\n        \":bar\",\n        \":baz\",\n    ],\n)\ncc_shared_library(\n    name = \"bar_shared\",\n    shared_lib_name = \"bar.so\",\n    deps = [\":bar\"],\n)\ncc_library(\n    name = \"bar\",\n    srcs = [\"bar.cc\"],\n    hdrs = [\"bar.h\"],\n)\ncc_library(\n    name = \"baz\",\n    srcs = [\"baz.cc\"],\n    hdrs = [\"baz.h\"],\n)\n</pre>\n\n<p>In the example <code>foo_shared</code> statically links <code>foo</code>\nand <code>baz</code>, the latter being a transitive dependency. It doesn\'t\nlink <code>bar</code> because it is already provided dynamically by the\n<code>dynamic_dep</code> <code>bar_shared</code>.</p>\n\n<p><code>foo_shared</code> uses a linker script *.lds file to control which\nsymbols should be exported. The <code>cc_shared_library</code> rule logic does\nnot control which symbols get exported, it only uses what is assumed to be\nexported to give errors during analysis phase if two shared libraries export the\nsame targets.</p>\n\n<p>Every direct dependency of <code>cc_shared_library</code> is assumed to be\nexported. Therefore, Bazel assumes during analysis that <code>foo</code> is being\nexported by <code>foo_shared</code>. <code>baz</code> is not assumed to be exported\nby <code>foo_shared</code>. Every target matched by the <code>exports_filter</code>\nis also assumed to be exported.</p>\n\n<p>Every single <code>cc_library</code> in the example should appear at most in one\n<code>cc_shared_library</code>. If we wanted to link <code>baz</code> also into\n<code>bar_shared</code> we would need to add\n<code>tags = [\"LINKABLE_MORE_THAN_ONCE\"]</code> to <code>baz</code>.</p>\n\n<p>Due to the <code>shared_lib_name</code> attribute, the file produced by\n<code>bar_shared</code> will have the name <code>bar.so</code> as opposed\nto the name <code>libbar.so</code> that it would have by default on Linux.</p>\n\n<h4 id=\"cc_shard_library_examples\">Errors</h4>\n<h5><code>Two shared libraries in dependencies export the same symbols.</code></h5>\n\n<p>This will happen whenever you are creating a target with two different\n<code>cc_shared_library</code> dependencies that export the same target. To fix this\nyou need to stop the libraries from being exported in one of the\n<code>cc_shared_library</code> dependencies.</p>\n\n<h5><code>Two shared libraries in dependencies link the same library statically</code></h5>\n\n<p>This will happen whenever you are creating a new <code>cc_shared_library</code> with two\ndifferent <code>cc_shared_library</code> dependencies that link the same target statically.\nSimilar to the error with exports.</p>\n\n<p>One way to fix this is to stop linking the library into one of the\n<code>cc_shared_library</code> dependencies. At the same time, the one that still links it\nneeds to export the library so that the one not linking it keeps visibility to\nthe symbols. Another way is to pull out a third library that exports the target.\nA third way is to tag the culprit <code>cc_library</code> with <code>LINKABLE_MORE_THAN_ONCE</code>\nbut this fix should be rare and you should absolutely make sure that the\n<code>cc_library</code> is indeed safe to link more than once.</p>\n\n<h5><code>\'//foo:foo\' is already linked statically in \'//bar:bar\' but not exported`</code></h5>\n\n<p>This means that a library in the transitive closure of your <code>deps</code> is reachable\nwithout going through one of the <code>cc_shared_library</code> dependencies but is already\nlinked into a different <code>cc_shared_library</code> in <code>dynamic_deps</code> and is not\nexported.</p>\n\n<p>The solution is to export it from the <code>cc_shared_library</code> dependency or pull out\na third <code>cc_shared_library</code> that exports it.</p>\n\n<h5><code>Do not place libraries which only contain a precompiled dynamic library in deps.\n</code></h5>\n\n<p>If you have a precompiled dynamic library, this doesn\'t need to and cannot be\nlinked statically into the current <code>cc_shared_library</code> target that you are\ncurrently creating. Therefore, it doesn\'t belong in <code>deps</code> of the\n<code>cc_shared_library</code>. If this precompiled dynamic library is a dependency of one\nof your <code>cc_libraries</code>, then the <code>cc_library</code> needs to depend on it\ndirectly.</p>\n\n<h5><code>Trying to export a library already exported by a different shared library</code></h5>\n\n<p>You will see this error if on the current rule you are claiming to export a\ntarget that is already being exported by one of your dynamic dependencies.</p>\n\n<p>To fix this, remove the target from <code>deps</code> and just rely on it from the dynamic\ndependency or make sure that the <code>exports_filter</code> doesn\'t catch this target.</p>"
  api_context: BUILD
}
global {
  name: "cc_static_library"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deps"
      doc: "The list of targets to combine into a static library, including all their transitive\ndependencies.\n\n<p>Dependencies that do not provide any object files are not included in the static\nlibrary, but their labels are collected in the file provided by the\n<code>linkdeps</code> output group.</p>"
      default_value: "[]"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "<b>This rule is currently experimental and can only be used with the <code>\n--experimental_cc_static_library</code> flag.</b>\n\nProduces a static library from a list of targets and their transitive dependencies.\n\n<p>The resulting static library contains the object files of the targets listed in\n<code>deps</code> as well as their transitive dependencies, with preference given to\n<code>PIC</code> objects.</p>\n\n<h4 id=\"cc_static_library_output_groups\">Output groups</h4>\n\n<h5><code>linkdeps</code></h5>\n<p>A text file containing the labels of those transitive dependencies of targets listed in\n<code>deps</code> that did not contribute any object files to the static library, but do\nprovide at least one static, dynamic or interface library. The resulting static library\nmay require these libraries to be available at link time.</p>\n\n<h5><code>linkopts</code></h5>\n<p>A text file containing the user-provided <code>linkopts</code> of all transitive\ndependencies of targets listed in <code>deps</code>.\n\n<h4 id=\"cc_static_library_symbol_check\">Duplicate symbols</h4>\n<p>By default, the <code>cc_static_library</code> rule checks that the resulting static\nlibrary does not contain any duplicate symbols. If it does, the build fails with an error\nmessage that lists the duplicate symbols and the object files containing them.</p>\n\n<p>This check can be disabled per target or per package by setting\n<code>features = [\"-symbol_check\"]</code> or globally via\n<code>--features=-symbol_check</code>.</p>\n\n<h5 id=\"cc_static_library_symbol_check_toolchain\">Toolchain support for <code>symbol_check</code></h5>\n<p>The auto-configured C++ toolchains shipped with Bazel support the\n<code>symbol_check</code> feature on all platforms. Custom toolchains can add support for\nit in one of two ways:</p>\n<ul>\n  <li>Implementing the <code>ACTION_NAMES.validate_static_library</code> action and\n  enabling it with the <code>symbol_check</code> feature. The tool set in the action is\n  invoked with two arguments, the static library to check for duplicate symbols and the\n  path of a file that must be created if the check passes.</li>\n  <li>Having the <code>symbol_check</code> feature add archiver flags that cause the\n  action creating the static library to fail on duplicate symbols.</li>\n</ul>"
  api_context: BUILD
}
global {
  name: "cc_test"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deps"
      doc: "The list of other libraries to be linked in to the binary target.\n<p>These can be <code>cc_library</code> or <code>objc_library</code>\ntargets.</p>\n\nIt is also allowed to\nput linker scripts (.lds) into deps, and reference them in\n<a href=\"#cc_binary.linkopts\">linkopts</a>."
      default_value: "[]"
    }
    param {
      name: "srcs"
      doc: "The list of C and C++ files that are processed to create the library target.\nThese are C/C++ source and header files, either non-generated (normal source\ncode) or generated.\n<p>All <code>.cc</code>, <code>.c</code>, and <code>.cpp</code> files will\n   be compiled. These might be generated files: if a named file is in\n   the <code>outs</code> of some other rule, this <code>cc_library</code>\n   will automatically depend on that other rule.\n</p>\n<p>Pure assembler files (.s, .asm) are not preprocessed and are typically built using\nthe assembler. Preprocessed assembly files (.S) are preprocessed and are typically built\nusing the C/C++ compiler.\n</p>\n<p>A <code>.h</code> file will not be compiled, but will be available for\n   inclusion by sources in this rule. Both <code>.cc</code> and\n   <code>.h</code> files can directly include headers listed in\n   these <code>srcs</code> or in the <code>hdrs</code> of this rule or any\n   rule listed in the <code>deps</code> argument.\n</p>\n<p>All <code>#include</code>d files must be mentioned in the\n   <code>hdrs</code> attribute of this or referenced <code>cc_library</code>\n   rules, or they should be listed in <code>srcs</code> if they are private\n   to this library. See <a href=\"#hdrs\">\"Header inclusion checking\"</a> for\n   a more detailed description.\n</p>\n<p><code>.so</code>, <code>.lo</code>, and <code>.a</code> files are\n   pre-compiled files. Your library might have these as\n   <code>srcs</code> if it uses third-party code for which we don\'t\n   have source code.\n</p>\n<p>If the <code>srcs</code> attribute includes the label of another rule,\n   <code>cc_library</code> will use the output files of that rule as source files to\n   compile. This is useful for one-off generation of source code (for more than occasional\n   use, it\'s better to implement a Starlark rule class and use the <code>cc_common</code>\n   API)\n</p>\n<p>\n  Permitted <code>srcs</code> file types:\n</p>\n<ul>\n<li>C and C++ source files: <code>.c</code>, <code>.cc</code>, <code>.cpp</code>,\n  <code>.cxx</code>, <code>.c++</code>, <code>.C</code></li>\n<li>C and C++ header files: <code>.h</code>, <code>.hh</code>, <code>.hpp</code>,\n  <code>.hxx</code>, <code>.inc</code>, <code>.inl</code>, <code>.H</code></li>\n<li>Assembler with C preprocessor: <code>.S</code></li>\n<li>Archive: <code>.a</code>, <code>.pic.a</code></li>\n<li>\"Always link\" library: <code>.lo</code>, <code>.pic.lo</code></li>\n<li>Shared library, versioned or unversioned: <code>.so</code>,\n  <code>.so.<i>version</i></code></li>\n<li>Object file: <code>.o</code>, <code>.pic.o</code></li>\n</ul>\n\n<p>\n  ... and any rules that produce those files (e.g. <code>cc_embed_data</code>).\n  Different extensions denote different programming languages in\n  accordance with gcc convention.\n</p>"
      default_value: "[]"
    }
    param {
      name: "data"
      doc: "The list of files needed by this library at runtime.\n\nSee general comments about <code>data</code>\nat <a href=\"/reference/be/common-definitions#typical-attributes\">Typical attributes defined by\nmost build rules</a>.\n<p>If a <code>data</code> is the name of a generated file, then this\n   <code>cc_library</code> rule automatically depends on the generating\n   rule.\n</p>\n<p>If a <code>data</code> is a rule name, then this\n   <code>cc_library</code> rule automatically depends on that rule,\n   and that rule\'s <code>outs</code> are automatically added to\n   this <code>cc_library</code>\'s data files.\n</p>\n<p>Your C++ code can access these data files like so:</p>\n<pre><code class=\"lang-starlark\">\n  const std::string path = devtools_build::GetDataDependencyFilepath(\n      \"my/test/data/file\");\n</code></pre>"
      default_value: "[]"
    }
    param {
      name: "additional_linker_inputs"
      doc: "Pass these files to the C++ linker command.\n<p>\n  For example, compiled Windows .res files can be provided here to be embedded in\n  the binary target.\n</p>"
      default_value: "[]"
    }
    param {
      name: "args"
      default_value: "[]"
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "conlyopts"
      doc: "Add these options to the C compilation command.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>."
      default_value: "[]"
    }
    param {
      name: "copts"
      doc: "Add these options to the C/C++ compilation command.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>.\n<p>\n  Each string in this attribute is added in the given order to <code>COPTS</code> before\n  compiling the binary target. The flags take effect only for compiling this target, not\n  its dependencies, so be careful about header files included elsewhere.\n  All paths should be relative to the workspace, not to the current package.\n  This attribute should not be needed outside of <code>third_party</code>.\n</p>\n<p>\n  If the package declares the <a href=\"/reference/be/functions.html#package.features\">feature</a>\n  <code>no_copts_tokenization</code>, Bourne shell tokenization applies only to strings\n  that consist of a single \"Make\" variable.\n</p>"
      default_value: "[]"
    }
    param {
      name: "cxxopts"
      doc: "Add these options to the C++ compilation command.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>."
      default_value: "[]"
    }
    param {
      name: "defines"
      doc: "List of defines to add to the compile line.\nSubject to <a href=\"/reference/be/make-variables\">\"Make\" variable</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>.\nEach string, which must consist of a single Bourne shell token,\nis prepended with <code>-D</code> and added to the compile command line to this target,\nas well as to every rule that depends on it. Be very careful, since this may have\nfar-reaching effects.  When in doubt, add define values to\n<a href=\"#cc_binary.local_defines\"><code>local_defines</code></a> instead."
      default_value: "[]"
    }
    param {
      name: "deprecation"
    }
    param {
      name: "distribs"
      default_value: "[]"
    }
    param {
      name: "dynamic_deps"
      doc: "These are other <code>cc_shared_library</code> dependencies the current target depends on.\n\n<p>\nThe <code>cc_shared_library</code> implementation will use the list of\n<code>dynamic_deps</code> (transitively, i.e. also the <code>dynamic_deps</code> of the\ncurrent target\'s <code>dynamic_deps</code>) to decide which <code>cc_libraries</code> in\nthe transitive <code>deps</code> should not be linked in because they are already provided\nby a different <code>cc_shared_library</code>."
      default_value: "[]"
    }
    param {
      name: "env"
      default_value: "{}"
    }
    param {
      name: "env_inherit"
      default_value: "[]"
    }
    param {
      name: "exec_compatible_with"
      default_value: "[]"
    }
    param {
      name: "exec_properties"
      default_value: "{}"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "flaky"
      default_value: "false"
    }
    param {
      name: "hdrs_check"
      doc: "Deprecated, no-op."
    }
    param {
      name: "includes"
      doc: "List of include dirs to be added to the compile line.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution.\nEach string is prepended with the package path and passed to the C++ toolchain for\nexpansion via the \"include_paths\" CROSSTOOL feature. A toolchain running on a POSIX system\nwith typical feature definitions will produce\n<code>-isystem path_to_package/include_entry</code>.\nThis should only be used for third-party libraries that\ndo not conform to the Google style of writing #include statements.\nUnlike <a href=\"#cc_binary.copts\">COPTS</a>, these flags are added for this rule\nand every rule that depends on it. (Note: not the rules it depends upon!) Be\nvery careful, since this may have far-reaching effects.  When in doubt, add\n\"-I\" flags to <a href=\"#cc_binary.copts\">COPTS</a> instead.\n<p>\nThe added <code>include</code> paths will include generated files as well as\nfiles in the source tree.\n</p>"
      default_value: "[]"
    }
    param {
      name: "licenses"
      default_value: "[]"
    }
    param {
      name: "link_extra_lib"
      doc: "Control linking of extra libraries.\n<p>\n    By default, C++ binaries are linked against <code>//tools/cpp:link_extra_lib</code>,\n    which by default depends on the label flag <code>//tools/cpp:link_extra_libs</code>.\n    Without setting the flag, this library is empty by default. Setting the label flag\n    allows linking optional dependencies, such as overrides for weak symbols, interceptors\n    for shared library functions, or special runtime libraries (for malloc replacements,\n    prefer <code>malloc</code> or <code>--custom_malloc</code>). Setting this attribute to\n    <code>None</code> disables this behaviour.\n</p>"
      is_mandatory: true
    }
    param {
      name: "linkopts"
      doc: "Add these flags to the C++ linker command.\nSubject to <a href=\"make-variables.html\">\"Make\" variable</a> substitution,\n<a href=\"common-definitions.html#sh-tokenization\">\nBourne shell tokenization</a> and\n<a href=\"common-definitions.html#label-expansion\">label expansion</a>.\nEach string in this attribute is added to <code>LINKOPTS</code> before\nlinking the binary target.\n<p>\n    Each element of this list that does not start with <code>$</code> or <code>-</code> is\n    assumed to be the label of a target in <code>deps</code>. The\n    list of files generated by that target is appended to the linker\n    options.  An error is reported if the label is invalid, or is\n    not declared in <code>deps</code>.\n</p>"
      default_value: "[]"
    }
    param {
      name: "linkshared"
      doc: "Create a shared library.\nTo enable this attribute, include <code>linkshared=True</code> in your rule. By default\nthis option is off.\n<p>\n  The presence of this flag means that linking occurs with the <code>-shared</code> flag\n  to <code>gcc</code>, and the resulting shared library is suitable for loading into for\n  example a Java program. However, for build purposes it will never be linked into the\n  dependent binary, as it is assumed that shared libraries built with a\n  <a href=\"#cc_binary\">cc_binary</a> rule are only loaded manually by other programs, so\n  it should not be considered a substitute for the <a href=\"#cc_library\">cc_library</a>\n  rule. For sake of scalability we recommend avoiding this approach altogether and\n  simply letting <code>java_library</code> depend on <code>cc_library</code> rules\n  instead.\n</p>\n<p>\n  If you specify both <code>linkopts=[\'-static\']</code> and <code>linkshared=True</code>,\n  you get a single completely self-contained unit. If you specify both\n  <code>linkstatic=True</code> and <code>linkshared=True</code>, you get a single, mostly\n  self-contained unit.\n</p>"
      default_value: "false"
    }
    param {
      name: "linkstatic"
      doc: "For <a href=\"/reference/be/c-cpp.html#cc_binary\"><code>cc_binary</code></a> and\n<a href=\"/reference/be/c-cpp.html#cc_test\"><code>cc_test</code></a>: link the binary in static\nmode. For <code>cc_library.link_static</code>: see below.\n<p>By default this option is on for <code>cc_binary</code> and off for the rest.</p>\n<p>\n  If enabled and this is a binary or test, this option tells the build tool to link in\n  <code>.a</code>\'s instead of <code>.so</code>\'s for user libraries whenever possible.\n  System libraries such as libc (but <i>not</i> the C/C++ runtime libraries,\n  see below) are still linked dynamically, as are libraries for which\n  there is no static library. So the resulting executable will still be dynamically\n  linked, hence only <i>mostly</i> static.\n</p>\n<p>\nThere are really three different ways to link an executable:\n</p>\n<ul>\n<li> STATIC with fully_static_link feature, in which everything is linked statically;\n  e.g. \"<code>gcc -static foo.o libbar.a libbaz.a -lm</code>\".<br/>\n  This mode is enabled by specifying <code>fully_static_link</code> in the\n  <a href=\"/reference/be/common-definitions#features\"><code>features</code></a> attribute.</li>\n<li> STATIC, in which all user libraries are linked statically (if a static\n  version is available), but where system libraries (excluding C/C++ runtime libraries)\n  are linked dynamically, e.g. \"<code>gcc foo.o libfoo.a libbaz.a -lm</code>\".<br/>\n  This mode is enabled by specifying <code>linkstatic=True</code>.</li>\n<li> DYNAMIC, in which all libraries are linked dynamically (if a dynamic version is\n  available), e.g. \"<code>gcc foo.o libfoo.so libbaz.so -lm</code>\".<br/>\n  This mode is enabled by specifying <code>linkstatic=False</code>.</li>\n</ul>\n<p>\nIf the <code>linkstatic</code> attribute or <code>fully_static_link</code> in\n<code>features</code> is used outside of <code>//third_party</code>\nplease include a comment near the rule to explain why.\n</p>\n<p>\nThe <code>linkstatic</code> attribute has a different meaning if used on a\n<a href=\"/reference/be/c-cpp.html#cc_library\"><code>cc_library()</code></a> rule.\nFor a C++ library, <code>linkstatic=True</code> indicates that only\nstatic linking is allowed, so no <code>.so</code> will be produced. linkstatic=False does\nnot prevent static libraries from being created. The attribute is meant to control the\ncreation of dynamic libraries.\n</p>\n<p>\nThere should be very little code built with <code>linkstatic=False</code> in production.\nIf <code>linkstatic=False</code>, then the build tool will create symlinks to\ndepended-upon shared libraries in the <code>*.runfiles</code> area.\n</p>"
      default_value: "false"
    }
    param {
      name: "local"
      default_value: "false"
    }
    param {
      name: "local_defines"
      doc: "List of defines to add to the compile line.\nSubject to <a href=\"/reference/be/make-variables\">\"Make\" variable</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>.\nEach string, which must consist of a single Bourne shell token,\nis prepended with <code>-D</code> and added to the compile command line for this target,\nbut not to its dependents."
      default_value: "[]"
    }
    param {
      name: "malloc"
      doc: "Override the default dependency on malloc.\n<p>\n  By default, C++ binaries are linked against <code>//tools/cpp:malloc</code>,\n  which is an empty library so the binary ends up using libc malloc.\n  This label must refer to a <code>cc_library</code>. If compilation is for a non-C++\n  rule, this option has no effect. The value of this attribute is ignored if\n  <code>linkshared=True</code> is specified.\n</p>"
      is_mandatory: true
    }
    param {
      name: "module_interfaces"
      doc: "The list of files are regarded as C++20 Modules Interface.\n\n<p>\nC++ Standard has no restriction about module interface file extension\n<ul>\n<li>Clang use cppm </li>\n<li>GCC can use any source file extension </li>\n<li>MSVC use ixx </li>\n</ul>\n</p>\n<p>The use is guarded by the flag\n<code>--experimental_cpp_modules</code>.</p>"
      default_value: "[]"
    }
    param {
      name: "nocopts"
      doc: "Remove matching options from the C++ compilation command.\nSubject to <a href=\"/reference/be/make-variables\">\"Make\" variable</a> substitution.\nThe value of this attribute is interpreted as a regular expression.\nAny preexisting <code>COPTS</code> that match this regular expression\n(including values explicitly specified in the rule\'s <a\nhref=\"#cc_binary.copts\">copts</a> attribute)\nwill be removed from <code>COPTS</code> for purposes of compiling this rule.\nThis attribute should not be needed or used\noutside of <code>third_party</code>.  The values are not preprocessed\nin any way other than the \"Make\" variable substitution."
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "reexport_deps"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "shard_count"
      default_value: "0"
    }
    param {
      name: "size"
    }
    param {
      name: "stamp"
      doc: "Whether to encode build information into the binary. Possible values:\n<ul>\n<li>\n  <code>stamp = 1</code>: Always stamp the build information into the binary, even in\n  <a href=\"/docs/user-manual#flag--stamp\"><code>--nostamp</code></a> builds. <b>This\n  setting should be avoided</b>, since it potentially kills remote caching for the\n  binary and any downstream actions that depend on it.\n</li>\n<li>\n  <code>stamp = 0</code>: Always replace build information by constant values. This\n  gives good build result caching.\n</li>\n<li>\n  <code>stamp = -1</code>: Embedding of build information is controlled by the\n  <a href=\"/docs/user-manual#flag--stamp\"><code>--[no]stamp</code></a> flag.\n</li>\n</ul>\n<p>Stamped binaries are <em>not</em> rebuilt unless their dependencies change.</p>"
      default_value: "0"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "timeout"
    }
    param {
      name: "toolchains"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
    param {
      name: "win_def_file"
      doc: "The Windows DEF file to be passed to linker.\n<p>This attribute should only be used when Windows is the target platform.\nIt can be used to <a href=\"https://msdn.microsoft.com/en-us/library/d91k01sh.aspx\">\nexport symbols</a> during linking a shared library.</p>"
      is_mandatory: true
    }
  }
  doc: "<p>\nA <code>cc_test()</code> rule compiles a test.  Here, a test\nis a binary wrapper around some testing code.\n</p>\n\n<p><i>By default, C++ tests are dynamically linked.</i><br/>\n    To statically link a unit test, specify\n    <a href=\"/reference/be/c-cpp.html#cc_binary.linkstatic\"><code>linkstatic=True</code></a>.\n    It would probably be good to comment why your test needs\n    <code>linkstatic</code>; this is probably not obvious.</p>\n\n<h4>Implicit output targets</h4>\n<ul>\n<li><code><var>name</var>.stripped</code> (only built if explicitly requested): A stripped\n  version of the binary. <code>strip -g</code> is run on the binary to remove debug\n  symbols.  Additional strip options can be provided on the command line using\n  <code>--stripopt=-foo</code>.</li>\n<li><code><var>name</var>.dwp</code> (only built if explicitly requested): If\n  <a href=\"https://gcc.gnu.org/wiki/DebugFission\">Fission</a> is enabled: a debug\n  information package file suitable for debugging remotely deployed binaries. Else: an\n  empty file.</li>\n</ul>\n\n<p>\nSee the <a href=\"/reference/be/c-cpp.html#cc_binary_args\">cc_binary()</a> arguments, except that\nthe <code>stamp</code> argument is set to 0 by default for tests and\nthat <code>cc_test</code> has extra <a href=\"/reference/be/common-definitions#common-attributes-tests\">\nattributes common to all test rules (*_test)</a>.</p>"
  api_context: BUILD
}
global {
  name: "cc_toolchain"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "all_files"
      doc: "Collection of all cc_toolchain artifacts. These artifacts will be added as inputs to all\nrules_cc related actions (with the exception of actions that are using more precise sets of\nartifacts from attributes below). Bazel assumes that <code>all_files</code> is a superset\nof all other artifact-providing attributes (e.g. linkstamp compilation needs both compile\nand link files, so it takes <code>all_files</code>).\n\n<p>\nThis is what <code>cc_toolchain.files</code> contains, and this is used by all Starlark\nrules using C++ toolchain.</p>"
      is_mandatory: true
    }
    param {
      name: "ar_files"
      doc: "Collection of all cc_toolchain artifacts required for archiving actions."
      is_mandatory: true
    }
    param {
      name: "as_files"
      doc: "Collection of all cc_toolchain artifacts required for assembly actions."
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "compiler_files"
      doc: "Collection of all cc_toolchain artifacts required for compile actions."
      is_mandatory: true
    }
    param {
      name: "compiler_files_without_includes"
      doc: "Collection of all cc_toolchain artifacts required for compile actions in case when\ninput discovery is supported (currently Google-only)."
      is_mandatory: true
    }
    param {
      name: "coverage_files"
      doc: "Collection of all cc_toolchain artifacts required for coverage actions. If not specified,\nall_files are used."
      is_mandatory: true
    }
    param {
      name: "deprecation"
    }
    param {
      name: "dwp_files"
      doc: "Collection of all cc_toolchain artifacts required for dwp actions."
      is_mandatory: true
    }
    param {
      name: "dynamic_runtime_lib"
      doc: "Dynamic library artifact for the C++ runtime library (e.g. libstdc++.so).\n\n<p>This will be used when \'static_link_cpp_runtimes\' feature is enabled, and we\'re linking\ndependencies dynamically.</p>"
      is_mandatory: true
    }
    param {
      name: "exec_compatible_with"
      default_value: "[]"
    }
    param {
      name: "exec_properties"
      default_value: "{}"
    }
    param {
      name: "exec_transition_for_inputs"
      doc: "Deprecated. No-op."
      default_value: "false"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "libc_top"
      doc: "A collection of artifacts for libc passed as inputs to compile/linking actions."
      is_mandatory: true
    }
    param {
      name: "licenses"
      default_value: "[]"
    }
    param {
      name: "linker_files"
      doc: "Collection of all cc_toolchain artifacts required for linking actions."
      is_mandatory: true
    }
    param {
      name: "module_map"
      doc: "Module map artifact to be used for modular builds."
      is_mandatory: true
    }
    param {
      name: "objcopy_files"
      doc: "Collection of all cc_toolchain artifacts required for objcopy actions."
      is_mandatory: true
    }
    param {
      name: "output_licenses"
      default_value: "[]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "static_runtime_lib"
      doc: "Static library artifact for the C++ runtime library (e.g. libstdc++.a).\n\n<p>This will be used when \'static_link_cpp_runtimes\' feature is enabled, and we\'re linking\ndependencies statically.</p>"
      is_mandatory: true
    }
    param {
      name: "strip_files"
      doc: "Collection of all cc_toolchain artifacts required for strip actions."
      is_mandatory: true
    }
    param {
      name: "supports_header_parsing"
      doc: "Set to True when cc_toolchain supports header parsing actions."
      default_value: "false"
    }
    param {
      name: "supports_param_files"
      doc: "Set to True when cc_toolchain supports using param files for linking actions."
      default_value: "false"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "toolchain_config"
      doc: "The label of the rule providing <code>cc_toolchain_config_info</code>."
      is_mandatory: true
    }
    param {
      name: "toolchain_identifier"
      doc: "The identifier used to match this cc_toolchain with the corresponding\ncrosstool_config.toolchain.\n\n<p>\n  Until issue <a href=\"https://github.com/bazelbuild/bazel/issues/5380\">#5380</a> is fixed\n  this is the recommended way of associating <code>cc_toolchain</code> with\n  <code>CROSSTOOL.toolchain</code>. It will be replaced by the <code>toolchain_config</code>\n  attribute (<a href=\"https://github.com/bazelbuild/bazel/issues/5380\">#5380</a>).</p>"
    }
    param {
      name: "toolchains"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  doc: "<p>Represents a C++ toolchain.</p>\n\n<p>\n  This rule is responsible for:\n\n  <ul>\n    <li>\n      Collecting all artifacts needed for C++ actions to run. This is done by\n      attributes such as <code>all_files</code>, <code>compiler_files</code>,\n      <code>linker_files</code>, or other attributes ending with <code>_files</code>). These are\n      most commonly filegroups globbing all required files.\n    </li>\n    <li>\n      Generating correct command lines for C++ actions. This is done using\n      <code>CcToolchainConfigInfo</code> provider (details below).\n    </li>\n  </ul>\n</p>\n<p>\n  Use <code>toolchain_config</code> attribute to configure the C++ toolchain.\n  See also this\n  <a href=\"https://bazel.build/docs/cc-toolchain-config-reference\">\n    page\n  </a> for elaborate C++ toolchain configuration and toolchain selection documentation.\n</p>\n<p>\n  Use <code>tags = [\"manual\"]</code> in order to prevent toolchains from being built and configured\n  unnecessarily when invoking <code>bazel build //...</code>\n</p>"
  api_context: BUILD
}
global {
  name: "cc_toolchain_alias"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "deprecation"
    }
    param {
      name: "exec_compatible_with"
      default_value: "[]"
    }
    param {
      name: "exec_properties"
      default_value: "{}"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "mandatory"
      default_value: "false"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "toolchains"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  api_context: BUILD
}
global {
  name: "cc_toolchain_suite"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
      is_mandatory: true
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\n<p>Deprecated: the rule is a no-op and will be removed.\n"
  api_context: BUILD
}
global {
  name: "config_feature_flag"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "allowed_values"
      is_mandatory: true
    }
    param {
      name: "default_value"
    }
    param {
      name: "deprecation"
    }
    param {
      name: "distribs"
      default_value: "[]"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "licenses"
      default_value: "[none]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "scope"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  api_context: BUILD
}
global {
  name: "config_setting"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "constraint_values"
      doc: "          The minimum set of <code>constraint_values</code> that the target platform must specify\n          in order to match this <code>config_setting</code>. (The execution platform is not\n          considered here.) Any additional constraint values that the platform has are ignored. See\n          <a href=\"https://bazel.build/docs/configurable-attributes#platforms\">\n          Configurable Build Attributes</a> for details.\n\n          <p>If two <code>config_setting</code>s match in the same <code>select</code> and one has\n          all the same flags and <code>constraint_setting</code>s as the other plus additional ones,\n          the one with more settings is chosen. This is known as \"specialization\". For example,\n          a <code>config_setting</code> matching <code>x86</code> and <code>Linux</code> specializes\n          a <code>config_setting</code> matching <code>x86</code>.\n\n          <p>If two <code>config_setting</code>s match and both have <code>constraint_value</code>s\n          not present in the other, this is an error.\n"
      default_value: "[]"
    }
    param {
      name: "define_values"
      doc: "          The same as <a href=\"/reference/be/general.html#config_setting.values\"><code>values</code></a> but\n          specifically for the <code>--define</code> flag.\n\n          <p><code>--define</code> is special because its syntax (<code>--define KEY=VAL</code>)\n            means <code>KEY=VAL</code> is a <i>value</i> from a Bazel flag perspective.\n          </p>\n\n          <p>That means:\n\n          <pre class=\"code\">\n            config_setting(\n                name = \"a_and_b\",\n                values = {\n                    \"define\": \"a=1\",\n                    \"define\": \"b=2\",\n                })\n          </pre>\n\n          <p>doesn\'t work because the same key (<code>define</code>) appears twice in the\n          dictionary. This attribute solves that problem:\n\n          <pre class=\"code\">\n            config_setting(\n                name = \"a_and_b\",\n                define_values = {\n                    \"a\": \"1\",\n                    \"b\": \"2\",\n                })\n          </pre>\n\n          <p>correctly matches <code>bazel build //foo --define a=1 --define b=2</code>.\n\n          <p><code>--define</code> can still appear in\n          <a href=\"/reference/be/general.html#config_setting.values\"><code>values</code></a> with normal flag syntax,\n          and can be mixed freely with this attribute as long as dictionary keys remain distinct.\n"
      default_value: "{}"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "flag_values"
      doc: "          The same as <a href=\"/reference/be/general.html#config_setting.values\"><code>values</code></a> but\n          for <a href=\"https://bazel.build/rules/config#user-defined-build-settings\">\n          user-defined build flags</a>.\n\n          <p>This is a distinct attribute because user-defined flags are referenced as labels while\n          built-in flags are referenced as arbitrary strings.\n\n"
      default_value: "{}"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "values"
      doc: "          The set of configuration values that match this rule (expressed as build flags)\n\n          <p>This rule inherits the configuration of the configured target that\n            references it in a <code>select</code> statement. It is considered to\n            \"match\" a Bazel invocation if, for every entry in the dictionary, its\n            configuration matches the entry\'s expected value. For example\n            <code>values = {\"compilation_mode\": \"opt\"}</code> matches the invocations\n            <code>bazel build --compilation_mode=opt ...</code> and\n            <code>bazel build -c opt ...</code> on target-configured rules.\n          </p>\n\n          <p>For convenience\'s sake, configuration values are specified as build flags (without\n            the preceding <code>\"--\"</code>). But keep in mind that the two are not the same. This\n            is because targets can be built in multiple configurations within the same\n            build. For example, an exec configuration\'s \"cpu\" matches the value of\n            <code>--host_cpu</code>, not <code>--cpu</code>. So different instances of the\n            same <code>config_setting</code> may match the same invocation differently\n            depending on the configuration of the rule using them.\n          </p>\n\n          <p>If a flag is not explicitly set at the command line, its default value is used.\n             If a key appears multiple times in the dictionary, only the last instance is used.\n             If a key references a flag that can be set multiple times on the command line (e.g.\n             <code>bazel build --copt=foo --copt=bar --copt=baz ...</code>), a match occurs if\n             <i>any</i> of those settings match.\n          <p>\n"
      default_value: "{}"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\n  <p>\n    Matches an expected configuration state (expressed as build flags or platform constraints) for\n    the purpose of triggering configurable attributes. See <a href=\"/reference/be/functions.html#select\">select</a> for\n    how to consume this rule and <a href=\"/reference/be/common-definitions#configurable-attributes\">\n    Configurable attributes</a> for an overview of the general feature.\n\n  <h4 id=\"config_setting_examples\">Examples</h4>\n\n  <p>The following matches any build that sets <code>--compilation_mode=opt</code> or\n  <code>-c opt</code> (either explicitly at the command line or implicitly from .bazelrc files):\n  </p>\n\n  <pre class=\"code\">\n  config_setting(\n      name = \"simple\",\n      values = {\"compilation_mode\": \"opt\"}\n  )\n  </pre>\n\n  <p>The following matches any build that targets ARM and applies the custom define\n  <code>FOO=bar</code> (for instance, <code>bazel build --cpu=arm --define FOO=bar ...</code>):\n  </p>\n\n  <pre class=\"code\">\n  config_setting(\n      name = \"two_conditions\",\n      values = {\n          \"cpu\": \"arm\",\n          \"define\": \"FOO=bar\"\n      }\n  )\n  </pre>\n\n  <p>The following matches any build that sets\n     <a href=\"https://bazel.build/rules/config#user-defined-build-settings\">user-defined flag</a>\n     <code>--//custom_flags:foo=1</code> (either explicitly at the command line or implicitly from\n     .bazelrc files):\n  </p>\n\n  <pre class=\"code\">\n  config_setting(\n      name = \"my_custom_flag_is_set\",\n      flag_values = { \"//custom_flags:foo\": \"1\" },\n  )\n  </pre>\n\n  <p>The following matches any build that targets a platform with an x86_64 architecture and glibc\n     version 2.25, assuming the existence of a <code>constraint_value</code> with label\n     <code>//example:glibc_2_25</code>. Note that a platform still matches if it defines additional\n     constraint values beyond these two.\n  </p>\n\n  <pre class=\"code\">\n  config_setting(\n      name = \"64bit_glibc_2_25\",\n      constraint_values = [\n          \"@platforms//cpu:x86_64\",\n          \"//example:glibc_2_25\",\n      ]\n  )\n  </pre>\n\n  In all these cases, it\'s possible for the configuration to change within the build, for example if\n  a target needs to be built for a different platform than its dep. This means that even when a\n  <code>config_setting</code> doesn\'t match the top-level command-line flags, it may still match\n  some build targets.\n\n  <h4 id=\"config_setting_notes\">Notes</h4>\n  <ul>\n    <li>See <a href=\"/reference/be/functions.html#select\">select</a> for what happens when multiple\n       <code>config_setting</code>s match the current configuration state.\n    </li>\n\n    <li>For flags that support shorthand forms (e.g. <code>--compilation_mode</code> vs.\n      <code>-c</code>), <code>values</code> definitions must use the full form. These automatically\n      match invocations using either form.\n    </li>\n\n    <li>\n      If a flag takes multiple values (like <code>--copt=-Da --copt=-Db</code> or a list-typed\n      <a href=\"https://bazel.build/rules/config#user-defined-build-settings\">\n      Starlark flag</a>), <code>values = { \"flag\": \"a\" }</code> matches if <code>\"a\"</code> is\n      present <i>anywhere</i> in the actual list.\n\n      <p>\n        <code>values = { \"myflag\": \"a,b\" }</code> works the same way: this matches\n        <code>--myflag=a --myflag=b</code>, <code>--myflag=a --myflag=b --myflag=c</code>,\n        <code>--myflag=a,b</code>, and <code>--myflag=c,b,a</code>. Exact semantics vary between\n        flags. For example, <code>--copt</code> doesn\'t support multiple values <i>in the same\n        instance</i>: <code>--copt=a,b</code> produces <code>[\"a,b\"]</code> while <code>--copt=a\n        --copt=b</code> produces <code>[\"a\", \"b\"]</code> (so <code>values = { \"copt\": \"a,b\" }</code>\n        matches the former but not the latter). But <code>--ios_multi_cpus</code> (for Apple rules)\n        <i>does</i>: <code>-ios_multi_cpus=a,b</code> and <code>ios_multi_cpus=a --ios_multi_cpus=b\n        </code> both produce <code>[\"a\", \"b\"]</code>. Check flag definitions and test your\n        conditions carefully to verify exact expectations.\n      </p>\n    </li>\n\n    <li>If you need to define conditions that aren\'t modeled by built-in build flags, use\n      <a href=\"https://bazel.build/rules/config#user-defined-build-settings\">\n      Starlark-defined flags</a>. You can also use <code>--define</code>, but this offers weaker\n      support and is not recommended. See\n      <a href=\"/reference/be/common-definitions#configurable-attributes\">here</a> for more discussion.\n    </li>\n\n    <li>Avoid repeating identical <code>config_setting</code> definitions in different packages.\n      Instead, reference a common <code>config_setting</code> that defined in a canonical package.\n    </li>\n\n    <li><a href=\"general.html#config_setting.values\"><code>values</code></a>,\n       <a href=\"general.html#config_setting.define_values\"><code>define_values</code></a>, and\n       <a href=\"general.html#config_setting.constraint_values\"><code>constraint_values</code></a>\n       can be used in any combination in the same <code>config_setting</code> but at least one must\n       be set for any given <code>config_setting</code>.\n    </li>\n  </ul>\n"
  api_context: BUILD
}
global {
  name: "constraint_setting"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "default_constraint_value"
      doc: "        The label of the default value for this setting, to be used if no value is given. If this\n        attribute is present, the <code>constraint_value</code> it points to must be defined in the\n        same package as this <code>constraint_setting</code>.\n\n        <p>If a constraint setting has a default value, then whenever a platform does not include\n        any constraint value for that setting, it is the same as if the platform had specified the\n        default value. Otherwise, if there is no default value, the constraint setting is considered\n        to be unspecified by that platform. In that case, the platform would not match against any\n        constraint list (such as for a <code>config_setting</code>) that requires a particular value\n        for that setting.\n"
      is_mandatory: true
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\n<p>This rule is used to introduce a new constraint type for which a platform may specify a value.\nFor instance, you might define a <code>constraint_setting</code> named \"glibc_version\" to represent\nthe capability for platforms to have different versions of the glibc library installed.\n\nFor more details, see the\n<a href=\"https://bazel.build/docs/platforms\">Platforms</a> page.\n\n<p>Each <code>constraint_setting</code> has an extensible set of associated\n<code>constraint_value</code>s. Usually these are defined in the same package, but sometimes a\ndifferent package will introduce new values for an existing setting. For instance, the predefined\nsetting <code>@platforms//cpu:cpu</code> can be extended with a custom value in order to\ndefine a platform targeting an obscure cpu architecture.\n\n"
  api_context: BUILD
}
global {
  name: "constraint_value"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "constraint_setting"
      doc: "        The <code>constraint_setting</code> for which this <code>constraint_value</code> is a\n        possible choice.\n"
      is_mandatory: true
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\nThis rule introduces a new value for a given constraint type.\n\nFor more details, see the\n<a href=\"https://bazel.build/docs/platforms\">Platforms</a> page.\n\n<h4 id=\"constraint_value_examples\">Example</h4>\n<p>The following creates a new possible value for the predefined <code>constraint_value</code>\nrepresenting cpu architecture.\n<pre class=\"code\">\nconstraint_value(\n    name = \"mips\",\n    constraint_setting = \"@platforms//cpu:cpu\",\n)\n</pre>\n\nPlatforms can then declare that they have the <code>mips</code> architecture as an alternative to\n<code>x86_64</code>, <code>arm</code>, and so on.\n\n"
  api_context: BUILD
}
global {
  name: "depset"
  callable {
    param {
      name: "direct"
      doc: "A list of <i>direct</i> elements of a depset. "
      default_value: "None"
    }
    param {
      name: "order"
      doc: "The traversal strategy for the new depset. See <a href=\"../builtins/depset.html\">here</a> for the possible values."
      default_value: "\"default\""
    }
    param {
      name: "transitive"
      doc: "A list of depsets whose elements will become indirect elements of the depset."
      default_value: "None"
    }
  }
  doc: "Creates a <a href=\"../builtins/depset.html\">depset</a>. The <code>direct</code> parameter is a list of direct elements of the depset, and <code>transitive</code> parameter is a list of depsets whose elements become indirect elements of the created depset. The order in which elements are returned when the depset is converted to a list is specified by the <code>order</code> parameter. See the <a href=\"https://bazel.build/extending/depsets\">Depsets overview</a> for more information.\n<p>All elements (direct and indirect) of a depset must be of the same type, as obtained by the expression <code>type(x)</code>.\n<p>Because a hash-based set is used to eliminate duplicates during iteration, all elements of a depset should be hashable. However, this invariant is not currently checked consistently in all constructors. Use the --incompatible_always_check_depset_elements flag to enable consistent checking; this will be the default behavior in future releases;  see <a href=\'https://github.com/bazelbuild/bazel/issues/10313\'>Issue 10313</a>.\n<p>In addition, elements must currently be immutable, though this restriction will be relaxed in future.\n<p> The order of the created depset should be <i>compatible</i> with the order of its <code>transitive</code> depsets. <code>\"default\"</code> order is compatible with any other order, all other orders are only compatible with themselves."
  api_context: BUILD
}
global {
  name: "environment"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deprecation"
    }
    param {
      name: "distribs"
      default_value: "[]"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "fulfills"
      default_value: "[]"
    }
    param {
      name: "licenses"
      default_value: "[none]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  api_context: BUILD
}
global {
  name: "environment_group"
  callable {
    param {
      name: "name"
      doc: "The name of the rule."
      is_mandatory: true
    }
    param {
      name: "environments"
      doc: "A list of Labels for the environments to be grouped, from the same package."
      is_mandatory: true
    }
    param {
      name: "defaults"
      doc: "A list of Labels."
      is_mandatory: true
    }
  }
  doc: "Defines a set of related environments that can be tagged onto rules to preventincompatible rules from depending on each other."
  api_context: BUILD
}
global {
  name: "existing_rule"
  callable {
    param {
      name: "name"
      doc: "The name of the target."
      is_mandatory: true
    }
  }
  doc: "Returns an immutable dict-like object that describes the attributes of a rule instantiated in this thread\'s package, or <code>None</code> if no rule instance of that name exists.<p>Here, an <em>immutable dict-like object</em> means a deeply immutable object <code>x</code> supporting dict-like iteration, <code>len(x)</code>, <code>name in x</code>, <code>x[name]</code>, <code>x.get(name)</code>, <code>x.items()</code>, <code>x.keys()</code>, and <code>x.values()</code>.<p>The result contains an entry for each attribute, with the exception of private ones (whose names do not start with a letter) and a few unrepresentable legacy attribute types. In addition, the dict contains entries for the rule instance\'s <code>name</code> and <code>kind</code> (for example, <code>\'cc_binary\'</code>).<p>The values of the result represent attribute values as follows:<ul><li>Attributes of type str, int, and bool are represented as is.</li><li>Labels are converted to strings of the form <code>\':foo\'</code> for targets in the same package or <code>\'//pkg:name\'</code> for targets in a different package.</li><li>Lists are represented as tuples, and dicts are converted to new, mutable dicts. Their elements are recursively converted in the same fashion.</li><li><code>select</code> values are returned with their contents transformed as described above.</li><li>Attributes for which no value was specified during rule instantiation and whose default value is computed are excluded from the result. (Computed defaults cannot be computed until the analysis phase.).</li></ul><p>If possible, use this function only in <a href=\"https://bazel.build/extending/macros#finalizers\">implementation functions of rule finalizer symbolic macros</a>. Use of this function in other contexts is not recommened, and will be disabled in a future Bazel release; it makes <code>BUILD</code> files brittle and order-dependent. Also, beware that it differs subtly from the two other conversions of rule attribute values from internal form to Starlark: one used by computed defaults, the other used by <code>ctx.attr.foo</code>."
  api_context: BUILD
}
global {
  name: "existing_rules"
  callable {
  }
  doc: "Returns an immutable dict-like object describing the rules so far instantiated in this thread\'s package. Each entry of the dict-like object maps the name of the rule instance to the result that would be returned by <code>existing_rule(name)</code>.<p>Here, an <em>immutable dict-like object</em> means a deeply immutable object <code>x</code> supporting dict-like iteration, <code>len(x)</code>, <code>name in x</code>, <code>x[name]</code>, <code>x.get(name)</code>, <code>x.items()</code>, <code>x.keys()</code>, and <code>x.values()</code>.<p>If possible, use this function only in <a href=\"https://bazel.build/extending/macros#finalizers\">implementation functions of rule finalizer symbolic macros</a>. Use of this function in other contexts is not recommened, and will be disabled in a future Bazel release; it makes <code>BUILD</code> files brittle and order-dependent."
  api_context: BUILD
}
global {
  name: "exports_files"
  callable {
    param {
      name: "srcs"
      doc: "The list of files to export."
      is_mandatory: true
    }
    param {
      name: "visibility"
      doc: "A visibility declaration can to be specified. The files will be visible to the targets specified. If no visibility is specified, the files will be visible to every package."
      default_value: "None"
    }
    param {
      name: "licenses"
      doc: "Licenses to be specified."
      default_value: "None"
    }
  }
  doc: "Specifies a list of files belonging to this package that are exported to other packages."
  api_context: BUILD
}
global {
  name: "extra_action"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "data"
      doc: "<a name=\"common.data\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nFiles needed by this rule at runtime. May list file or rule targets. Generally\nallows any target.\n</p>\n\n<p>\nThe default outputs and runfiles of targets in the <code>data</code> attribute\nshould appear in the <code>*.runfiles</code> area of any executable which is\noutput by or has a runtime dependency on this target. This may include data\nfiles or binaries used when this target\'s\n<a href=\"#typical.srcs\"><code>srcs</code></a> are executed. See the\n<a href=\"/concepts/dependencies#data-dependencies\">data dependencies</a>\nsection for more information about how to depend on and use data files.\n</p>\n\n<p>\nNew rules should define a <code>data</code> attribute if they process\ninputs which might use other inputs at runtime. Rules\' implementation functions\nmust also <a href=\"https://bazel.build/rules/rules#runfiles\">populate the target\'s\nrunfiles</a> from the outputs and runfiles of any <code>data</code> attribute,\nas well as runfiles from any dependency attribute which provides either\nsource code or runtime dependencies.\n</p>\n"
    }
    param {
      name: "cmd"
      doc: "        The command to run.\n        <p>\n          Like <a href=\"/reference/be/general.html#genrule.cmd\">genrule cmd attribute</a> with the following\n          differences:\n        </p>\n        <ol>\n          <li>\n            <p>\n              No heuristic label expansion. Only labels using $(location ...) are expanded.\n            </p>\n          </li>\n          <li>\n            <p>\n              An additional pass is applied to the string to replace all\n              occurrences of the outputs created from the <code>out_templates</code>\n              attribute. All occurrences of <code>$(output <i>out_template</i>)</code>\n              are replaced with the path to the file denoted by <code>label</code>.\n            </p>\n            <p>\n              E.g. out_template <code>$(ACTION_ID).analysis</code>\n              can be matched with <code>$(output $(ACTION_ID).analysis)</code>.\n            </p>\n            <p>\n              In effect, this is the same substitution as <code>$(location)</code>\n              but with a different scope.\n            </p>\n          </li>\n        </ol>\n"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "out_templates"
      doc: "        A list of templates for files generated by the <code>extra_action</code> command.\n        <p>\n          The template can use the following variables:\n          <ul>\n            <li>\n              $(ACTION_ID), an id uniquely identifying this <code>extra_action</code>.\n              Used to generate a unique output file.\n            </li>\n          </ul>\n        </p>\n"
      default_value: "[]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "requires_action_output"
      doc: "        Indicates this <code>extra_action</code> requires the output of the\n        original action to be present as input to this <code>extra_action</code>.\n        <p>\n          When true (default false), the extra_action can assume that the\n          original action outputs are available as part of its inputs.\n        </p>\n"
      default_value: "false"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "tools"
      doc: "        A list of <code>tool</code> dependencies for this rule.\n        <p>\n          See the definition of <a href=\"/concepts/build-ref#deps\">dependencies</a> for more\n          information.\n        </p>\n        <p>\n          The build system ensures these prerequisites are built before running the\n          <code>extra_action</code> command; they are built using the\n          <a href=\'/docs/user-manual#configurations\'><code>exec</code>configuration</a>,\n          since they must run as a tool during the build itself. The path of an individual\n          <code>tools</code> target <code>//x:y</code> can be obtained using\n          <code>$(location //x:y)</code>.\n        </p>\n        <p>\n          All tools and their data dependencies are consolidated into a single tree\n          within which the command can use relative paths. The working directory will\n          be the root of that unified tree.\n        </p>\n"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\n<p>\n  <b>WARNING:</b> Extra actions are deprecated. Use\n  <a href=\"https://bazel.build/rules/aspects\">aspects</a>\n  instead.\n</p>\n\n<p>\n  An <code>extra_action</code> rule doesn\'t produce any meaningful output\n  when specified as a regular build target. Instead, it allows tool developers\n  to insert additional actions into the build graph that shadow existing actions.\n</p>\n\n<p>\n  See <a href=\"/reference/be/extra-actions.html#action_listener\"><code>action_listener</code></a> for details\n  on how to enable <code>extra_action</code>s.\n</p>\n\n<p>\n  The <code>extra_action</code>s run as a command-line. The command-line tool gets\n  access to a file containing a protocol buffer as $(EXTRA_ACTION_FILE)\n  with detailed information on the original action it is shadowing.\n  It also has access to all the input files the original action has access to.\n  See <tt>extra_actions_base.proto</tt>\n  for details on the data stored inside the protocol buffer. Each proto file\n  contains an ExtraActionInfo message.\n</p>\n\n<p>\n  Just like all other actions, extra actions are sandboxed, and should be designed to handle that.\n</p>\n\n"
  api_context: BUILD
}
global {
  name: "fdo_prefetch_hints"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "deprecation"
    }
    param {
      name: "exec_compatible_with"
      default_value: "[]"
    }
    param {
      name: "exec_properties"
      default_value: "{}"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "profile"
      doc: "Label of the hints profile. The hints file has the .afdo extension\nThe label can also point to an fdo_absolute_path_profile rule."
      is_mandatory: true
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "toolchains"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  doc: "<p>Represents an FDO prefetch hints profile that is either in the workspace.\nExamples:</p>\n\n<pre><code class=\"lang-starlark\">\nfdo_prefetch_hints(\n    name = \"hints\",\n    profile = \"//path/to/hints:profile.afdo\",\n)\n</code></pre>"
  api_context: BUILD
}
global {
  name: "fdo_profile"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "deprecation"
    }
    param {
      name: "exec_compatible_with"
      default_value: "[]"
    }
    param {
      name: "exec_properties"
      default_value: "{}"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "memprof_profile"
      doc: "Label of the MemProf profile. The profile is expected to have\neither a .profdata extension (for an indexed/symbolized memprof\nprofile), or a .zip extension for a zipfile containing a memprof.profdata\nfile."
      is_mandatory: true
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "profile"
      doc: "Label of the FDO profile or a rule which generates it. The FDO file can have one of the\nfollowing extensions: .profraw for unindexed LLVM profile, .profdata for indexed LLVM\nprofile, .zip that holds an LLVM profraw profile, .afdo for AutoFDO profile, .xfdo for\nXBinary profile. The label can also point to an fdo_absolute_path_profile rule."
      is_mandatory: true
    }
    param {
      name: "proto_profile"
      doc: "Label of the protobuf profile."
      is_mandatory: true
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "toolchains"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  doc: "<p>Represents an FDO profile that is in the workspace.\nExample:</p>\n\n<pre><code class=\"lang-starlark\">\nfdo_profile(\n    name = \"fdo\",\n    profile = \"//path/to/fdo:profile.zip\",\n)\n</code></pre>"
  api_context: BUILD
}
global {
  name: "filegroup"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "srcs"
      doc: "        The list of targets that are members of the file group.\n        <p>\n          It is common to use the result of a <a href=\"/reference/be/functions.html#glob\">glob</a> expression for\n          the value of the <code>srcs</code> attribute.\n        </p>\n"
      default_value: "[]"
    }
    param {
      name: "data"
      doc: "        The list of files needed by this rule at runtime.\n        <p>\n          Targets named in the <code>data</code> attribute will be added to the\n          <code>runfiles</code> of this <code>filegroup</code> rule. When the\n          <code>filegroup</code> is referenced in the <code>data</code> attribute of\n          another rule its <code>runfiles</code> will be added to the <code>runfiles</code>\n          of the depending rule. See the <a href=\"/concepts/dependencies#data-dependencies\">data dependencies</a>\n          section and <a href=\"/reference/be/common-definitions#common.data\">general documentation of\n          <code>data</code></a> for more information about how to depend on and use data files.\n        </p>\n"
      default_value: "[]"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "output_group"
      doc: "        The output group from which to gather artifacts from sources.  If this attribute is\n        specified, artifacts from the specified output group of the dependencies will be exported\n        instead of the default output group.\n        <p>An \"output group\" is a category of output artifacts of a target, specified in that\n          rule\'s implementation.\n        </p>\n"
    }
    param {
      name: "output_licenses"
      default_value: "[none]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "<p>\n  Use <code>filegroup</code> to gather the outputs of a set of targets under a single\n  label.\n</p>\n\n<p>\n  <code>filegroup</code> is not a substitute for listing targets on the command line or\n  in an attribute of another rule, because targets have many properties other than their\n  outputs, which are not collected in the same way. However, it\'s still useful in quite\n  a few cases, for example, in the <code>srcs</code> attribute of a genrule, or\n  the <code>data</code> attribute of a *_binary rule.\n</p>\n\n<p>\n  Using <code>filegroup</code> is encouraged instead of referencing directories directly.\n  Directly referencing directories is discouraged because the build system does not have\n  full knowledge of all files below the directory, so it may not rebuild when these files change.\n  When combined with <a href=\"/reference/be/functions.html#glob\">glob</a>, <code>filegroup</code> can ensure that all\n  files are explicitly known to the build system.\n</p>\n\n<h4 id=\"filegroup_example\">Examples</h4>\n\n<p>\n  To create a <code>filegroup</code> consisting of two source files, do\n</p>\n<pre class=\"code\">\nfilegroup(\n    name = \"mygroup\",\n    srcs = [\n        \"a_file.txt\",\n        \"//a/library:target\",\n        \"//a/binary:target\",\n    ],\n)\n</pre>\n<p>\n  Or, use a <code>glob</code> to fully crawl a testdata directory:\n</p>\n<pre class=\"code\">\nfilegroup(\n    name = \"exported_testdata\",\n    srcs = glob([\n        \"testdata/*.dat\",\n        \"testdata/logs/**&#47;*.log\",\n    ]),\n)\n</pre>\n<p>\n  To make use of these definitions, reference the <code>filegroup</code> with a label from any rule:\n</p>\n<pre class=\"code\">\ncc_library(\n    name = \"my_library\",\n    srcs = [\"foo.cc\"],\n    data = [\n        \"//my_package:exported_testdata\",\n        \"//my_package:mygroup\",\n    ],\n)\n</pre>\n\n"
  api_context: BUILD
}
global {
  name: "genquery"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deps"
      doc: "<a name=\"common.deps\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nDependencies for this target. Generally should only list rule targets. (Though\nsome rules permit files to be listed directly in <code>deps</code>, this\nshould be avoided when possible.)\n</p>\n\n<p>\nLanguage-specific rules generally limit the listed targets to those with\nspecific <a href=\"https://bazel.build/extending/rules#providers\">providers</a>.</p>\n\n<p>\nThe precise semantics of what it means for a target to depend on another using\n<code>deps</code> are specific to the kind of rule, and the rule-specific\ndocumentation goes into more detail. For rules which process source code,\n<code>deps</code> generally specifies code dependencies used by the code in\n<a href=\"#typical.srcs\"><code>srcs</code></a>.\n</p>\n\n<p>\nMost often, a <code>deps</code> dependency is used to allow one module to use\nsymbols defined in another module written in the same programming language and\nseparately compiled.  Cross-language dependencies are also permitted in many\ncases: For example, a <code>java_library</code> target may depend on C++ code\nin a <code>cc_library</code> target, by listing the latter in the\n<code>deps</code> attribute.  See the definition of\n<a href=\"/concepts/build-ref#deps\">dependencies</a>\nfor more information.\n</p>\n"
    }
    param {
      name: "data"
      doc: "<a name=\"common.data\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nFiles needed by this rule at runtime. May list file or rule targets. Generally\nallows any target.\n</p>\n\n<p>\nThe default outputs and runfiles of targets in the <code>data</code> attribute\nshould appear in the <code>*.runfiles</code> area of any executable which is\noutput by or has a runtime dependency on this target. This may include data\nfiles or binaries used when this target\'s\n<a href=\"#typical.srcs\"><code>srcs</code></a> are executed. See the\n<a href=\"/concepts/dependencies#data-dependencies\">data dependencies</a>\nsection for more information about how to depend on and use data files.\n</p>\n\n<p>\nNew rules should define a <code>data</code> attribute if they process\ninputs which might use other inputs at runtime. Rules\' implementation functions\nmust also <a href=\"https://bazel.build/rules/rules#runfiles\">populate the target\'s\nrunfiles</a> from the outputs and runfiles of any <code>data</code> attribute,\nas well as runfiles from any dependency attribute which provides either\nsource code or runtime dependencies.\n</p>\n"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "compressed_output"
      doc: "        If <code>True</code>, query output is written in GZIP file format. This setting can be used\n        to avoid spikes in Bazel\'s memory use when the query output is expected to be large. Bazel\n        already internally compresses query outputs greater than 2<sup>20</sup> bytes regardless of\n        the value of this setting, so setting this to <code>True</code> may not reduce retained\n        heap. However, it allows Bazel to skip <em>decompression</em> when writing the output file,\n        which can be memory-intensive.\n"
      default_value: "false"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "expression"
      doc: "        The query to be executed. In contrast to the command line and other places in BUILD files,\n        labels here are resolved relative to the root directory of the workspace. For example, the\n        label <code>:b</code> in this attribute in the file <code>a/BUILD</code> will refer to the\n        target <code>//:b</code>.\n"
      is_mandatory: true
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "opts"
      doc: "        The options that are passed to the query engine. These correspond to the command line\n        options that can be passed to <code>bazel query</code>. Some query options are not allowed\n        here: <code>--keep_going</code>, <code>--query_file</code>, <code>--universe_scope</code>,\n        <code>--order_results</code> and <code>--order_output</code>. Options not specified here\n        will have their default values just like on the command line of <code>bazel query</code>.\n"
      default_value: "[]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "scope"
      doc: "        The scope of the query. The query is not allowed to touch targets outside the transitive\n        closure of these targets.\n"
      is_mandatory: true
    }
    param {
      name: "strict"
      doc: "        If true, targets whose queries escape the transitive closure of their scopes will fail to\n        build. If false, Bazel will print a warning and skip whatever query path led it outside of\n        the scope, while completing the rest of the query.\n"
      default_value: "false"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\n  <p>\n  <code>genquery()</code> runs a query specified in the\n    <a href=\"/reference/query\">Bazel query language</a> and dumps the result\n    into a file.\n  </p>\n  <p>\n    In order to keep the build consistent, the query is allowed only to visit\n    the transitive closure of the targets specified in the <code>scope</code>\n    attribute. Queries violating this rule will fail during execution if\n    <code>strict</code> is unspecified or true (if <code>strict</code> is false,\n    the out of scope targets will simply be skipped with a warning). The\n    easiest way to make sure this does not happen is to mention the same labels\n    in the scope as in the query expression.\n  </p>\n  <p>\n    The only difference between the queries allowed here and on the command\n    line is that queries containing wildcard target specifications (e.g.\n    <code>//pkg:*</code> or <code>//pkg:all</code>) are not allowed here.\n    The reasons for this are two-fold: first, because <code>genquery</code> has\n    to specify a scope to prevent targets outside the transitive closure of the\n    query to influence its output; and, second, because <code>BUILD</code> files\n    do not support wildcard dependencies (e.g. <code>deps=[\"//a/...\"]</code>\n    is not allowed).\n  </p>\n  <p>\n    The genquery\'s output is ordered lexicographically in order to enforce deterministic output,\n    with the exception of <code>--output=graph|minrank|maxrank</code> or when <code>somepath</code>\n    is used as the top-level function.\n  <p>\n    The name of the output file is the name of the rule.\n  </p>\n\n<h4 id=\"genquery_examples\">Examples</h4>\n  <p>\n    This example writes the list of the labels in the transitive closure of the\n    specified target to a file.\n  </p>\n\n<pre class=\"code\">\ngenquery(\n    name = \"kiwi-deps\",\n    expression = \"deps(//kiwi:kiwi_lib)\",\n    scope = [\"//kiwi:kiwi_lib\"],\n)\n</pre>\n\n"
  api_context: BUILD
}
global {
  name: "genrule"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "srcs"
      doc: "        A list of inputs for this rule, such as source files to process.\n        <p>\n          <em>This attributes is not suitable to list tools executed by the <code>cmd</code>; use\n          the <a href=\"/reference/be/general.html#genrule.tools\"><code>tools</code></a> attribute for them instead.\n          </em>\n        </p>\n        <p>\n          The build system ensures these prerequisites are built before running the genrule\n          command; they are built using the same configuration as the original build request. The\n          names of the files of these prerequisites are available to the command as a\n          space-separated list in <code>$(SRCS)</code>; alternatively the path of an individual\n          <code>srcs</code> target <code>//x:y</code> can be obtained using <code>$(location\n          //x:y)</code>, or using <code>$&lt;</code> provided it\'s the only entry in\n          <code>srcs</code>.\n        </p>\n"
      default_value: "[]"
    }
    param {
      name: "outs"
      doc: "        A list of files generated by this rule.\n        <p>\n          Output files must not cross package boundaries.\n          Output filenames are interpreted as relative to the package.\n        </p>\n        <p>\n          If the <code>executable</code> flag is set, <code>outs</code> must contain exactly one\n          label.\n        </p>\n        <p>\n          The genrule command is expected to create each output file at a predetermined location.\n          The location is available in <code>cmd</code> using <a\n          href=\"/reference/be/make-variables#predefined_genrule_variables\">genrule-specific \"Make\"\n          variables</a> (<code>$@</code>, <code>$(OUTS)</code>, <code>$(@D)</code> or <code>\n          $(RULEDIR)</code>) or using <a href=\"/reference/be/make-variables#predefined_label_variables\">\n          <code>$(location)</code></a> substitution.\n        </p>\n"
      is_mandatory: true
    }
    param {
      name: "cmd"
      doc: "        The command to run.\n        Subject to <a href=\"/reference/be/make-variables#predefined_label_variables\"><code>$(location)\n        </code></a> and <a href=\"/reference/be/make-variables\">\"Make\" variable</a> substitution.\n        <ol>\n          <li>\n            First <a href=\"/reference/be/make-variables#predefined_label_variables\"><code>$(location)\n            </code></a> substitution is applied, replacing all occurrences of <code>$(location <i>\n            label</i>)</code> and of <code>$(locations <i>label</i>)</code> (and similar\n            constructions using related variables <code>execpath</code>, <code>execpaths</code>,\n            <code>rootpath</code> and <code>rootpaths</code>).\n          </li>\n          <li>\n            Next, <a href=\"/reference/be/make-variables\">\"Make\" variables</a> are expanded. Note that\n            predefined variables <code>$(JAVA)</code>, <code>$(JAVAC)</code> and\n            <code>$(JAVABASE)</code> expand under the <i>exec</i> configuration, so Java invocations\n            that run as part of a build step can correctly load shared libraries and other\n            dependencies.\n          </li>\n          <li>\n            Finally, the resulting command is executed using the Bash shell. If its exit code is\n            non-zero the command is considered to have failed.\n          </li>\n        </ol>\n        This is the fallback of <code>cmd_bash</code>, <code>cmd_ps</code> and <code>cmd_bat</code>,\n        if none of them are applicable.\n        </p>\n        <p>\n        If the command line length exceeds the platform limit (64K on Linux/macOS, 8K on Windows),\n        then genrule will write the command to a script and execute that script to work around. This\n        applies to all cmd attributes (<code>cmd</code>, <code>cmd_bash</code>, <code>cmd_ps</code>,\n        <code>cmd_bat</code>).\n        </p>\n"
    }
    param {
      name: "cmd_bash"
      doc: "        The Bash command to run.\n        <p> This attribute has higher priority than <code>cmd</code>. The command is expanded and\n            runs in the exact same way as the <code>cmd</code> attribute.\n        </p>\n"
    }
    param {
      name: "cmd_bat"
      doc: "        The Batch command to run on Windows.\n        <p> This attribute has higher priority than <code>cmd</code> and <code>cmd_bash</code>.\n            The command runs in the similar way as the <code>cmd</code> attribute, with the\n            following differences:\n        </p>\n        <ul>\n          <li>\n            This attribute only applies on Windows.\n          </li>\n          <li>\n            The command runs with <code>cmd.exe /c</code> with the following default arguments:\n            <ul>\n              <li>\n                <code>/S</code> - strip first and last quotes and execute everything else as is.\n              </li>\n              <li>\n                <code>/E:ON</code> - enable extended command set.\n              </li>\n              <li>\n                <code>/V:ON</code> - enable delayed variable expansion\n              </li>\n              <li>\n                <code>/D</code> - ignore AutoRun registry entries.\n              </li>\n            </ul>\n          </li>\n          <li>\n            After <a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n            <a href=\"/reference/be/make-variables\">\"Make\" variable</a> substitution, the paths will be\n            expanded to Windows style paths (with backslash).\n          </li>\n        </ul>\n"
    }
    param {
      name: "cmd_ps"
      doc: "        The Powershell command to run on Windows.\n        <p> This attribute has higher priority than <code>cmd</code>, <code>cmd_bash</code> and\n            <code>cmd_bat</code>. The command runs in the similar way as the <code>cmd</code>\n            attribute, with the following differences:\n        </p>\n        <ul>\n          <li>\n            This attribute only applies on Windows.\n          </li>\n          <li>\n            The command runs with <code>powershell.exe /c</code>.\n          </li>\n        </ul>\n        <p> To make Powershell easier to use and less error-prone, we run the following\n            commands to set up the environment before executing Powershell command in genrule.\n        </p>\n        <ul>\n          <li>\n            <code>Set-ExecutionPolicy -Scope CurrentUser RemoteSigned</code> - allow running\n            unsigned scripts.\n          </li>\n          <li>\n            <code>$errorActionPreference=\'Stop\'</code> - In case there are multiple commands\n            separated by <code>;</code>, the action exits immediately if a Powershell CmdLet fails,\n            but this does <strong>NOT</strong> work for external command.\n          </li>\n          <li>\n            <code>$PSDefaultParameterValues[\'*:Encoding\'] = \'utf8\'</code> - change the default\n            encoding from utf-16 to utf-8.\n          </li>\n        </ul>\n"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "executable"
      doc: "        Declare output to be executable.\n        <p>\n          Setting this flag to True means the output is an executable file and can be run using the\n          <code>run</code> command. The genrule must produce exactly one output in this case.\n          If this attribute is set, <code>run</code> will try executing the file regardless of\n          its content.\n        </p>\n        <p>Declaring data dependencies for the generated executable is not supported.</p>\n"
      default_value: "false"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "heuristic_label_expansion"
      default_value: "false"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "local"
      doc: "        <p>\n          If set to True, this option forces this <code>genrule</code> to run using the \"local\"\n          strategy, which means no remote execution, no sandboxing, no persistent workers.\n        </p>\n        <p>\n          This is equivalent to providing \'local\' as a tag (<code>tags=[\"local\"]</code>).\n        </p>\n"
      default_value: "false"
    }
    param {
      name: "message"
      doc: "        A progress message.\n        <p>\n          A progress message that will be printed as this build step is executed. By default, the\n          message is \"Generating <i>output</i>\" (or something equally bland) but you may provide a\n          more specific one. Use this attribute instead of <code>echo</code> or other print\n          statements in your <code>cmd</code> command, as this allows the build tool to control\n          whether such progress messages are printed or not.\n        </p>\n"
    }
    param {
      name: "output_licenses"
      doc: "        See <a href=\"/reference/be/common-definitions#binary.output_licenses\"><code>common attributes\n        </code></a>\n"
      default_value: "[none]"
    }
    param {
      name: "output_to_bindir"
      doc: "        <p>\n          If set to True, this option causes output files to be written into the <code>bin</code>\n          directory instead of the <code>genfiles</code> directory.\n        </p>\n"
      default_value: "false"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "stamp"
      default_value: "AUTO"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "        <p>\n          The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this genrule\n          is allowed to access, or the <a href=\"/docs/toolchains\"><code>toolchain_type</code></a>\n          targets that this genrule will access.\n        </p>\n\n        <p>\n          Toolchains accessed via <code>toolchain_type</code> must also provide a\n          <code>TemplateVariableInfo</code> provider, which the target can use to access toolchain\n          details.\n        </p>\n"
      default_value: "[]"
    }
    param {
      name: "tools"
      doc: "        A list of <i>tool</i> dependencies for this rule. See the definition of\n        <a href=\"/concepts/build-ref#deps\">dependencies</a> for more information. <br/>\n        <p>\n          The build system ensures these prerequisites are built before running the genrule command;\n          they are built using the <a href=\'/contribute/guide#configurations\'><i>exec</i>\n          configuration</a>, since these tools are executed as part of the build. The path of an\n          individual <code>tools</code> target <code>//x:y</code> can be obtained using\n          <code>$(location //x:y)</code>.\n        </p>\n        <p>\n          Any <code>*_binary</code> or tool to be executed by <code>cmd</code> must appear in this\n          list, not in <code>srcs</code>, to ensure they are built in the correct configuration.\n        </p>\n"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\n<p>A <code>genrule</code> generates one or more files using a user-defined Bash command.</p>\n\n<p>\n  Genrules are generic build rules that you can use if there\'s no specific rule for the task.\n  For example, you could run a Bash one-liner. If however you need to compile C++ files, stick\n  to the existing <code>cc_*</code> rules, because all the heavy lifting has already been done\n  for you.\n</p>\n<p>\n  Note that genrule requires a shell to interpret the command argument.\n  It is also easy to reference arbitrary programs available on the PATH, however this makes the\n  command non-hermetic and may not be reproducible.\n  If you only need to run a single tool, consider using\n  <a href=\"https://github.com/bazelbuild/bazel-skylib/blob/main/docs/run_binary_doc.md\">run_binary</a>\n  instead.\n</p>\n<p>\n  Like every other action, the action created by genrules should not assume anything about their\n  working directory; all Bazel guarantees is that their declared inputs will be available at the\n  path that <code>$(location)</code> returns for their label. For example, if the action is run in a\n  sandbox or remotely, the implementation of the sandbox or the remote execution will determine the\n  working directory. If run directly (using the <code>standalone</code> strategy), the working\n  directory will be the execution root, i.e. the result of <code>bazel info execution_root</code>.\n</p>\n<p>\n  Do not use a genrule for running tests. There are special dispensations for tests and test\n  results, including caching policies and environment variables. Tests generally need to be run\n  after the build is complete and on the target architecture, whereas genrules are executed during\n  the build and on the exec architecture (the two may be different). If you need a general purpose\n  testing rule, use <a href=\"/reference/be/shell.html#sh_test\"><code>sh_test</code></a>.\n</p>\n\n<h4>Cross-compilation Considerations</h4>\n\n<p>\n  <em>See <a href=\"/docs/user-manual#configurations\">the user manual</a> for more info about\n  cross-compilation.</em>\n</p>\n<p>\n  While genrules run during a build, their outputs are often used after the build, for deployment or\n  testing. Consider the example of compiling C code for a microcontroller: the compiler accepts C\n  source files and generates code that runs on a microcontroller. The generated code obviously\n  cannot run on the CPU that was used for building it, but the C compiler (if compiled from source)\n  itself has to.\n</p>\n<p>\n  The build system uses the exec configuration to describe the machine(s) on which the build runs\n  and the target configuration to describe the machine(s) on which the output of the build is\n  supposed to run. It provides options to configure each of these and it segregates the\n  corresponding files into separate directories to avoid conflicts.\n</p>\n<p>\n  For genrules, the build system ensures that dependencies are built appropriately:\n  <code>srcs</code> are built (if necessary) for the <em>target</em> configuration,\n  <code>tools</code> are built for the <em>exec</em> configuration, and the output is considered to\n  be for the <em>target</em> configuration. It also provides <a href=\"/reference/be/make-variables\">\n  \"Make\" variables</a> that genrule commands can pass to the corresponding tools.\n</p>\n<p>\n  It is intentional that genrule defines no <code>deps</code> attribute: other built-in rules use\n  language-dependent meta information passed between the rules to automatically determine how to\n  handle dependent rules, but this level of automation is not possible for genrules. Genrules work\n  purely at the file and runfiles level.\n</p>\n\n<h4>Special Cases</h4>\n\n<p>\n  <i>Exec-exec compilation</i>: in some cases, the build system needs to run genrules such that the\n  output can also be executed during the build. If for example a genrule builds some custom compiler\n  which is subsequently used by another genrule, the first one has to produce its output for the\n  exec configuration, because that\'s where the compiler will run in the other genrule. In this case,\n  the build system does the right thing automatically: it builds the <code>srcs</code> and\n  <code>outs</code> of the first genrule for the exec configuration instead of the target\n  configuration. See <a href=\"/docs/user-manual#configurations\">the user manual</a> for more\n  info.\n</p>\n<p>\n  <i>JDK & C++ Tooling</i>: to use a tool from the JDK or the C++ compiler suite, the build system\n  provides a set of variables to use. See <a href=\"/reference/be/make-variables\">\"Make\" variable</a> for\n  details.\n</p>\n\n<h4>Genrule Environment</h4>\n\n<p>\n  The genrule command is executed by a Bash shell that is configured to fail when a command\n  or a pipeline fails, using <code>set -e -o pipefail</code>.\n</p>\n<p>\n  The build tool executes the Bash command in a sanitized process environment that\n  defines only core variables such as <code>PATH</code>, <code>PWD</code>,\n  <code>TMPDIR</code>, and a few others.\n\n  To ensure that builds are reproducible, most variables defined in the user\'s shell\n  environment are not passed though to the genrule\'s command. However, Bazel (but not\n  Blaze) passes through the value of the user\'s <code>PATH</code> environment variable.\n\n  Any change to the value of <code>PATH</code> will cause Bazel to re-execute the command\n  on the next build.\n  <!-- See https://github.com/bazelbuild/bazel/issues/1142 -->\n</p>\n<p>\n  A genrule command should not access the network except to connect processes that are\n  children of the command itself, though this is not currently enforced.\n</p>\n<p>\n  The build system automatically deletes any existing output files, but creates any necessary parent\n  directories before it runs a genrule. It also removes any output files in case of a failure.\n</p>\n\n<h4>General Advice</h4>\n\n<ul>\n  <li>Do ensure that tools run by a genrule are deterministic and hermetic. They should not write\n    timestamps to their output, and they should use stable ordering for sets and maps, as well as\n    write only relative file paths to the output, no absolute paths. Not following this rule will\n    lead to unexpected build behavior (Bazel not rebuilding a genrule you thought it would) and\n    degrade cache performance.</li>\n  <li>Do use <code>$(location)</code> extensively, for outputs, tools and sources. Due to the\n    segregation of output files for different configurations, genrules cannot rely on hard-coded\n    and/or absolute paths.</li>\n  <li>Do write a common Starlark macro in case the same or very similar genrules are used in\n    multiple places. If the genrule is complex, consider implementing it in a script or as a\n    Starlark rule. This improves readability as well as testability.</li>\n  <li>Do make sure that the exit code correctly indicates success or failure of the genrule.</li>\n  <li>Do not write informational messages to stdout or stderr. While useful for debugging, this can\n    easily become noise; a successful genrule should be silent. On the other hand, a failing genrule\n    should emit good error messages.</li>\n  <li><code>$$</code> evaluates to a <code>$</code>, a literal dollar-sign, so in order to invoke a\n    shell command containing dollar-signs such as <code>ls $(dirname $x)</code>, one must escape it\n    thus: <code>ls $$(dirname $$x)</code>.</li>\n  <li>Avoid creating symlinks and directories. Bazel doesn\'t copy over the directory/symlink\n    structure created by genrules and its dependency checking of directories is unsound.</li>\n  <li>When referencing the genrule in other rules, you can use either the genrule\'s label or the\n    labels of individual output files. Sometimes the one approach is more readable, sometimes the\n    other: referencing outputs by name in a consuming rule\'s <code>srcs</code> will avoid\n    unintentionally picking up other outputs of the genrule, but can be tedious if the genrule\n    produces many outputs.</li>\n</ul>\n\n<h4 id=\"genrule_examples\">Examples</h4>\n\n<p>\n  This example generates <code>foo.h</code>. There are no sources, because the command doesn\'t take\n  any input. The \"binary\" run by the command is a perl script in the same package as the genrule.\n</p>\n<pre class=\"code\">\ngenrule(\n    name = \"foo\",\n    srcs = [],\n    outs = [\"foo.h\"],\n    cmd = \"./$(location create_foo.pl) &gt; \\\"$@\\\"\",\n    tools = [\"create_foo.pl\"],\n)\n</pre>\n\n<p>\n  The following example shows how to use a <a href=\"/reference/be/general.html#filegroup\"><code>filegroup</code>\n  </a> and the outputs of another <code>genrule</code>. Note that using <code>$(SRCS)</code> instead\n  of explicit <code>$(location)</code> directives would also work; this example uses the latter for\n  sake of demonstration.\n</p>\n<pre class=\"code\">\ngenrule(\n    name = \"concat_all_files\",\n    srcs = [\n        \"//some:files\",  # a filegroup with multiple files in it ==> $(location<b>s</b>)\n        \"//other:gen\",   # a genrule with a single output ==> $(location)\n    ],\n    outs = [\"concatenated.txt\"],\n    cmd = \"cat $(locations //some:files) $(location //other:gen) > $@\",\n)\n</pre>\n\n"
  api_context: BUILD
}
global {
  name: "glob"
  callable {
    param {
      name: "include"
      doc: "The list of glob patterns to include."
      default_value: "[]"
    }
    param {
      name: "exclude"
      doc: "The list of glob patterns to exclude."
      default_value: "[]"
    }
    param {
      name: "exclude_directories"
      doc: "A flag whether to exclude directories or not."
      default_value: "1"
    }
    param {
      name: "allow_empty"
      doc: "Whether we allow glob patterns to match nothing. If `allow_empty` is False, each individual include pattern must match something and also the final result must be non-empty (after the matches of the `exclude` patterns are excluded)."
      default_value: "unbound"
    }
  }
  doc: "Glob returns a new, mutable, sorted list of every file in the current package that:<ul>\n<li>Matches at least one pattern in <code>include</code>.</li>\n<li>Does not match any of the patterns in <code>exclude</code> (default <code>[]</code>).</li></ul>\nIf the <code>exclude_directories</code> argument is enabled (set to <code>1</code>), files of type directory will be omitted from the results (default <code>1</code>)."
  api_context: BUILD
}
global {
  name: "java_binary"
  callable {
    param {
      name: "deps"
      doc: "The list of other libraries to be linked in to the target.\nSee general comments about <code>deps</code> at\n<a href=\"common-definitions.html#typical-attributes\">Typical attributes defined by\nmost build rules</a>."
      default_value: "[]"
    }
    param {
      name: "srcs"
      doc: "The list of source files that are processed to create the target.\nThis attribute is almost always required; see exceptions below.\n<p>\nSource files of type <code>.java</code> are compiled. In case of generated\n<code>.java</code> files it is generally advisable to put the generating rule\'s name\nhere instead of the name of the file itself. This not only improves readability but\nmakes the rule more resilient to future changes: if the generating rule generates\ndifferent files in the future, you only need to fix one place: the <code>outs</code> of\nthe generating rule. You should not list the generating rule in <code>deps</code>\nbecause it is a no-op.\n</p>\n<p>\nSource files of type <code>.srcjar</code> are unpacked and compiled. (This is useful if\nyou need to generate a set of <code>.java</code> files with a genrule.)\n</p>\n<p>\nRules: if the rule (typically <code>genrule</code> or <code>filegroup</code>) generates\nany of the files listed above, they will be used the same way as described for source\nfiles.\n</p>\n\n<p>\nThis argument is almost always required, except if a\n<a href=\"#java_binary.main_class\"><code>main_class</code></a> attribute specifies a\nclass on the runtime classpath or you specify the <code>runtime_deps</code> argument.\n</p>"
      default_value: "[]"
    }
    param {
      name: "data"
      doc: "The list of files needed by this library at runtime.\nSee general comments about <code>data</code>\nat <a href=\"/reference/be/common-definitions#typical-attributes\">Typical attributes defined by\nmost build rules</a>."
      default_value: "[]"
    }
    param {
      name: "resources"
      doc: "A list of data files to include in a Java jar.\n\n<p>\nResources may be source files or generated files.\n</p>\n\n<p>\nIf resources are specified, they will be bundled in the jar along with the usual\n<code>.class</code> files produced by compilation. The location of the resources inside\nof the jar file is determined by the project structure. Bazel first looks for Maven\'s\n<a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html\">standard directory layout</a>,\n(a \"src\" directory followed by a \"resources\" directory grandchild). If that is not\nfound, Bazel then looks for the topmost directory named \"java\" or \"javatests\" (so, for\nexample, if a resource is at <code>&lt;workspace root&gt;/x/java/y/java/z</code>, the\npath of the resource will be <code>y/java/z</code>. This heuristic cannot be overridden,\nhowever, the <code>resource_strip_prefix</code> attribute can be used to specify a\nspecific alternative directory for resource files."
      default_value: "[]"
    }
    param {
      name: "add_exports"
      doc: "Allow this library to access the given <code>module</code> or <code>package</code>.\n<p>\nThis corresponds to the javac and JVM --add-exports= flags."
      default_value: "[]"
    }
    param {
      name: "add_opens"
      doc: "Allow this library to reflectively access the given <code>module</code> or\n<code>package</code>.\n<p>\nThis corresponds to the javac and JVM --add-opens= flags."
      default_value: "[]"
    }
    param {
      name: "args"
      doc: "<p>\n  List of strings; subject to\n  <a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n  <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution, and\n  <a href=\"#sh-tokenization\">Bourne shell tokenization</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\nCommand line arguments that Bazel will pass to the target when it is executed\neither by the <code>run</code> command or as a test. These arguments are\npassed before the ones that are specified on the <code>bazel run</code> or\n<code>bazel test</code> command line.\n</p>\n\n<p>\n<em class=\"harmful\">NOTE: The arguments are not passed when you run the target\noutside of Bazel (for example, by manually executing the binary in\n<code>bazel-bin/</code>).</em>\n</p>\n"
    }
    param {
      name: "bootclasspath"
      doc: "Restricted API, do not use!"
      default_value: "None"
    }
    param {
      name: "classpath_resources"
      doc: "<em class=\"harmful\">DO NOT USE THIS OPTION UNLESS THERE IS NO OTHER WAY)</em>\n<p>\nA list of resources that must be located at the root of the java tree. This attribute\'s\nonly purpose is to support third-party libraries that require that their resources be\nfound on the classpath as exactly <code>\"myconfig.xml\"</code>. It is only allowed on\nbinaries and not libraries, due to the danger of namespace conflicts.\n</p>"
      default_value: "[]"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "create_executable"
      doc: "Deprecated, use <code>java_single_jar</code> instead."
      default_value: "True"
    }
    param {
      name: "deploy_env"
      doc: "A list of other <code>java_binary</code> targets which represent the deployment\nenvironment for this binary.\nSet this attribute when building a plugin which will be loaded by another\n<code>java_binary</code>.<br/> Setting this attribute excludes all dependencies from\nthe runtime classpath (and the deploy jar) of this binary that are shared between this\nbinary and the targets specified in <code>deploy_env</code>."
      default_value: "[]"
    }
    param {
      name: "deploy_manifest_lines"
      doc: "A list of lines to add to the <code>META-INF/manifest.mf</code> file generated for the\n<code>*_deploy.jar</code> target. The contents of this attribute are <em>not</em> subject\nto <a href=\"make-variables.html\">\"Make variable\"</a> substitution."
      default_value: "[]"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "env"
      doc: "<p>Dictionary of strings; values are subject to\n<a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n<a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution; default is <code>{}</code></p>\n\n<p>Specifies additional environment variables to set when the target is\n  executed by <code>bazel run</code>.\n</p>\n\n<p>\n  This attribute only applies to native rules, like <code>cc_binary</code>, <code>py_binary</code>,\n  and <code>sh_binary</code>.  It does not apply to Starlark-defined executable rules.\n</p>\n\n<p>\n<em class=\"harmful\">NOTE: The environment variables are not set when you run the target\noutside of Bazel (for example, by manually executing the binary in\n<code>bazel-bin/</code>).</em>\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "javacopts"
      doc: "Extra compiler options for this binary.\nSubject to <a href=\"make-variables.html\">\"Make variable\"</a> substitution and\n<a href=\"common-definitions.html#sh-tokenization\">Bourne shell tokenization</a>.\n<p>These compiler options are passed to javac after the global compiler options.</p>"
      default_value: "[]"
    }
    param {
      name: "jvm_flags"
      doc: "A list of flags to embed in the wrapper script generated for running this binary.\nSubject to <a href=\"/reference/be/make-variables#location\">$(location)</a> and\n<a href=\"make-variables.html\">\"Make variable\"</a> substitution, and\n<a href=\"common-definitions.html#sh-tokenization\">Bourne shell tokenization</a>.\n\n<p>The wrapper script for a Java binary includes a CLASSPATH definition\n(to find all the dependent jars) and invokes the right Java interpreter.\nThe command line generated by the wrapper script includes the name of\nthe main class followed by a <code>\"$@\"</code> so you can pass along other\narguments after the classname.  However, arguments intended for parsing\nby the JVM must be specified <i>before</i> the classname on the command\nline.  The contents of <code>jvm_flags</code> are added to the wrapper\nscript before the classname is listed.</p>\n\n<p>Note that this attribute has <em>no effect</em> on <code>*_deploy.jar</code>\noutputs.</p>"
      default_value: "[]"
    }
    param {
      name: "launcher"
      doc: "Specify a binary that will be used to run your Java program instead of the\nnormal <code>bin/java</code> program included with the JDK.\nThe target must be a <code>cc_binary</code>. Any <code>cc_binary</code> that\nimplements the\n<a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/invocation.html\">\nJava Invocation API</a> can be specified as a value for this attribute.\n\n<p>By default, Bazel will use the normal JDK launcher (bin/java or java.exe).</p>\n\n<p>The related <a href=\"/docs/user-manual#flag--java_launcher\"><code>\n--java_launcher</code></a> Bazel flag affects only those\n<code>java_binary</code> and <code>java_test</code> targets that have\n<i>not</i> specified a <code>launcher</code> attribute.</p>\n\n<p>Note that your native (C++, SWIG, JNI) dependencies will be built differently\ndepending on whether you are using the JDK launcher or another launcher:</p>\n\n<ul>\n<li>If you are using the normal JDK launcher (the default), native dependencies are\nbuilt as a shared library named <code>{name}_nativedeps.so</code>, where\n<code>{name}</code> is the <code>name</code> attribute of this java_binary rule.\nUnused code is <em>not</em> removed by the linker in this configuration.</li>\n\n<li>If you are using any other launcher, native (C++) dependencies are statically\nlinked into a binary named <code>{name}_nativedeps</code>, where <code>{name}</code>\nis the <code>name</code> attribute of this java_binary rule. In this case,\nthe linker will remove any code it thinks is unused from the resulting binary,\nwhich means any C++ code accessed only via JNI may not be linked in unless\nthat <code>cc_library</code> target specifies <code>alwayslink = True</code>.</li>\n</ul>\n\n<p>When using any launcher other than the default JDK launcher, the format\nof the <code>*_deploy.jar</code> output changes. See the main\n<a href=\"#java_binary\">java_binary</a> docs for details.</p>"
      default_value: "None"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "main_class"
      doc: "Name of class with <code>main()</code> method to use as entry point.\nIf a rule uses this option, it does not need a <code>srcs=[...]</code> list.\nThus, with this attribute one can make an executable from a Java library that already\ncontains one or more <code>main()</code> methods.\n<p>\nThe value of this attribute is a class name, not a source file. The class must be\navailable at runtime: it may be compiled by this rule (from <code>srcs</code>) or\nprovided by direct or transitive dependencies (through <code>runtime_deps</code> or\n<code>deps</code>). If the class is unavailable, the binary will fail at runtime; there\nis no build-time check.\n</p>"
      default_value: "\"\""
    }
    param {
      name: "neverlink"
      default_value: "False"
    }
    param {
      name: "output_licenses"
      doc: "<p>List of strings; default is <code>[]</code></p>\n\n<p>\nThe licenses of the output files that this binary generates.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n\n"
    }
    param {
      name: "plugins"
      doc: "Java compiler plugins to run at compile-time.\nEvery <code>java_plugin</code> specified in this attribute will be run whenever this rule\nis built. A library may also inherit plugins from dependencies that use\n<code><a href=\"#java_library.exported_plugins\">exported_plugins</a></code>. Resources\ngenerated by the plugin will be included in the resulting jar of this rule."
      default_value: "[]"
    }
    param {
      name: "resource_strip_prefix"
      doc: "The path prefix to strip from Java resources.\n<p>\nIf specified, this path prefix is stripped from every file in the <code>resources</code>\nattribute. It is an error for a resource file not to be under this directory. If not\nspecified (the default), the path of resource file is determined according to the same\nlogic as the Java package of source files. For example, a source file at\n<code>stuff/java/foo/bar/a.txt</code> will be located at <code>foo/bar/a.txt</code>.\n</p>"
      default_value: "\"\""
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "runtime_deps"
      doc: "Libraries to make available to the final binary or test at runtime only.\nLike ordinary <code>deps</code>, these will appear on the runtime classpath, but unlike\nthem, not on the compile-time classpath. Dependencies needed only at runtime should be\nlisted here. Dependency-analysis tools should ignore targets that appear in both\n<code>runtime_deps</code> and <code>deps</code>."
      default_value: "[]"
    }
    param {
      name: "stamp"
      doc: "Whether to encode build information into the binary. Possible values:\n<ul>\n<li>\n  <code>stamp = 1</code>: Always stamp the build information into the binary, even in\n  <a href=\"/docs/user-manual#flag--stamp\"><code>--nostamp</code></a> builds. <b>This\n  setting should be avoided</b>, since it potentially kills remote caching for the\n  binary and any downstream actions that depend on it.\n</li>\n<li>\n  <code>stamp = 0</code>: Always replace build information by constant values. This\n  gives good build result caching.\n</li>\n<li>\n  <code>stamp = -1</code>: Embedding of build information is controlled by the\n  <a href=\"/docs/user-manual#flag--stamp\"><code>--[no]stamp</code></a> flag.\n</li>\n</ul>\n<p>Stamped binaries are <em>not</em> rebuilt unless their dependencies change.</p>"
      default_value: "-1"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "use_launcher"
      doc: "Whether the binary should use a custom launcher.\n\n<p>If this attribute is set to false, the\n<a href=\"/reference/be/java.html#java_binary.launcher\">launcher</a> attribute  and the related\n<a href=\"/docs/user-manual#flag--java_launcher\"><code>--java_launcher</code></a> flag\nwill be ignored for this target."
      default_value: "True"
    }
    param {
      name: "use_testrunner"
      doc: "Use the test runner (by default\n<code>com.google.testing.junit.runner.BazelTestRunner</code>) class as the\nmain entry point for a Java program, and provide the test class\nto the test runner as a value of <code>bazel.test_suite</code>\nsystem property.\n\n<br/>\nYou can use this to override the default\nbehavior, which is to use test runner for\n<code>java_test</code> rules,\nand not use it for <code>java_binary</code> rules.  It is unlikely\nyou will want to do this.  One use is for <code>AllTest</code>\nrules that are invoked by another rule (to set up a database\nbefore running the tests, for example).  The <code>AllTest</code>\nrule must be declared as a <code>java_binary</code>, but should\nstill use the test runner as its main entry point.\n\nThe name of a test runner class can be overridden with <code>main_class</code> attribute."
      default_value: "False"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "<p>\n  Builds a Java archive (\"jar file\"), plus a wrapper shell script with the same name as the rule.\n  The wrapper shell script uses a classpath that includes, among other things, a jar file for each\n  library on which the binary depends. When running the wrapper shell script, any nonempty\n  <code>JAVABIN</code> environment variable will take precedence over the version specified via\n  Bazel\'s <code>--java_runtime_version</code> flag.\n</p>\n<p>\n  The wrapper script accepts several unique flags. Refer to\n  <code>//src/main/java/com/google/devtools/build/lib/bazel/rules/java/java_stub_template.txt</code>\n  for a list of configurable flags and environment variables accepted by the wrapper.\n</p>\n\n<h4 id=\"java_binary_implicit_outputs\">Implicit output targets</h4>\n<ul>\n  <li><code><var>name</var>.jar</code>: A Java archive, containing the class files and other\n    resources corresponding to the binary\'s direct dependencies.</li>\n  <li><code><var>name</var>-src.jar</code>: An archive containing the sources (\"source\n    jar\").</li>\n  <li><code><var>name</var>_deploy.jar</code>: A Java archive suitable for deployment (only\n    built if explicitly requested).\n    <p>\n      Building the <code>&lt;<var>name</var>&gt;_deploy.jar</code> target for your rule\n      creates a self-contained jar file with a manifest that allows it to be run with the\n      <code>java -jar</code> command or with the wrapper script\'s <code>--singlejar</code>\n      option. Using the wrapper script is preferred to <code>java -jar</code> because it\n      also passes the <a href=\"#java_binary-jvm_flags\">JVM flags</a> and the options\n      to load native libraries.\n    </p>\n    <p>\n      The deploy jar contains all the classes that would be found by a classloader that\n      searched the classpath from the binary\'s wrapper script from beginning to end. It also\n      contains the native libraries needed for dependencies. These are automatically loaded\n      into the JVM at runtime.\n    </p>\n    <p>If your target specifies a <a href=\"#java_binary.launcher\">launcher</a>\n      attribute, then instead of being a normal JAR file, the _deploy.jar will be a\n      native binary. This will contain the launcher plus any native (C++) dependencies of\n      your rule, all linked into a static binary. The actual jar file\'s bytes will be\n      appended to that native binary, creating a single binary blob containing both the\n      executable and the Java code. You can execute the resulting jar file directly\n      like you would execute any native binary.</p>\n  </li>\n  <li><code><var>name</var>_deploy-src.jar</code>: An archive containing the sources\n    collected from the transitive closure of the target. These will match the classes in the\n    <code>deploy.jar</code> except where jars have no matching source jar.</li>\n</ul>\n\n<p>\nIt is good practice to use the name of the source file that is the main entry point of the\napplication (minus the extension). For example, if your entry point is called\n<code>Main.java</code>, then your name could be <code>Main</code>.\n</p>\n\n<p>\n  A <code>deps</code> attribute is not allowed in a <code>java_binary</code> rule without\n  <a href=\"#java_binary-srcs\"><code>srcs</code></a>; such a rule requires a\n  <a href=\"#java_binary-main_class\"><code>main_class</code></a> provided by\n  <a href=\"#java_binary-runtime_deps\"><code>runtime_deps</code></a>.\n</p>\n\n<p>The following code snippet illustrates a common mistake:</p>\n\n<pre class=\"code\">\n<code class=\"lang-starlark\">\njava_binary(\n    name = \"DontDoThis\",\n    srcs = [\n        <var>...</var>,\n        <code class=\"deprecated\">\"GeneratedJavaFile.java\"</code>,  # a generated .java file\n    ],\n    deps = [<code class=\"deprecated\">\":generating_rule\",</code>],  # rule that generates that file\n)\n</code>\n</pre>\n\n<p>Do this instead:</p>\n\n<pre class=\"code\">\n<code class=\"lang-starlark\">\njava_binary(\n    name = \"DoThisInstead\",\n    srcs = [\n        <var>...</var>,\n        \":generating_rule\",\n    ],\n)\n</code>\n</pre>"
  api_context: BUILD
}
global {
  name: "java_import"
  callable {
    param {
      name: "deps"
      doc: "The list of other libraries to be linked in to the target.\nSee <a href=\"/reference/be/java.html#java_library.deps\">java_library.deps</a>."
      default_value: "[]"
    }
    param {
      name: "data"
      doc: "The list of files needed by this rule at runtime."
      default_value: "[]"
    }
    param {
      name: "add_exports"
      doc: "Allow this library to access the given <code>module</code> or <code>package</code>.\n<p>\nThis corresponds to the javac and JVM --add-exports= flags."
      default_value: "[]"
    }
    param {
      name: "add_opens"
      doc: "Allow this library to reflectively access the given <code>module</code> or\n<code>package</code>.\n<p>\nThis corresponds to the javac and JVM --add-opens= flags."
      default_value: "[]"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "constraints"
      doc: "Extra constraints imposed on this rule as a Java library."
      default_value: "[]"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "exports"
      doc: "Targets to make available to users of this rule.\nSee <a href=\"/reference/be/java.html#java_library.exports\">java_library.exports</a>."
      default_value: "[]"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "jars"
      doc: "The list of JAR files provided to Java targets that depend on this target."
      is_mandatory: true
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "neverlink"
      doc: "Only use this library for compilation and not at runtime.\nUseful if the library will be provided by the runtime environment\nduring execution. Examples of libraries like this are IDE APIs\nfor IDE plug-ins or <code>tools.jar</code> for anything running on\na standard JDK."
      default_value: "False"
    }
    param {
      name: "proguard_specs"
      doc: "Files to be used as Proguard specification.\nThese will describe the set of specifications to be used by Proguard. If specified,\nthey will be added to any <code>android_binary</code> target depending on this library.\n\nThe files included here must only have idempotent rules, namely -dontnote, -dontwarn,\nassumenosideeffects, and rules that start with -keep. Other options can only appear in\n<code>android_binary</code>\'s proguard_specs, to ensure non-tautological merges."
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "runtime_deps"
      doc: "Libraries to make available to the final binary or test at runtime only.\nSee <a href=\"/reference/be/java.html#java_library.runtime_deps\">java_library.runtime_deps</a>."
      default_value: "[]"
    }
    param {
      name: "srcjar"
      doc: "A JAR file that contains source code for the compiled JAR files."
      default_value: "None"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "<p>\n  This rule allows the use of precompiled <code>.jar</code> files as\n  libraries for <code><a href=\"#java_library\">java_library</a></code> and\n  <code>java_binary</code> rules.\n</p>\n\n<h4 id=\"java_import_examples\">Examples</h4>\n\n<pre class=\"code\">\n<code class=\"lang-starlark\">\n    java_import(\n        name = \"maven_model\",\n        jars = [\n            \"maven_model/maven-aether-provider-3.2.3.jar\",\n            \"maven_model/maven-model-3.2.3.jar\",\n            \"maven_model/maven-model-builder-3.2.3.jar\",\n        ],\n    )\n</code>\n</pre>"
  api_context: BUILD
}
global {
  name: "java_library"
  callable {
    param {
      name: "deps"
      doc: "The list of libraries to link into this library.\nSee general comments about <code>deps</code> at\n<a href=\"/reference/be/common-definitions#typical-attributes\">Typical attributes defined by\nmost build rules</a>.\n<p>\n  The jars built by <code>java_library</code> rules listed in <code>deps</code> will be on\n  the compile-time classpath of this rule. Furthermore the transitive closure of their\n  <code>deps</code>, <code>runtime_deps</code> and <code>exports</code> will be on the\n  runtime classpath.\n</p>\n<p>\n  By contrast, targets in the <code>data</code> attribute are included in the runfiles but\n  on neither the compile-time nor runtime classpath.\n</p>"
      default_value: "[]"
    }
    param {
      name: "srcs"
      doc: "The list of source files that are processed to create the target.\nThis attribute is almost always required; see exceptions below.\n<p>\nSource files of type <code>.java</code> are compiled. In case of generated\n<code>.java</code> files it is generally advisable to put the generating rule\'s name\nhere instead of the name of the file itself. This not only improves readability but\nmakes the rule more resilient to future changes: if the generating rule generates\ndifferent files in the future, you only need to fix one place: the <code>outs</code> of\nthe generating rule. You should not list the generating rule in <code>deps</code>\nbecause it is a no-op.\n</p>\n<p>\nSource files of type <code>.srcjar</code> are unpacked and compiled. (This is useful if\nyou need to generate a set of <code>.java</code> files with a genrule.)\n</p>\n<p>\nRules: if the rule (typically <code>genrule</code> or <code>filegroup</code>) generates\nany of the files listed above, they will be used the same way as described for source\nfiles.\n</p>\n<p>\nSource files of type <code>.properties</code> are treated as resources.\n</p>\n\n<p>All other files are ignored, as long as there is at least one file of a\nfile type described above. Otherwise an error is raised.</p>\n\n<p>\nThis argument is almost always required, except if you specify the <code>runtime_deps</code> argument.\n</p>"
      default_value: "[]"
    }
    param {
      name: "data"
      doc: "The list of files needed by this library at runtime.\nSee general comments about <code>data</code> at\n<a href=\"/reference/be/common-definitions#typical-attributes\">Typical attributes defined by\nmost build rules</a>.\n<p>\n  When building a <code>java_library</code>, Bazel doesn\'t put these files anywhere; if the\n  <code>data</code> files are generated files then Bazel generates them. When building a\n  test that depends on this <code>java_library</code> Bazel copies or links the\n  <code>data</code> files into the runfiles area.\n</p>"
      default_value: "[]"
    }
    param {
      name: "resources"
      doc: "A list of data files to include in a Java jar.\n<p>\nResources may be source files or generated files.\n</p>\n\n<p>\nIf resources are specified, they will be bundled in the jar along with the usual\n<code>.class</code> files produced by compilation. The location of the resources inside\nof the jar file is determined by the project structure. Bazel first looks for Maven\'s\n<a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html\">standard directory layout</a>,\n(a \"src\" directory followed by a \"resources\" directory grandchild). If that is not\nfound, Bazel then looks for the topmost directory named \"java\" or \"javatests\" (so, for\nexample, if a resource is at <code>&lt;workspace root&gt;/x/java/y/java/z</code>, the\npath of the resource will be <code>y/java/z</code>. This heuristic cannot be overridden,\nhowever, the <code>resource_strip_prefix</code> attribute can be used to specify a\nspecific alternative directory for resource files."
      default_value: "[]"
    }
    param {
      name: "add_exports"
      doc: "Allow this library to access the given <code>module</code> or <code>package</code>.\n<p>\nThis corresponds to the javac and JVM --add-exports= flags."
      default_value: "[]"
    }
    param {
      name: "add_opens"
      doc: "Allow this library to reflectively access the given <code>module</code> or\n<code>package</code>.\n<p>\nThis corresponds to the javac and JVM --add-opens= flags."
      default_value: "[]"
    }
    param {
      name: "bootclasspath"
      doc: "Restricted API, do not use!"
      default_value: "None"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "exported_plugins"
      doc: "The list of <code><a href=\"#/reference/be/java.html#java_plugin\">java_plugin</a></code>s (e.g. annotation\nprocessors) to export to libraries that directly depend on this library.\n<p>\n  The specified list of <code>java_plugin</code>s will be applied to any library which\n  directly depends on this library, just as if that library had explicitly declared these\n  labels in <code><a href=\"/reference/be/java.html#java_library.plugins\">plugins</a></code>.\n</p>"
      default_value: "[]"
    }
    param {
      name: "exports"
      doc: "Exported libraries.\n<p>\n  Listing rules here will make them available to parent rules, as if the parents explicitly\n  depended on these rules. This is not true for regular (non-exported) <code>deps</code>.\n</p>\n<p>\n  Summary: a rule <i>X</i> can access the code in <i>Y</i> if there exists a dependency\n  path between them that begins with a <code>deps</code> edge followed by zero or more\n  <code>exports</code> edges. Let\'s see some examples to illustrate this.\n</p>\n<p>\n  Assume <i>A</i> depends on <i>B</i> and <i>B</i> depends on <i>C</i>. In this case\n  C is a <em>transitive</em> dependency of A, so changing C\'s sources and rebuilding A will\n  correctly rebuild everything. However A will not be able to use classes in C. To allow\n  that, either A has to declare C in its <code>deps</code>, or B can make it easier for A\n  (and anything that may depend on A) by declaring C in its (B\'s) <code>exports</code>\n  attribute.\n</p>\n<p>\n  The closure of exported libraries is available to all direct parent rules. Take a slightly\n  different example: A depends on B, B depends on C and D, and also exports C but not D.\n  Now A has access to C but not to D. Now, if C and D exported some libraries, C\' and D\'\n  respectively, A could only access C\' but not D\'.\n</p>\n<p>\n  Important: an exported rule is not a regular dependency. Sticking to the previous example,\n  if B exports C and wants to also use C, it has to also list it in its own\n  <code>deps</code>.\n</p>"
      default_value: "[]"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "javabuilder_jvm_flags"
      doc: "Restricted API, do not use!"
      default_value: "[]"
    }
    param {
      name: "javacopts"
      doc: "Extra compiler options for this library.\nSubject to <a href=\"make-variables.html\">\"Make variable\"</a> substitution and\n<a href=\"common-definitions.html#sh-tokenization\">Bourne shell tokenization</a>.\n<p>These compiler options are passed to javac after the global compiler options.</p>"
      default_value: "[]"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "neverlink"
      doc: "Whether this library should only be used for compilation and not at runtime.\nUseful if the library will be provided by the runtime environment during execution. Examples\nof such libraries are the IDE APIs for IDE plug-ins or <code>tools.jar</code> for anything\nrunning on a standard JDK.\n<p>\n  Note that <code>neverlink = True</code> does not prevent the compiler from inlining material\n  from this library into compilation targets that depend on it, as permitted by the Java\n  Language Specification (e.g., <code>static final</code> constants of <code>String</code>\n  or of primitive types). The preferred use case is therefore when the runtime library is\n  identical to the compilation library.\n</p>\n<p>\n  If the runtime library differs from the compilation library then you must ensure that it\n  differs only in places that the JLS forbids compilers to inline (and that must hold for\n  all future versions of the JLS).\n</p>"
      default_value: "False"
    }
    param {
      name: "plugins"
      doc: "Java compiler plugins to run at compile-time.\nEvery <code>java_plugin</code> specified in this attribute will be run whenever this rule\nis built. A library may also inherit plugins from dependencies that use\n<code><a href=\"#java_library.exported_plugins\">exported_plugins</a></code>. Resources\ngenerated by the plugin will be included in the resulting jar of this rule."
      default_value: "[]"
    }
    param {
      name: "proguard_specs"
      doc: "Files to be used as Proguard specification.\nThese will describe the set of specifications to be used by Proguard. If specified,\nthey will be added to any <code>android_binary</code> target depending on this library.\n\nThe files included here must only have idempotent rules, namely -dontnote, -dontwarn,\nassumenosideeffects, and rules that start with -keep. Other options can only appear in\n<code>android_binary</code>\'s proguard_specs, to ensure non-tautological merges."
      default_value: "[]"
    }
    param {
      name: "resource_strip_prefix"
      doc: "The path prefix to strip from Java resources.\n<p>\nIf specified, this path prefix is stripped from every file in the <code>resources</code>\nattribute. It is an error for a resource file not to be under this directory. If not\nspecified (the default), the path of resource file is determined according to the same\nlogic as the Java package of source files. For example, a source file at\n<code>stuff/java/foo/bar/a.txt</code> will be located at <code>foo/bar/a.txt</code>.\n</p>"
      default_value: "\"\""
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "runtime_deps"
      doc: "Libraries to make available to the final binary or test at runtime only.\nLike ordinary <code>deps</code>, these will appear on the runtime classpath, but unlike\nthem, not on the compile-time classpath. Dependencies needed only at runtime should be\nlisted here. Dependency-analysis tools should ignore targets that appear in both\n<code>runtime_deps</code> and <code>deps</code>."
      default_value: "[]"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "<p>This rule compiles and links sources into a <code>.jar</code> file.</p>\n\n<h4>Implicit outputs</h4>\n<ul>\n  <li><code>lib<var>name</var>.jar</code>: A Java archive containing the class files.</li>\n  <li><code>lib<var>name</var>-src.jar</code>: An archive containing the sources (\"source\n    jar\").</li>\n</ul>"
  api_context: BUILD
}
global {
  name: "java_lite_proto_library"
  callable {
    param {
      name: "**kwattrs"
      is_star_star_arg: true
    }
  }
  doc: "<p>\n<code>java_lite_proto_library</code> generates Java code from <code>.proto</code> files.\n</p>\n\n<p>\n<code>deps</code> must point to <a href=\"protocol-buffer.html#proto_library\"><code>proto_library\n</code></a> rules.\n</p>\n\n<p>\nExample:\n</p>\n\n<pre class=\"code\">\n<code class=\"lang-starlark\">\njava_library(\n    name = \"lib\",\n    runtime_deps = [\":foo\"],\n)\n\njava_lite_proto_library(\n    name = \"foo\",\n    deps = [\":bar\"],\n)\n\nproto_library(\n    name = \"bar\",\n)\n</code>\n</pre>"
  api_context: BUILD
}
global {
  name: "java_package_configuration"
  callable {
    param {
      name: "data"
      doc: "The list of files needed by this configuration at runtime."
      default_value: "[]"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "javacopts"
      doc: "Java compiler flags."
      default_value: "[]"
    }
    param {
      name: "output_licenses"
      default_value: "[]"
    }
    param {
      name: "packages"
      doc: "The set of <code><a href=\"/reference/be/functions.html#package_group\">package_group</a></code>s\nthe configuration should be applied to."
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "system"
      doc: "Corresponds to javac\'s --system flag."
      default_value: "None"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "<p>\nConfiguration to apply to a set of packages.\nConfigurations can be added to\n<code><a href=\"/reference/be/java.html#java_toolchain.javacopts\">java_toolchain.javacopts</a></code>s.\n</p>\n\n<h4 id=\"java_package_configuration_example\">Example:</h4>\n\n<pre class=\"code\">\n<code class=\"lang-starlark\">\n\njava_package_configuration(\n    name = \"my_configuration\",\n    packages = [\":my_packages\"],\n    javacopts = [\"-Werror\"],\n)\n\npackage_group(\n    name = \"my_packages\",\n    packages = [\n        \"//com/my/project/...\",\n        \"-//com/my/project/testing/...\",\n    ],\n)\n\njava_toolchain(\n    ...,\n    package_configuration = [\n        \":my_configuration\",\n    ]\n)\n\n</code>\n</pre>"
  api_context: BUILD
}
global {
  name: "java_plugin"
  callable {
    param {
      name: "deps"
      doc: "The list of libraries to link into this library.\nSee general comments about <code>deps</code> at\n<a href=\"/reference/be/common-definitions#typical-attributes\">Typical attributes defined by\nmost build rules</a>.\n<p>\n  The jars built by <code>java_library</code> rules listed in <code>deps</code> will be on\n  the compile-time classpath of this rule. Furthermore the transitive closure of their\n  <code>deps</code>, <code>runtime_deps</code> and <code>exports</code> will be on the\n  runtime classpath.\n</p>\n<p>\n  By contrast, targets in the <code>data</code> attribute are included in the runfiles but\n  on neither the compile-time nor runtime classpath.\n</p>"
      default_value: "[]"
    }
    param {
      name: "srcs"
      doc: "The list of source files that are processed to create the target.\nThis attribute is almost always required; see exceptions below.\n<p>\nSource files of type <code>.java</code> are compiled. In case of generated\n<code>.java</code> files it is generally advisable to put the generating rule\'s name\nhere instead of the name of the file itself. This not only improves readability but\nmakes the rule more resilient to future changes: if the generating rule generates\ndifferent files in the future, you only need to fix one place: the <code>outs</code> of\nthe generating rule. You should not list the generating rule in <code>deps</code>\nbecause it is a no-op.\n</p>\n<p>\nSource files of type <code>.srcjar</code> are unpacked and compiled. (This is useful if\nyou need to generate a set of <code>.java</code> files with a genrule.)\n</p>\n<p>\nRules: if the rule (typically <code>genrule</code> or <code>filegroup</code>) generates\nany of the files listed above, they will be used the same way as described for source\nfiles.\n</p>\n<p>\nSource files of type <code>.properties</code> are treated as resources.\n</p>\n\n<p>All other files are ignored, as long as there is at least one file of a\nfile type described above. Otherwise an error is raised.</p>\n\n<p>\nThis argument is almost always required, except if you specify the <code>runtime_deps</code> argument.\n</p>"
      default_value: "[]"
    }
    param {
      name: "data"
      doc: "The list of files needed by this library at runtime.\nSee general comments about <code>data</code> at\n<a href=\"/reference/be/common-definitions#typical-attributes\">Typical attributes defined by\nmost build rules</a>.\n<p>\n  When building a <code>java_library</code>, Bazel doesn\'t put these files anywhere; if the\n  <code>data</code> files are generated files then Bazel generates them. When building a\n  test that depends on this <code>java_library</code> Bazel copies or links the\n  <code>data</code> files into the runfiles area.\n</p>"
      default_value: "[]"
    }
    param {
      name: "resources"
      doc: "A list of data files to include in a Java jar.\n<p>\nResources may be source files or generated files.\n</p>\n\n<p>\nIf resources are specified, they will be bundled in the jar along with the usual\n<code>.class</code> files produced by compilation. The location of the resources inside\nof the jar file is determined by the project structure. Bazel first looks for Maven\'s\n<a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html\">standard directory layout</a>,\n(a \"src\" directory followed by a \"resources\" directory grandchild). If that is not\nfound, Bazel then looks for the topmost directory named \"java\" or \"javatests\" (so, for\nexample, if a resource is at <code>&lt;workspace root&gt;/x/java/y/java/z</code>, the\npath of the resource will be <code>y/java/z</code>. This heuristic cannot be overridden,\nhowever, the <code>resource_strip_prefix</code> attribute can be used to specify a\nspecific alternative directory for resource files."
      default_value: "[]"
    }
    param {
      name: "add_exports"
      doc: "Allow this library to access the given <code>module</code> or <code>package</code>.\n<p>\nThis corresponds to the javac and JVM --add-exports= flags."
      default_value: "[]"
    }
    param {
      name: "add_opens"
      doc: "Allow this library to reflectively access the given <code>module</code> or\n<code>package</code>.\n<p>\nThis corresponds to the javac and JVM --add-opens= flags."
      default_value: "[]"
    }
    param {
      name: "bootclasspath"
      doc: "Restricted API, do not use!"
      default_value: "None"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "generates_api"
      doc: "This attribute marks annotation processors that generate API code.\n<p>If a rule uses an API-generating annotation processor, other rules\ndepending on it can refer to the generated code only if their\ncompilation actions are scheduled after the generating rule. This\nattribute instructs Bazel to introduce scheduling constraints when\n--java_header_compilation is enabled.\n<p><em class=\"harmful\">WARNING: This attribute affects build\nperformance, use it only if necessary.</em></p>"
      default_value: "False"
    }
    param {
      name: "javabuilder_jvm_flags"
      doc: "Restricted API, do not use!"
      default_value: "[]"
    }
    param {
      name: "javacopts"
      doc: "Extra compiler options for this library.\nSubject to <a href=\"make-variables.html\">\"Make variable\"</a> substitution and\n<a href=\"common-definitions.html#sh-tokenization\">Bourne shell tokenization</a>.\n<p>These compiler options are passed to javac after the global compiler options.</p>"
      default_value: "[]"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "neverlink"
      doc: "Whether this library should only be used for compilation and not at runtime.\nUseful if the library will be provided by the runtime environment during execution. Examples\nof such libraries are the IDE APIs for IDE plug-ins or <code>tools.jar</code> for anything\nrunning on a standard JDK.\n<p>\n  Note that <code>neverlink = True</code> does not prevent the compiler from inlining material\n  from this library into compilation targets that depend on it, as permitted by the Java\n  Language Specification (e.g., <code>static final</code> constants of <code>String</code>\n  or of primitive types). The preferred use case is therefore when the runtime library is\n  identical to the compilation library.\n</p>\n<p>\n  If the runtime library differs from the compilation library then you must ensure that it\n  differs only in places that the JLS forbids compilers to inline (and that must hold for\n  all future versions of the JLS).\n</p>"
      default_value: "False"
    }
    param {
      name: "output_licenses"
      default_value: "[]"
    }
    param {
      name: "plugins"
      doc: "Java compiler plugins to run at compile-time.\nEvery <code>java_plugin</code> specified in this attribute will be run whenever this rule\nis built. A library may also inherit plugins from dependencies that use\n<code><a href=\"#java_library.exported_plugins\">exported_plugins</a></code>. Resources\ngenerated by the plugin will be included in the resulting jar of this rule."
      default_value: "[]"
    }
    param {
      name: "processor_class"
      doc: "The processor class is the fully qualified type of the class that the Java compiler should\nuse as entry point to the annotation processor. If not specified, this rule will not\ncontribute an annotation processor to the Java compiler\'s annotation processing, but its\nruntime classpath will still be included on the compiler\'s annotation processor path. (This\nis primarily intended for use by\n<a href=\"https://errorprone.info/docs/plugins\">Error Prone plugins</a>, which are loaded\nfrom the annotation processor path using\n<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html\">\njava.util.ServiceLoader</a>.)"
      default_value: "\"\""
    }
    param {
      name: "proguard_specs"
      doc: "Files to be used as Proguard specification.\nThese will describe the set of specifications to be used by Proguard. If specified,\nthey will be added to any <code>android_binary</code> target depending on this library.\n\nThe files included here must only have idempotent rules, namely -dontnote, -dontwarn,\nassumenosideeffects, and rules that start with -keep. Other options can only appear in\n<code>android_binary</code>\'s proguard_specs, to ensure non-tautological merges."
      default_value: "[]"
    }
    param {
      name: "resource_strip_prefix"
      doc: "The path prefix to strip from Java resources.\n<p>\nIf specified, this path prefix is stripped from every file in the <code>resources</code>\nattribute. It is an error for a resource file not to be under this directory. If not\nspecified (the default), the path of resource file is determined according to the same\nlogic as the Java package of source files. For example, a source file at\n<code>stuff/java/foo/bar/a.txt</code> will be located at <code>foo/bar/a.txt</code>.\n</p>"
      default_value: "\"\""
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "<p>\n  <code>java_plugin</code> defines plugins for the Java compiler run by Bazel. The\n  only supported kind of plugins are annotation processors. A <code>java_library</code> or\n  <code>java_binary</code> rule can run plugins by depending on them via the <code>plugins</code>\n  attribute. A <code>java_library</code> can also automatically export plugins to libraries that\n  directly depend on it using\n  <code><a href=\"#java_library-exported_plugins\">exported_plugins</a></code>.\n</p>\n\n<h4 id=\"java_plugin_implicit_outputs\">Implicit output targets</h4>\n    <ul>\n      <li><code><var>libname</var>.jar</code>: A Java archive.</li>\n    </ul>\n\n<p>\n  Arguments are identical to <a href=\"#java_library\"><code>java_library</code></a>, except\n  for the addition of the <code>processor_class</code> argument.\n</p>"
  api_context: BUILD
}
global {
  name: "java_plugins_flag_alias"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "deprecation"
    }
    param {
      name: "distribs"
      default_value: "[]"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "licenses"
      default_value: "[none]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  api_context: BUILD
}
global {
  name: "java_proto_library"
  callable {
    param {
      name: "**kwattrs"
      is_star_star_arg: true
    }
  }
  doc: "<p>\n<code>java_proto_library</code> generates Java code from <code>.proto</code> files.\n</p>\n\n<p>\n<code>deps</code> must point to <a href=\"protocol-buffer.html#proto_library\"><code>proto_library\n</code></a> rules.\n</p>\n\n<p>\nExample:\n</p>\n\n<pre class=\"code\">\n<code class=\"lang-starlark\">\njava_library(\n    name = \"lib\",\n    runtime_deps = [\":foo_java_proto\"],\n)\n\njava_proto_library(\n    name = \"foo_java_proto\",\n    deps = [\":foo_proto\"],\n)\n\nproto_library(\n    name = \"foo_proto\",\n)\n</code>\n</pre>"
  api_context: BUILD
}
global {
  name: "java_runtime"
  callable {
    param {
      name: "srcs"
      doc: "All files in the runtime."
      default_value: "[]"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "default_cds"
      doc: "Default CDS archive for hermetic <code>java_runtime</code>. When hermetic\nis enabled for a <code>java_binary</code> target the <code>java_runtime</code>\ndefault CDS is packaged in the hermetic deploy JAR."
      default_value: "None"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "hermetic_srcs"
      doc: "Files in the runtime needed for hermetic deployments."
      default_value: "[]"
    }
    param {
      name: "hermetic_static_libs"
      doc: "The libraries that are statically linked with the launcher for hermetic deployments"
      default_value: "[]"
    }
    param {
      name: "java"
      doc: "The path to the java executable."
      default_value: "None"
    }
    param {
      name: "java_home"
      doc: "The path to the root of the runtime.\nSubject to <a href=\"/reference/be/make-variables\">\"Make\" variable</a> substitution.\nIf this path is absolute, the rule denotes a non-hermetic Java runtime with a well-known\npath. In that case, the <code>srcs</code> and <code>java</code> attributes must be empty."
      default_value: "\"\""
    }
    param {
      name: "lib_ct_sym"
      doc: "The lib/ct.sym file needed for compilation with <code>--release</code>. If not specified and\nthere is exactly one file in <code>srcs</code> whose path ends with\n<code>/lib/ct.sym</code>, that file is used."
      default_value: "None"
    }
    param {
      name: "lib_modules"
      doc: "The lib/modules file needed for hermetic deployments."
      default_value: "None"
    }
    param {
      name: "output_licenses"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "version"
      doc: "The feature version of the Java runtime. I.e., the integer returned by\n<code>Runtime.version().feature()</code>."
      default_value: "0"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "<p>\nSpecifies the configuration for a Java runtime.\n</p>\n\n<h4 id=\"java_runtime_example\">Example:</h4>\n\n<pre class=\"code\">\n<code class=\"lang-starlark\">\n\njava_runtime(\n    name = \"jdk-9-ea+153\",\n    srcs = glob([\"jdk9-ea+153/**\"]),\n    java_home = \"jdk9-ea+153\",\n)\n\n</code>\n</pre>"
  api_context: BUILD
}
global {
  name: "java_test"
  callable {
    param {
      name: "deps"
      doc: "The list of other libraries to be linked in to the target.\nSee general comments about <code>deps</code> at\n<a href=\"common-definitions.html#typical-attributes\">Typical attributes defined by\nmost build rules</a>."
      default_value: "[]"
    }
    param {
      name: "srcs"
      doc: "The list of source files that are processed to create the target.\nThis attribute is almost always required; see exceptions below.\n<p>\nSource files of type <code>.java</code> are compiled. In case of generated\n<code>.java</code> files it is generally advisable to put the generating rule\'s name\nhere instead of the name of the file itself. This not only improves readability but\nmakes the rule more resilient to future changes: if the generating rule generates\ndifferent files in the future, you only need to fix one place: the <code>outs</code> of\nthe generating rule. You should not list the generating rule in <code>deps</code>\nbecause it is a no-op.\n</p>\n<p>\nSource files of type <code>.srcjar</code> are unpacked and compiled. (This is useful if\nyou need to generate a set of <code>.java</code> files with a genrule.)\n</p>\n<p>\nRules: if the rule (typically <code>genrule</code> or <code>filegroup</code>) generates\nany of the files listed above, they will be used the same way as described for source\nfiles.\n</p>\n\n<p>\nThis argument is almost always required, except if a\n<a href=\"#java_binary.main_class\"><code>main_class</code></a> attribute specifies a\nclass on the runtime classpath or you specify the <code>runtime_deps</code> argument.\n</p>"
      default_value: "[]"
    }
    param {
      name: "data"
      doc: "The list of files needed by this library at runtime.\nSee general comments about <code>data</code>\nat <a href=\"/reference/be/common-definitions#typical-attributes\">Typical attributes defined by\nmost build rules</a>."
      default_value: "[]"
    }
    param {
      name: "resources"
      doc: "A list of data files to include in a Java jar.\n\n<p>\nResources may be source files or generated files.\n</p>\n\n<p>\nIf resources are specified, they will be bundled in the jar along with the usual\n<code>.class</code> files produced by compilation. The location of the resources inside\nof the jar file is determined by the project structure. Bazel first looks for Maven\'s\n<a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html\">standard directory layout</a>,\n(a \"src\" directory followed by a \"resources\" directory grandchild). If that is not\nfound, Bazel then looks for the topmost directory named \"java\" or \"javatests\" (so, for\nexample, if a resource is at <code>&lt;workspace root&gt;/x/java/y/java/z</code>, the\npath of the resource will be <code>y/java/z</code>. This heuristic cannot be overridden,\nhowever, the <code>resource_strip_prefix</code> attribute can be used to specify a\nspecific alternative directory for resource files."
      default_value: "[]"
    }
    param {
      name: "add_exports"
      doc: "Allow this library to access the given <code>module</code> or <code>package</code>.\n<p>\nThis corresponds to the javac and JVM --add-exports= flags."
      default_value: "[]"
    }
    param {
      name: "add_opens"
      doc: "Allow this library to reflectively access the given <code>module</code> or\n<code>package</code>.\n<p>\nThis corresponds to the javac and JVM --add-opens= flags."
      default_value: "[]"
    }
    param {
      name: "args"
      doc: "<p>List of strings; subject to\n<a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n<a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution, and\n<a href=\"#sh-tokenization\">Bourne shell tokenization</a>; default is <code>[]</code></p>\n\n<p>Command line arguments that Bazel passes to the target when it is\nexecuted with <code>bazel test</code>.\n\n<p>\nThese arguments are passed before any <code>--test_arg</code> values\nspecified on the <code>bazel test</code> command line.\n</p>\n"
    }
    param {
      name: "bootclasspath"
      doc: "Restricted API, do not use!"
      default_value: "None"
    }
    param {
      name: "classpath_resources"
      doc: "<em class=\"harmful\">DO NOT USE THIS OPTION UNLESS THERE IS NO OTHER WAY)</em>\n<p>\nA list of resources that must be located at the root of the java tree. This attribute\'s\nonly purpose is to support third-party libraries that require that their resources be\nfound on the classpath as exactly <code>\"myconfig.xml\"</code>. It is only allowed on\nbinaries and not libraries, due to the danger of namespace conflicts.\n</p>"
      default_value: "[]"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "create_executable"
      doc: "Deprecated, use <code>java_single_jar</code> instead."
      default_value: "True"
    }
    param {
      name: "deploy_manifest_lines"
      doc: "A list of lines to add to the <code>META-INF/manifest.mf</code> file generated for the\n<code>*_deploy.jar</code> target. The contents of this attribute are <em>not</em> subject\nto <a href=\"make-variables.html\">\"Make variable\"</a> substitution."
      default_value: "[]"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "env"
      doc: "<p>\n  Dictionary of strings; values are subject to\n  <a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n  <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution; default is <code>{}</code>\n</p>\n\n<p>\n  Specifies additional environment variables to set when the test is executed by\n  <code>bazel test</code>.\n</p>\n\n<p>\n  This attribute only applies to native rules, like <code>cc_test</code>,\n  <code>py_test</code>, and <code>sh_test</code>. It does not apply to\n  Starlark-defined test rules. For your own Starlark rules, you can add an \"env\"\n  attribute and use it to populate a\n\n    <a href=\"/rules/lib/toplevel/testing#TestEnvironment\">TestEnvironment</a>\n  \n  Provider.\n</p>\n"
    }
    param {
      name: "env_inherit"
      doc: "<p>List of strings; default is <code>[]</code></p>\n\n<p>Specifies additional environment variables to inherit from the\n  external environment when the test is executed by <code>bazel test</code>.\n</p>\n\n<p>\n  This attribute only applies to native rules, like <code>cc_test</code>, <code>py_test</code>,\n  and <code>sh_test</code>.  It does not apply to Starlark-defined test rules.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "flaky"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>False</code></p>\n\n<p>\nMarks test as flaky.\n</p>\n\n<p>\nIf set, executes the test up to three times, marking it as failed only if it\nfails each time. By default, this attribute is set to False and the test is\nexecuted only once. Note, that use of this attribute is generally discouraged -\ntests should pass reliably when their assertions are upheld.\n</p>\n"
    }
    param {
      name: "javacopts"
      doc: "Extra compiler options for this binary.\nSubject to <a href=\"make-variables.html\">\"Make variable\"</a> substitution and\n<a href=\"common-definitions.html#sh-tokenization\">Bourne shell tokenization</a>.\n<p>These compiler options are passed to javac after the global compiler options.</p>"
      default_value: "[]"
    }
    param {
      name: "jvm_flags"
      doc: "A list of flags to embed in the wrapper script generated for running this binary.\nSubject to <a href=\"/reference/be/make-variables#location\">$(location)</a> and\n<a href=\"make-variables.html\">\"Make variable\"</a> substitution, and\n<a href=\"common-definitions.html#sh-tokenization\">Bourne shell tokenization</a>.\n\n<p>The wrapper script for a Java binary includes a CLASSPATH definition\n(to find all the dependent jars) and invokes the right Java interpreter.\nThe command line generated by the wrapper script includes the name of\nthe main class followed by a <code>\"$@\"</code> so you can pass along other\narguments after the classname.  However, arguments intended for parsing\nby the JVM must be specified <i>before</i> the classname on the command\nline.  The contents of <code>jvm_flags</code> are added to the wrapper\nscript before the classname is listed.</p>\n\n<p>Note that this attribute has <em>no effect</em> on <code>*_deploy.jar</code>\noutputs.</p>"
      default_value: "[]"
    }
    param {
      name: "launcher"
      doc: "Specify a binary that will be used to run your Java program instead of the\nnormal <code>bin/java</code> program included with the JDK.\nThe target must be a <code>cc_binary</code>. Any <code>cc_binary</code> that\nimplements the\n<a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/invocation.html\">\nJava Invocation API</a> can be specified as a value for this attribute.\n\n<p>By default, Bazel will use the normal JDK launcher (bin/java or java.exe).</p>\n\n<p>The related <a href=\"/docs/user-manual#flag--java_launcher\"><code>\n--java_launcher</code></a> Bazel flag affects only those\n<code>java_binary</code> and <code>java_test</code> targets that have\n<i>not</i> specified a <code>launcher</code> attribute.</p>\n\n<p>Note that your native (C++, SWIG, JNI) dependencies will be built differently\ndepending on whether you are using the JDK launcher or another launcher:</p>\n\n<ul>\n<li>If you are using the normal JDK launcher (the default), native dependencies are\nbuilt as a shared library named <code>{name}_nativedeps.so</code>, where\n<code>{name}</code> is the <code>name</code> attribute of this java_binary rule.\nUnused code is <em>not</em> removed by the linker in this configuration.</li>\n\n<li>If you are using any other launcher, native (C++) dependencies are statically\nlinked into a binary named <code>{name}_nativedeps</code>, where <code>{name}</code>\nis the <code>name</code> attribute of this java_binary rule. In this case,\nthe linker will remove any code it thinks is unused from the resulting binary,\nwhich means any C++ code accessed only via JNI may not be linked in unless\nthat <code>cc_library</code> target specifies <code>alwayslink = True</code>.</li>\n</ul>\n\n<p>When using any launcher other than the default JDK launcher, the format\nof the <code>*_deploy.jar</code> output changes. See the main\n<a href=\"#java_binary\">java_binary</a> docs for details.</p>"
      default_value: "None"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "local"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>False</code></p>\n\n<p>Forces the test to be run locally, without sandboxing.</p>\n\n<p>Setting this to True is equivalent to providing \"local\" as a tag\n(<code>tags=[\"local\"]</code>).</p>\n"
    }
    param {
      name: "main_class"
      doc: "Name of class with <code>main()</code> method to use as entry point.\nIf a rule uses this option, it does not need a <code>srcs=[...]</code> list.\nThus, with this attribute one can make an executable from a Java library that already\ncontains one or more <code>main()</code> methods.\n<p>\nThe value of this attribute is a class name, not a source file. The class must be\navailable at runtime: it may be compiled by this rule (from <code>srcs</code>) or\nprovided by direct or transitive dependencies (through <code>runtime_deps</code> or\n<code>deps</code>). If the class is unavailable, the binary will fail at runtime; there\nis no build-time check.\n</p>"
      default_value: "\"\""
    }
    param {
      name: "neverlink"
      default_value: "False"
    }
    param {
      name: "plugins"
      doc: "Java compiler plugins to run at compile-time.\nEvery <code>java_plugin</code> specified in this attribute will be run whenever this rule\nis built. A library may also inherit plugins from dependencies that use\n<code><a href=\"#java_library.exported_plugins\">exported_plugins</a></code>. Resources\ngenerated by the plugin will be included in the resulting jar of this rule."
      default_value: "[]"
    }
    param {
      name: "resource_strip_prefix"
      doc: "The path prefix to strip from Java resources.\n<p>\nIf specified, this path prefix is stripped from every file in the <code>resources</code>\nattribute. It is an error for a resource file not to be under this directory. If not\nspecified (the default), the path of resource file is determined according to the same\nlogic as the Java package of source files. For example, a source file at\n<code>stuff/java/foo/bar/a.txt</code> will be located at <code>foo/bar/a.txt</code>.\n</p>"
      default_value: "\"\""
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "runtime_deps"
      doc: "Libraries to make available to the final binary or test at runtime only.\nLike ordinary <code>deps</code>, these will appear on the runtime classpath, but unlike\nthem, not on the compile-time classpath. Dependencies needed only at runtime should be\nlisted here. Dependency-analysis tools should ignore targets that appear in both\n<code>runtime_deps</code> and <code>deps</code>."
      default_value: "[]"
    }
    param {
      name: "shard_count"
      doc: "<p>Non-negative integer less than or equal to 50; default is <code>-1</code></p>\n\n<p>Specifies the number of parallel shards\nto use to run the test.</p>\n\n<p>If set, this value will override any heuristics used to determine the number of\nparallel shards with which to run the test. Note that for some test\nrules, this parameter may be required to enable sharding\nin the first place. Also see <code>--test_sharding_strategy</code>.</p>\n\n<p>If test sharding is enabled, the environment variable <code>\n<a href=\"/reference/test-encyclopedia#initial-conditions\">TEST_TOTAL_SHARDS</a>\n</code> will be set to this value when spawning the test.</p>\n\n<p>Sharding requires the test runner to support the test sharding protocol.\nIf it does not, then it will most likely run every test in every shard, which\nis not what you want.</p>\n\n<p>See\n<a href=\"/reference/test-encyclopedia#test-sharding\">Test Sharding</a>\nin the Test Encyclopedia for details on sharding.</p>\n"
    }
    param {
      name: "size"
      doc: "<p>String <code>\"enormous\"</code>, <code>\"large\"</code>, <code>\"medium\"</code>, or\n  <code>\"small\"</code>; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>\"medium\"</code></p>\n\n<p>Specifies a test target\'s \"heaviness\": how much time/resources it needs to run.</p>\n\n<p>Unit tests are considered \"small\", integration tests \"medium\", and end-to-end tests \"large\" or\n\"enormous\". Bazel uses the size to determine a default timeout, which can be overridden using the\n<code>timeout</code> attribute. The timeout is for all tests in the BUILD target, not for each\nindividual test. When the test is run locally, the <code>size</code> is additionally used for\nscheduling purposes: Bazel tries to respect <code>--local_{ram,cpu}_resources</code> and not\noverwhelm the local machine by running lots of heavy tests at the same time.</p>\n\n<p>Test sizes correspond to the following default timeouts and assumed peak local resource\nusages:</p>\n\n<table style=\"width: 100%\">\n  <tr>\n    <th>Size</th>\n    <th>RAM (in MB)</th>\n    <th>CPU (in CPU cores)</th>\n    <th>Default timeout</th>\n  </tr>\n  <tr>\n    <td>small</td>\n    <td>20</td>\n    <td>1</td>\n    <td>short (1 minute)</td>\n  </tr>\n  <tr>\n    <td>medium</td>\n    <td>100</td>\n    <td>1</td>\n    <td>moderate (5 minutes)</td>\n  </tr>\n  <tr>\n    <td>large</td>\n    <td>300</td>\n    <td>1</td>\n    <td>long (15 minutes)</td>\n  </tr>\n  <tr>\n    <td>enormous</td>\n    <td>800</td>\n    <td>1</td>\n    <td>eternal (60 minutes)</td>\n  </tr>\n</table>\n\n<p>\n  The environment variable\n  <code><a href=\"/reference/test-encyclopedia#initial-conditions\">TEST_SIZE</a></code> will be set to\n  the value of this attribute when spawning the test.\n</p>\n\n"
    }
    param {
      name: "stamp"
      doc: "Whether to encode build information into the binary. Possible values:\n<ul>\n<li>\n  <code>stamp = 1</code>: Always stamp the build information into the binary, even in\n  <a href=\"https://bazel.build/docs/user-manual#stamp\"><code>--nostamp</code></a> builds. <b>This\n  setting should be avoided</b>, since it potentially kills remote caching for the\n  binary and any downstream actions that depend on it.\n</li>\n<li>\n  <code>stamp = 0</code>: Always replace build information by constant values. This\n  gives good build result caching.\n</li>\n<li>\n  <code>stamp = -1</code>: Embedding of build information is controlled by the\n  <a href=\"https://bazel.build/docs/user-manual#stamp\"><code>--[no]stamp</code></a> flag.\n</li>\n</ul>\n<p>Stamped binaries are <em>not</em> rebuilt unless their dependencies change.</p>"
      default_value: "0"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "test_class"
      doc: "The Java class to be loaded by the test runner.<br/>\n<p>\n  By default, if this argument is not defined then the legacy mode is used and the\n  test arguments are used instead. Set the <code>--nolegacy_bazel_java_test</code> flag\n  to not fallback on the first argument.\n</p>\n<p>\n  This attribute specifies the name of a Java class to be run by\n  this test. It is rare to need to set this. If this argument is omitted,\n  it will be inferred using the target\'s <code>name</code> and its\n  source-root-relative path. If the test is located outside a known\n  source root, Bazel will report an error if <code>test_class</code>\n  is unset.\n</p>\n<p>\n  For JUnit3, the test class needs to either be a subclass of\n  <code>junit.framework.TestCase</code> or it needs to have a public\n  static <code>suite()</code> method that returns a\n  <code>junit.framework.Test</code> (or a subclass of <code>Test</code>).\n  For JUnit4, the class needs to be annotated with\n  <code>org.junit.runner.RunWith</code>.\n</p>\n<p>\n  This attribute allows several <code>java_test</code> rules to\n  share the same <code>Test</code>\n  (<code>TestCase</code>, <code>TestSuite</code>, ...).  Typically\n  additional information is passed to it\n  (e.g. via <code>jvm_flags=[\'-Dkey=value\']</code>) so that its\n  behavior differs in each case, such as running a different\n  subset of the tests.  This attribute also enables the use of\n  Java tests outside the <code>javatests</code> tree.\n</p>"
      default_value: "\"\""
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "timeout"
      doc: "<p>String <code>\"short\"</code>, <code>\"moderate\"</code>, <code>\"long\"</code>, or\n  <code>\"eternal\"</code>; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is derived\n  from the test\'s <code>size</code> attribute</code></p>\n\n<p>\nHow long the test is expected to run before returning.\n</p>\n\n<p>\nWhile a test\'s size attribute controls resource estimation, a test\'s\ntimeout may be set independently.  If not explicitly specified, the\ntimeout is based on the <a href=\"#test.size\">test\'s size</a>. The test\ntimeout can be overridden with the <code>--test_timeout</code> flag, e.g. for\nrunning under certain conditions which are known to be slow. Test timeout values\ncorrespond to the following time periods:\n</p>\n\n<table style=\"width: 100%\">\n  <tr>\n    <th>Timeout Value</th>\n    <th>Time Period</th>\n  </tr>\n  <tr>\n    <td>short</td>\n    <td>1 minute</td>\n  </tr>\n  <tr>\n    <td>moderate</td>\n    <td>5 minutes</td>\n  </tr>\n  <tr>\n    <td>long</td>\n    <td>15 minutes</td>\n  </tr>\n  <tr>\n    <td>eternal</td>\n    <td>60 minutes</td>\n  </tr>\n</table>\n\n<p>\nFor times other than the above, the test timeout can be overridden with the\n<code>--test_timeout</code> bazel flag, e.g. for manually running under\nconditions which are known to be slow. The <code>--test_timeout</code> values\nare in seconds. For example <code>--test_timeout=120</code> will set the test\ntimeout to two minutes.\n</p>\n\n<p>\n  The environment variable\n  <code><a href=\"/reference/test-encyclopedia#initial-conditions\">TEST_TIMEOUT</a></code> will be set\n  to the test timeout (in seconds) when spawning the test.\n</p>\n\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "use_launcher"
      doc: "Whether the binary should use a custom launcher.\n\n<p>If this attribute is set to false, the\n<a href=\"/reference/be/java.html#java_binary.launcher\">launcher</a> attribute  and the related\n<a href=\"/docs/user-manual#flag--java_launcher\"><code>--java_launcher</code></a> flag\nwill be ignored for this target."
      default_value: "True"
    }
    param {
      name: "use_testrunner"
      doc: "Use the test runner (by default\n<code>com.google.testing.junit.runner.BazelTestRunner</code>) class as the\nmain entry point for a Java program, and provide the test class\nto the test runner as a value of <code>bazel.test_suite</code>\nsystem property.\n\n<br/>\nYou can use this to override the default\nbehavior, which is to use test runner for\n<code>java_test</code> rules,\nand not use it for <code>java_binary</code> rules.  It is unlikely\nyou will want to do this.  One use is for <code>AllTest</code>\nrules that are invoked by another rule (to set up a database\nbefore running the tests, for example).  The <code>AllTest</code>\nrule must be declared as a <code>java_binary</code>, but should\nstill use the test runner as its main entry point.\n\nThe name of a test runner class can be overridden with <code>main_class</code> attribute."
      default_value: "True"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "<p>\nA <code>java_test()</code> rule compiles a Java test. A test is a binary wrapper around your\ntest code. The test runner\'s main method is invoked instead of the main class being compiled.\n</p>\n\n<h4 id=\"java_test_implicit_outputs\">Implicit output targets</h4>\n<ul>\n  <li><code><var>name</var>.jar</code>: A Java archive.</li>\n  <li><code><var>name</var>_deploy.jar</code>: A Java archive suitable\n    for deployment. (Only built if explicitly requested.) See the description of the\n    <code><var>name</var>_deploy.jar</code> output from\n    <a href=\"#java_binary\">java_binary</a> for more details.</li>\n</ul>\n\n<p>\nSee the section on <code>java_binary()</code> arguments. This rule also\nsupports all <a href=\"https://bazel.build/reference/be/common-definitions#common-attributes-tests\">attributes common\nto all test rules (*_test)</a>.\n</p>\n\n<h4 id=\"java_test_examples\">Examples</h4>\n\n<pre class=\"code\">\n<code class=\"lang-starlark\">\n\njava_library(\n    name = \"tests\",\n    srcs = glob([\"*.java\"]),\n    deps = [\n        \"//java/com/foo/base:testResources\",\n        \"//java/com/foo/testing/util\",\n    ],\n)\n\njava_test(\n    name = \"AllTests\",\n    size = \"small\",\n    runtime_deps = [\n        \":tests\",\n        \"//util/mysql\",\n    ],\n)\n</code>\n</pre>"
  api_context: BUILD
}
global {
  name: "java_toolchain"
  callable {
    param {
      name: "android_lint_data"
      doc: "Labels of tools available for label-expansion in android_lint_jvm_opts."
      default_value: "[]"
    }
    param {
      name: "android_lint_jvm_opts"
      doc: "The list of arguments for the JVM when invoking Android Lint."
      default_value: "[]"
    }
    param {
      name: "android_lint_opts"
      doc: "The list of Android Lint arguments."
      default_value: "[]"
    }
    param {
      name: "android_lint_package_configuration"
      doc: "Android Lint Configuration that should be applied to the specified package groups."
      default_value: "[]"
    }
    param {
      name: "android_lint_runner"
      doc: "Label of the Android Lint runner, if any."
      default_value: "None"
    }
    param {
      name: "bootclasspath"
      doc: "The Java target bootclasspath entries. Corresponds to javac\'s -bootclasspath flag."
      default_value: "[]"
    }
    param {
      name: "compatible_javacopts"
      doc: "Internal API, do not use!"
      default_value: "{}"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "deps_checker"
      doc: "Label of the ImportDepsChecker deploy jar."
      default_value: "None"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "forcibly_disable_header_compilation"
      doc: "Overrides --java_header_compilation to disable header compilation on platforms that do not\nsupport it, e.g. JDK 7 Bazel."
      default_value: "False"
    }
    param {
      name: "genclass"
      doc: "Label of the GenClass deploy jar."
      default_value: "None"
    }
    param {
      name: "header_compiler"
      doc: "Label of the header compiler. Required if --java_header_compilation is enabled."
      default_value: "None"
    }
    param {
      name: "header_compiler_builtin_processors"
      doc: "Internal API, do not use!"
      default_value: "[]"
    }
    param {
      name: "header_compiler_direct"
      doc: "Optional label of the header compiler to use for direct classpath actions that do not\ninclude any API-generating annotation processors.\n\n<p>This tool does not support annotation processing."
      default_value: "None"
    }
    param {
      name: "ijar"
      doc: "Label of the ijar executable."
      default_value: "None"
    }
    param {
      name: "jacocorunner"
      doc: "Label of the JacocoCoverageRunner deploy jar."
      default_value: "None"
    }
    param {
      name: "java_runtime"
      doc: "The java_runtime to use with this toolchain. It defaults to java_runtime\nin execution configuration."
      default_value: "None"
    }
    param {
      name: "javabuilder"
      doc: "Label of the JavaBuilder deploy jar."
      default_value: "None"
    }
    param {
      name: "javabuilder_data"
      doc: "Labels of data available for label-expansion in javabuilder_jvm_opts."
      default_value: "[]"
    }
    param {
      name: "javabuilder_jvm_opts"
      doc: "The list of arguments for the JVM when invoking JavaBuilder."
      default_value: "[]"
    }
    param {
      name: "javac_supports_multiplex_workers"
      doc: "True if JavaBuilder supports running as a multiplex persistent worker, false if it doesn\'t."
      default_value: "True"
    }
    param {
      name: "javac_supports_worker_cancellation"
      doc: "True if JavaBuilder supports cancellation of persistent workers, false if it doesn\'t."
      default_value: "True"
    }
    param {
      name: "javac_supports_worker_multiplex_sandboxing"
      doc: "True if JavaBuilder supports running as a multiplex persistent worker with sandboxing, false if it doesn\'t."
      default_value: "False"
    }
    param {
      name: "javac_supports_workers"
      doc: "True if JavaBuilder supports running as a persistent worker, false if it doesn\'t."
      default_value: "True"
    }
    param {
      name: "javacopts"
      doc: "The list of extra arguments for the Java compiler. Please refer to the Java compiler\ndocumentation for the extensive list of possible Java compiler flags."
      default_value: "[]"
    }
    param {
      name: "jspecify_implicit_deps"
      doc: "Experimental, do not use!"
      default_value: "None"
    }
    param {
      name: "jspecify_javacopts"
      doc: "Experimental, do not use!"
      default_value: "[]"
    }
    param {
      name: "jspecify_packages"
      doc: "Experimental, do not use!"
      default_value: "[]"
    }
    param {
      name: "jspecify_processor"
      doc: "Experimental, do not use!"
      default_value: "None"
    }
    param {
      name: "jspecify_processor_class"
      doc: "Experimental, do not use!"
      default_value: "\"\""
    }
    param {
      name: "jspecify_stubs"
      doc: "Experimental, do not use!"
      default_value: "[]"
    }
    param {
      name: "jvm_opts"
      doc: "The list of arguments for the JVM when invoking the Java compiler. Please refer to the Java\nvirtual machine documentation for the extensive list of possible flags for this option."
      default_value: "[]"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "misc"
      doc: "Deprecated: use javacopts instead"
      default_value: "[]"
    }
    param {
      name: "oneversion"
      doc: "Label of the one-version enforcement binary."
      default_value: "None"
    }
    param {
      name: "oneversion_allowlist"
      doc: "Label of the one-version allowlist."
      default_value: "None"
    }
    param {
      name: "oneversion_allowlist_for_tests"
      doc: "Label of the one-version allowlist for tests."
      default_value: "None"
    }
    param {
      name: "oneversion_whitelist"
      doc: "Deprecated: use oneversion_allowlist instead"
      default_value: "None"
    }
    param {
      name: "package_configuration"
      doc: "Configuration that should be applied to the specified package groups."
      default_value: "[]"
    }
    param {
      name: "proguard_allowlister"
      doc: "Label of the Proguard allowlister."
      default_value: "\"@bazel_tools//tools/jdk:proguard_whitelister\""
    }
    param {
      name: "reduced_classpath_incompatible_processors"
      doc: "Internal API, do not use!"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "singlejar"
      doc: "Label of the SingleJar deploy jar."
      default_value: "None"
    }
    param {
      name: "source_version"
      doc: "The Java source version (e.g., \'6\' or \'7\'). It specifies which set of code structures\nare allowed in the Java source code."
      default_value: "\"\""
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "target_version"
      doc: "The Java target version (e.g., \'6\' or \'7\'). It specifies for which Java runtime the class\nshould be build."
      default_value: "\"\""
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "timezone_data"
      doc: "Label of a resource jar containing timezone data. If set, the timezone data is added as an\nimplicitly runtime dependency of all java_binary rules."
      default_value: "None"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "tools"
      doc: "Labels of tools available for label-expansion in jvm_opts."
      default_value: "[]"
    }
    param {
      name: "turbine_data"
      doc: "Labels of data available for label-expansion in turbine_jvm_opts."
      default_value: "[]"
    }
    param {
      name: "turbine_jvm_opts"
      doc: "The list of arguments for the JVM when invoking turbine."
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
    param {
      name: "xlint"
      doc: "The list of warning to add or removes from default list. Precedes it with a dash to\nremoves it. Please see the Javac documentation on the -Xlint options for more information."
      default_value: "[]"
    }
  }
  doc: "<p>\nSpecifies the configuration for the Java compiler. Which toolchain to be used can be changed through\nthe --java_toolchain argument. Normally you should not write those kind of rules unless you want to\ntune your Java compiler.\n</p>\n\n<h4>Examples</h4>\n\n<p>A simple example would be:\n</p>\n\n<pre class=\"code\">\n<code class=\"lang-starlark\">\n\njava_toolchain(\n    name = \"toolchain\",\n    source_version = \"7\",\n    target_version = \"7\",\n    bootclasspath = [\"//tools/jdk:bootclasspath\"],\n    xlint = [ \"classfile\", \"divzero\", \"empty\", \"options\", \"path\" ],\n    javacopts = [ \"-g\" ],\n    javabuilder = \":JavaBuilder_deploy.jar\",\n)\n</code>\n</pre>"
  api_context: BUILD
}
global {
  name: "json"
  doc: "Module json is a Starlark module of JSON-related functions."
  api_context: BUILD
  global_variable {
    name: "decode"
    callable {
      param {
        name: "x"
        doc: "JSON string to decode."
        is_mandatory: true
      }
      param {
        name: "default"
        doc: "If specified, the value to return when <code>x</code> cannot be decoded."
        default_value: "unbound"
      }
    }
    doc: "The decode function has one required positional parameter: a JSON string.\nIt returns the Starlark value that the string denotes.\n<ul><li><code>\"null\"</code>, <code>\"true\"</code> and <code>\"false\"</code> are parsed as <code>None</code>, <code>True</code>, and <code>False</code>.\n<li>Numbers are parsed as int, or as a float if they contain a decimal point or an exponent. Although JSON has no syntax  for non-finite values, very large values may be decoded as infinity.\n<li>a JSON object is parsed as a new unfrozen Starlark dict. If the same key string occurs more than once in the object, the last value for the key is kept.\n<li>a JSON array is parsed as new unfrozen Starlark list.\n</ul>\nIf <code>x</code> is not a valid JSON encoding and the optional <code>default</code> parameter is specified (including specified as <code>None</code>), this function returns the <code>default</code> value.\nIf <code>x</code> is not a valid JSON encoding and the optional <code>default</code> parameter is <em>not</em> specified, this function fails."
    api_context: BUILD
  }
  global_variable {
    name: "encode"
    callable {
      param {
        name: "x"
        is_mandatory: true
      }
    }
    doc: "<p>The encode function accepts one required positional argument, which it converts to JSON by cases:\n<ul>\n<li>None, True, and False are converted to \'null\', \'true\', and \'false\', respectively.\n<li>An int, no matter how large, is encoded as a decimal integer. Some decoders may not be able to decode very large integers.\n<li>A float is encoded using a decimal point or an exponent or both, even if its numeric value is an integer. It is an error to encode a non-finite  floating-point value.\n<li>A string value is encoded as a JSON string literal that denotes the value.  Each unpaired surrogate is replaced by U+FFFD.\n<li>A dict is encoded as a JSON object, in key order.  It is an error if any key is not a string.\n<li>A list or tuple is encoded as a JSON array.\n<li>A struct-like value is encoded as a JSON object, in field name order.\n</ul>\nAn application-defined type may define its own JSON encoding.\nEncoding any other value yields an error.\n"
    api_context: BUILD
  }
  global_variable {
    name: "encodeIndent"
    callable {
      param {
        name: "x"
        is_mandatory: true
      }
      param {
        name: "prefix"
        default_value: "\'\'"
      }
      param {
        name: "indent"
        default_value: "\'\\t\'"
      }
    }
    doc: "The encode_indent function is equivalent to <code>json.indent(json.encode(x), ...)</code>. See <code>indent</code> for description of formatting parameters."
    api_context: BUILD
  }
  global_variable {
    name: "indent"
    callable {
      param {
        name: "s"
        is_mandatory: true
      }
      param {
        name: "prefix"
        default_value: "\'\'"
      }
      param {
        name: "indent"
        default_value: "\'\\t\'"
      }
    }
    doc: "The indent function returns the indented form of a valid JSON-encoded string.\nEach array element or object field appears on a new line, beginning with the prefix string followed by one or more copies of the indent string, according to its nesting depth.\nThe function accepts one required positional parameter, the JSON string,\nand two optional keyword-only string parameters, prefix and indent,\nthat specify a prefix of each new line, and the unit of indentation.\nIf the input is not valid, the function may fail or return invalid output.\n"
    api_context: BUILD
  }
}
global {
  name: "label_flag"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "build_setting_default"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "deprecation"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "help"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "scope"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  api_context: BUILD
}
global {
  name: "label_setting"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "build_setting_default"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "deprecation"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "help"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "scope"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  api_context: BUILD
}
global {
  name: "licenses"
  callable {
    param {
      name: "license_strings"
      doc: "A list of strings, the names of the licenses used."
      is_mandatory: true
    }
  }
  doc: "Declare the license(s) for the code in the current package."
  api_context: BUILD
}
global {
  name: "memprof_profile"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "deprecation"
    }
    param {
      name: "exec_compatible_with"
      default_value: "[]"
    }
    param {
      name: "exec_properties"
      default_value: "{}"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "profile"
      doc: "Label of the MEMPROF profile. The profile is expected to have\neither a .profdata extension (for an indexed/symbolized memprof\nprofile), or a .zip extension for a zipfile containing a memprof.profdata\nfile.\nThe label can also point to an fdo_absolute_path_profile rule."
      is_mandatory: true
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "toolchains"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  doc: "<p>Represents a MEMPROF profile that is in the workspace.\nExample:</p>\n\n<pre><code class=\"lang-starlark\">\nmemprof_profile(\n    name = \"memprof\",\n    profile = \"//path/to/memprof:profile.afdo\",\n)\n\n</code></pre>"
  api_context: BUILD
}
global {
  name: "module_name"
  callable {
  }
  doc: "The name of the Bazel module associated with the repo this package is in. If this package is from a repo defined in WORKSPACE instead of MODULE.bazel, this is empty. For repos generated by module extensions, this is the name of the module hosting the extension. It\'s the same as the <code>module.name</code> field seen in <code>module_ctx.modules</code>."
  api_context: BUILD
}
global {
  name: "module_version"
  callable {
  }
  doc: "The version of the Bazel module associated with the repo this package is in. If this package is from a repo defined in WORKSPACE instead of MODULE.bazel, this is empty. For repos generated by module extensions, this is the version of the module hosting the extension. It\'s the same as the <code>module.version</code> field seen in <code>module_ctx.modules</code>."
  api_context: BUILD
}
global {
  name: "objc_import"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deps"
      doc: "<a name=\"common.deps\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nDependencies for this target. Generally should only list rule targets. (Though\nsome rules permit files to be listed directly in <code>deps</code>, this\nshould be avoided when possible.)\n</p>\n\n<p>\nLanguage-specific rules generally limit the listed targets to those with\nspecific <a href=\"https://bazel.build/extending/rules#providers\">providers</a>.</p>\n\n<p>\nThe precise semantics of what it means for a target to depend on another using\n<code>deps</code> are specific to the kind of rule, and the rule-specific\ndocumentation goes into more detail. For rules which process source code,\n<code>deps</code> generally specifies code dependencies used by the code in\n<a href=\"#typical.srcs\"><code>srcs</code></a>.\n</p>\n\n<p>\nMost often, a <code>deps</code> dependency is used to allow one module to use\nsymbols defined in another module written in the same programming language and\nseparately compiled.  Cross-language dependencies are also permitted in many\ncases: For example, a <code>java_library</code> target may depend on C++ code\nin a <code>cc_library</code> target, by listing the latter in the\n<code>deps</code> attribute.  See the definition of\n<a href=\"/concepts/build-ref#deps\">dependencies</a>\nfor more information.\n</p>\n"
    }
    param {
      name: "hdrs"
      doc: "The list of C, C++, Objective-C, and Objective-C++ header files published\nby this library to be included by sources in dependent rules.\n<p>\nThese headers describe the public interface for the library and will be\nmade available for inclusion by sources in this rule or in dependent\nrules. Headers not meant to be included by a client of this library\nshould be listed in the srcs attribute instead.\n<p>\nThese will be compiled separately from the source if modules are enabled."
      default_value: "[]"
    }
    param {
      name: "alwayslink"
      doc: "If 1, any bundle or binary that depends (directly or indirectly) on this\nlibrary will link in all the object files for the files listed in\n<code>srcs</code> and <code>non_arc_srcs</code>, even if some contain no\nsymbols referenced by the binary.\nThis is useful if your code isn\'t explicitly called by code in\nthe binary, e.g., if your code registers to receive some callback\nprovided by some service."
      default_value: "false"
    }
    param {
      name: "archives"
      doc: "The list of <code>.a</code> files provided to Objective-C targets that\ndepend on this target."
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "includes"
      doc: "List of <code>#include/#import</code> search paths to add to this target\nand all depending targets.\n\nThis is to support third party and open-sourced libraries that do not\nspecify the entire workspace path in their\n<code>#import/#include</code> statements.\n<p>\nThe paths are interpreted relative to the package directory, and the\ngenfiles and bin roots (e.g. <code>blaze-genfiles/pkg/includedir</code>\nand <code>blaze-out/pkg/includedir</code>) are included in addition to the\nactual client root.\n<p>\nUnlike <a href=\"/reference/be/objective-c.html#objc_library.copts\">COPTS</a>, these flags are added for this rule\nand every rule that depends on it. (Note: not the rules it depends upon!) Be\nvery careful, since this may have far-reaching effects.  When in doubt, add\n\"-iquote\" flags to <a href=\"/reference/be/objective-c.html#objc_library.copts\">COPTS</a> instead."
      default_value: "[]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "sdk_dylibs"
      doc: "Names of SDK .dylib libraries to link with. For instance, \"libz\" or\n\"libarchive\".\n\n\"libc++\" is included automatically if the binary has any C++ or\nObjective-C++ sources in its dependency tree. When linking a binary,\nall libraries named in that binary\'s transitive dependency graph are\nused."
      default_value: "[]"
    }
    param {
      name: "sdk_frameworks"
      doc: "Names of SDK frameworks to link with (e.g. \"AddressBook\", \"QuartzCore\").\n\n<p> When linking a top level Apple binary, all SDK frameworks listed in that binary\'s\ntransitive dependency graph are linked."
      default_value: "[]"
    }
    param {
      name: "sdk_includes"
      doc: "List of <code>#include/#import</code> search paths to add to this target\nand all depending targets, where each path is relative to\n<code>$(SDKROOT)/usr/include</code>."
      default_value: "[]"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "textual_hdrs"
      doc: "The list of C, C++, Objective-C, and Objective-C++ files that are\nincluded as headers by source files in this rule or by users of this\nlibrary. Unlike hdrs, these will not be compiled separately from the\nsources."
      default_value: "[]"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
    param {
      name: "weak_sdk_frameworks"
      doc: "Names of SDK frameworks to weakly link with. For instance,\n\"MediaAccessibility\".\n\nIn difference to regularly linked SDK frameworks, symbols\nfrom weakly linked frameworks do not cause an error if they\nare not present at runtime."
      default_value: "[]"
    }
  }
  doc: "<p>This rule encapsulates an already-compiled static library in the form of an\n<code>.a</code> file. It also allows exporting headers and resources using the same\nattributes supported by <code>objc_library</code>.</p>"
  api_context: BUILD
}
global {
  name: "objc_library"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deps"
      doc: "<a name=\"common.deps\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nDependencies for this target. Generally should only list rule targets. (Though\nsome rules permit files to be listed directly in <code>deps</code>, this\nshould be avoided when possible.)\n</p>\n\n<p>\nLanguage-specific rules generally limit the listed targets to those with\nspecific <a href=\"https://bazel.build/extending/rules#providers\">providers</a>.</p>\n\n<p>\nThe precise semantics of what it means for a target to depend on another using\n<code>deps</code> are specific to the kind of rule, and the rule-specific\ndocumentation goes into more detail. For rules which process source code,\n<code>deps</code> generally specifies code dependencies used by the code in\n<a href=\"#typical.srcs\"><code>srcs</code></a>.\n</p>\n\n<p>\nMost often, a <code>deps</code> dependency is used to allow one module to use\nsymbols defined in another module written in the same programming language and\nseparately compiled.  Cross-language dependencies are also permitted in many\ncases: For example, a <code>java_library</code> target may depend on C++ code\nin a <code>cc_library</code> target, by listing the latter in the\n<code>deps</code> attribute.  See the definition of\n<a href=\"/concepts/build-ref#deps\">dependencies</a>\nfor more information.\n</p>\n"
    }
    param {
      name: "srcs"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nFiles processed or included by this rule. Generally lists files directly, but\nmay list rule targets (like <code>filegroup</code> or <code>genrule</code>) to\ninclude their default outputs.\n</p>\n\n<p>\nLanguage-specific rules often require that the listed files have particular\nfile extensions.\n</p>\n"
    }
    param {
      name: "data"
      doc: "<a name=\"common.data\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nFiles needed by this rule at runtime. May list file or rule targets. Generally\nallows any target.\n</p>\n\n<p>\nThe default outputs and runfiles of targets in the <code>data</code> attribute\nshould appear in the <code>*.runfiles</code> area of any executable which is\noutput by or has a runtime dependency on this target. This may include data\nfiles or binaries used when this target\'s\n<a href=\"#typical.srcs\"><code>srcs</code></a> are executed. See the\n<a href=\"/concepts/dependencies#data-dependencies\">data dependencies</a>\nsection for more information about how to depend on and use data files.\n</p>\n\n<p>\nNew rules should define a <code>data</code> attribute if they process\ninputs which might use other inputs at runtime. Rules\' implementation functions\nmust also <a href=\"https://bazel.build/rules/rules#runfiles\">populate the target\'s\nrunfiles</a> from the outputs and runfiles of any <code>data</code> attribute,\nas well as runfiles from any dependency attribute which provides either\nsource code or runtime dependencies.\n</p>\n"
    }
    param {
      name: "hdrs"
      doc: "The list of C, C++, Objective-C, and Objective-C++ header files published\nby this library to be included by sources in dependent rules.\n<p>\nThese headers describe the public interface for the library and will be\nmade available for inclusion by sources in this rule or in dependent\nrules. Headers not meant to be included by a client of this library\nshould be listed in the srcs attribute instead.\n<p>\nThese will be compiled separately from the source if modules are enabled."
      default_value: "[]"
    }
    param {
      name: "alwayslink"
      doc: "If 1, any bundle or binary that depends (directly or indirectly) on this\nlibrary will link in all the object files for the files listed in\n<code>srcs</code> and <code>non_arc_srcs</code>, even if some contain no\nsymbols referenced by the binary.\nThis is useful if your code isn\'t explicitly called by code in\nthe binary, e.g., if your code registers to receive some callback\nprovided by some service."
      default_value: "false"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "conlyopts"
      doc: "Extra flags to pass to the compiler for C files.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>.\nThese flags will only apply to this target, and not those upon which\nit depends, or those which depend on it.\n<p>\nNote that for the generated Xcode project, directory paths specified using \"-I\" flags in\ncopts are parsed out, prepended with \"$(WORKSPACE_ROOT)/\" if they are relative paths, and\nadded to the header search paths for the associated Xcode target."
      default_value: "[]"
    }
    param {
      name: "copts"
      doc: "Extra flags to pass to the compiler.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>.\nThese flags will only apply to this target, and not those upon which\nit depends, or those which depend on it.\n<p>\nNote that for the generated Xcode project, directory paths specified using \"-I\" flags in\ncopts are parsed out, prepended with \"$(WORKSPACE_ROOT)/\" if they are relative paths, and\nadded to the header search paths for the associated Xcode target."
      default_value: "[]"
    }
    param {
      name: "cxxopts"
      doc: "Extra flags to pass to the compiler for Objective-C++ and C++ files.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>.\nThese flags will only apply to this target, and not those upon which\nit depends, or those which depend on it.\n<p>\nNote that for the generated Xcode project, directory paths specified using \"-I\" flags in\ncopts are parsed out, prepended with \"$(WORKSPACE_ROOT)/\" if they are relative paths, and\nadded to the header search paths for the associated Xcode target."
      default_value: "[]"
    }
    param {
      name: "defines"
      doc: "Extra <code>-D</code> flags to pass to the compiler. They should be in\nthe form <code>KEY=VALUE</code> or simply <code>KEY</code> and are\npassed not only to the compiler for this target (as <code>copts</code>\nare) but also to all <code>objc_</code> dependers of this target.\nSubject to <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution and\n<a href=\"/reference/be/common-definitions#sh-tokenization\">Bourne shell tokenization</a>."
      default_value: "[]"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "enable_modules"
      doc: "Enables clang module support (via -fmodules).\nSetting this to 1 will allow you to @import system headers and other targets:\n@import UIKit;\n@import path_to_package_target;"
      default_value: "false"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "implementation_deps"
      doc: "The list of other libraries that the library target depends on. Unlike with\n<code>deps</code>, the headers and include paths of these libraries (and all their\ntransitive deps) are only used for compilation of this library, and not libraries that\ndepend on it. Libraries specified with <code>implementation_deps</code> are still linked\nin binary targets that depend on this library."
      default_value: "[]"
    }
    param {
      name: "includes"
      doc: "List of <code>#include/#import</code> search paths to add to this target\nand all depending targets.\n\nThis is to support third party and open-sourced libraries that do not\nspecify the entire workspace path in their\n<code>#import/#include</code> statements.\n<p>\nThe paths are interpreted relative to the package directory, and the\ngenfiles and bin roots (e.g. <code>blaze-genfiles/pkg/includedir</code>\nand <code>blaze-out/pkg/includedir</code>) are included in addition to the\nactual client root.\n<p>\nUnlike <a href=\"/reference/be/objective-c.html#objc_library.copts\">COPTS</a>, these flags are added for this rule\nand every rule that depends on it. (Note: not the rules it depends upon!) Be\nvery careful, since this may have far-reaching effects.  When in doubt, add\n\"-iquote\" flags to <a href=\"/reference/be/objective-c.html#objc_library.copts\">COPTS</a> instead."
      default_value: "[]"
    }
    param {
      name: "linkopts"
      doc: "Extra flags to pass to the linker."
      default_value: "[]"
    }
    param {
      name: "module_map"
      doc: "custom Clang module map for this target. Use of a custom module map is discouraged. Most\nusers should use module maps generated by Bazel.\nIf specified, Bazel will not generate a module map for this target, but will pass the\nprovided module map to the compiler."
      is_mandatory: true
    }
    param {
      name: "module_name"
      doc: "Sets the module name for this target. By default the module name is the target path with\nall special symbols replaced by _, e.g. //foo/baz:bar can be imported as foo_baz_bar."
    }
    param {
      name: "non_arc_srcs"
      doc: "The list of Objective-C files that are processed to create the\nlibrary target that DO NOT use Automatic Reference Counting (ARC).\nThe files in this attribute are treated very similar to those in the\nsrcs attribute, but are compiled without ARC enabled."
      default_value: "[]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "pch"
      doc: "Header file to prepend to every source file being compiled (both arc\nand non-arc).\nUse of pch files is actively discouraged in BUILD files, and this should be\nconsidered deprecated. Since pch files are not actually precompiled this is not\na build-speed enhancement, and instead is just a global dependency. From a build\nefficiency point of view you are actually better including what you need directly\nin your sources where you need it."
      is_mandatory: true
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "sdk_dylibs"
      doc: "Names of SDK .dylib libraries to link with. For instance, \"libz\" or\n\"libarchive\".\n\n\"libc++\" is included automatically if the binary has any C++ or\nObjective-C++ sources in its dependency tree. When linking a binary,\nall libraries named in that binary\'s transitive dependency graph are\nused."
      default_value: "[]"
    }
    param {
      name: "sdk_frameworks"
      doc: "Names of SDK frameworks to link with (e.g. \"AddressBook\", \"QuartzCore\").\n\n<p> When linking a top level Apple binary, all SDK frameworks listed in that binary\'s\ntransitive dependency graph are linked."
      default_value: "[]"
    }
    param {
      name: "sdk_includes"
      doc: "List of <code>#include/#import</code> search paths to add to this target\nand all depending targets, where each path is relative to\n<code>$(SDKROOT)/usr/include</code>."
      default_value: "[]"
    }
    param {
      name: "stamp"
      default_value: "false"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "textual_hdrs"
      doc: "The list of C, C++, Objective-C, and Objective-C++ files that are\nincluded as headers by source files in this rule or by users of this\nlibrary. Unlike hdrs, these will not be compiled separately from the\nsources."
      default_value: "[]"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
    param {
      name: "weak_sdk_frameworks"
      doc: "Names of SDK frameworks to weakly link with. For instance,\n\"MediaAccessibility\".\n\nIn difference to regularly linked SDK frameworks, symbols\nfrom weakly linked frameworks do not cause an error if they\nare not present at runtime."
      default_value: "[]"
    }
  }
  doc: "<p>This rule produces a static library from the given Objective-C source files.</p>"
  api_context: BUILD
}
global {
  name: "package"
  callable {
    param {
      name: "**kwargs"
      doc: "See the <a href=\"/reference/be/functions#package\"><code>package()</code></a> function in the Build Encyclopedia for applicable arguments."
      is_star_star_arg: true
    }
  }
  doc: "Declares metadata that applies to every rule in the package. It must be called at most once within a package (BUILD file). If called, it should be the first call in the BUILD file, right after the <code>load()</code> statements."
  api_context: BUILD
}
global {
  name: "package_group"
  callable {
    param {
      name: "name"
      doc: "The unique name for this rule."
      is_mandatory: true
    }
    param {
      name: "packages"
      doc: "A complete enumeration of packages in this group."
      default_value: "[]"
    }
    param {
      name: "includes"
      doc: "Other package groups that are included in this one."
      default_value: "[]"
    }
  }
  doc: "This function defines a set of packages and assigns a label to the group. The label can be referenced in <code>visibility</code> attributes."
  api_context: BUILD
}
global {
  name: "package_name"
  callable {
  }
  doc: "The name of the package being evaluated, without the repository name. For example, in the BUILD file <code>some/package/BUILD</code>, its value will be <code>some/package</code>. If the BUILD file calls a function defined in a .bzl file, <code>package_name()</code> will match the caller BUILD file package."
  api_context: BUILD
}
global {
  name: "package_relative_label"
  callable {
    param {
      name: "input"
      doc: "The input label string or Label object. If a Label object is passed, it\'s returned as is."
      is_mandatory: true
    }
  }
  doc: "Converts the input string into a <a href=\'../builtins/Label.html\'>Label</a> object, in the context of the package currently being initialized (that is, the <code>BUILD</code> file for which the current macro is executing). If the input is already a <code>Label</code>, it is returned unchanged.<p>This function may only be called while evaluating a BUILD file and the macros it directly or indirectly calls; it may not be called in (for instance) a rule implementation function. <p>The result of this function is the same <code>Label</code> value as would be produced by passing the given string to a label-valued attribute of a target declared in the BUILD file. <p><i>Usage note:</i> The difference between this function and <a href=\'../builtins/Label.html#Label\'>Label()</a></code> is that <code>Label()</code> uses the context of the package of the <code>.bzl</code> file that called it, not the package of the <code>BUILD</code> file. Use <code>Label()</code> when you need to refer to a fixed target that is hardcoded into the macro, such as a compiler. Use <code>package_relative_label()</code> when you need to normalize a label string supplied by the BUILD file to a <code>Label</code> object. (There is no way to convert a string to a <code>Label</code> in the context of a package other than the BUILD file or the calling .bzl file. For that reason, outer macros should always prefer to pass Label objects to inner macros rather than label strings.)"
  api_context: BUILD
}
global {
  name: "platform"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "allowed_toolchain_types"
      default_value: "[]"
    }
    param {
      name: "check_toolchain_types"
      default_value: "false"
    }
    param {
      name: "constraint_values"
      doc: "        The combination of constraint choices that this platform comprises. In order for a platform\n        to apply to a given environment, the environment must have at least the values in this list.\n\n        <p>Each <code>constraint_value</code> in this list must be for a different\n        <code>constraint_setting</code>. For example, you cannot define a platform that requires the\n        cpu architecture to be both <code>@platforms//cpu:x86_64</code> and\n        <code>@platforms//cpu:arm</code>.\n"
      default_value: "[]"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_properties"
      doc: "        A map of strings that affect the way actions are executed remotely. Bazel makes no attempt\n        to interpret this, it is treated as opaque data that\'s forwarded via the Platform field of\n        the  <a href=\"https://github.com/bazelbuild/remote-apis\">remote execution protocol</a>.\n\n        This includes any data from the parent platform\'s <code>exec_properties</code> attributes.\n        If the child and parent platform define the same keys, the child\'s values are kept. Any\n        keys associated with a value that is an empty string are removed from the dictionary.\n\n        This attribute is a full replacement for the deprecated\n        <code>remote_execution_properties</code>.\n"
      default_value: "{}"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "flags"
      doc: "        A list of flags that will be enabled when this platform is used as the target platform in\n        a configuration. Only flags that can be set in transitions are allowed to be used.\n"
      default_value: "[]"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "parents"
      doc: "        The label of a <code>platform</code> target that this platform should inherit from. Although\n        the attribute takes a list, there should be no more than one platform present. Any\n        constraint_settings not set directly on this platform will be found in the parent platform.\n        See the section on <a href=\"#platform_inheritance\">Platform Inheritance</a> for details.\n"
      default_value: "[]"
    }
    param {
      name: "remote_execution_properties"
      doc: "        DEPRECATED. Please use exec_properties attribute instead.\n\n        A string used to configure a remote execution platform. Actual builds make no attempt to\n        interpret this, it is treated as opaque data that can be used by a specific SpawnRunner.\n        This can include data from the parent platform\'s \"remote_execution_properties\" attribute,\n        by using the macro \"{PARENT_REMOTE_EXECUTION_PROPERTIES}\". See the section on\n        <a href=\"#platform_inheritance\">Platform Inheritance</a> for details.\n"
    }
    param {
      name: "required_settings"
      doc: "        A list of <code>config_setting</code>s that must be satisfied by the target configuration\n        in order for this platform to be used as an execution platform during toolchain resolution.\n\n        Required settings are not inherited from parent platforms.\n"
      default_value: "[]"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\n<p>This rule defines a new platform -- a named collection of constraint choices\n(such as cpu architecture or compiler version) describing an environment in\nwhich part of the build may run.\n\nFor more details, see the <a href=\"/extending/platforms\">Platforms</a> page.\n\n\n<h4 id=\"platform_examples\">Example</h4>\n<p>\n  This defines a platform that describes any environment running Linux on ARM.\n</p>\n<pre class=\"code\">\nplatform(\n    name = \"linux_arm\",\n    constraint_values = [\n        \"@platforms//os:linux\",\n        \"@platforms//cpu:arm\",\n    ],\n)\n</pre>\n\n<h3 id=\"platform_flags\">Platform Flags</h3>\n<p>\n  Platforms may use the <code>flags</code> attribute to specify a list of flags that will be added\n  to the configuration whenever the platform is used as the target platform (i.e., as the value of\n  the <code>--platforms</code> flag).\n</p>\n\n<p>\n  Flags set from the platform effectively have the highest precedence and overwrite any previous\n  value for that flag, from the command line, rc file, or transition.\n</p>\n\n<h4 id=\"platform_flags_examples\">Example</h4>\n\n<pre class=\"code\">\nplatform(\n    name = \"foo\",\n    flags = [\n        \"--dynamic_mode=fully\",\n        \"--//bool_flag\",\n        \"--no//package:other_bool_flag\",\n    ],\n)\n</pre>\n\n<p>\n  This defines a platform named <code>foo</code>. When this is the target platform (either because\n  the user specified <code>--platforms//:foo</code>, because a transition set the\n  <code>//command_line_option:platforms</code> flag to <code>[\"//:foo\"]</code>, or because\n  <code>//:foo</code> was used as an execution platform), then the given flags will be set in the\n  configuration.\n</p>\n\n<h4 id=platform_flags_repeated>Platforms and Repeatable Flags</h4>\n\n<p>\n  Some flags will accumulate values when they are repeated, such as <code>--features</code>,\n  <code>--copt</code>, any Starlark flag created as <code>config.string(repeatable = True)</code>.\n  These flags are not compatible with setting the flags from the platform: instead, all previous\n  values will be removed and overwritten with the values from the platform.\n</p>\n\n<p>\n  As an example, given the following platform, the invocation <code>build --platforms=//:repeat_demo\n  --features feature_a --features feature_b</code> will end up with the value of the\n  <code>--feature</code> flag being <code>[\"feature_c\", \"feature_d\"]</code>, removing the features\n  set on the command line.\n</p>\n\n<pre class=\"code\">\nplatform(\n    name = \"repeat_demo\",\n    flags = [\n        \"--features=feature_c\",\n        \"--features=feature_d\",\n    ],\n)\n</pre>\n\n<p>\n  For this reason, it is discouraged to use repeatable flags in the <code>flags</code> attribute.\n</p>\n\n<h3 id=\"platform_inheritance\">Platform Inheritance</h3>\n<p>\n  Platforms may use the <code>parents</code> attribute to specify another platform that they will\n  inherit constraint values from. Although the <code>parents</code> attribute takes a list, no\n  more than a single value is currently supported, and specifying multiple parents is an error.\n</p>\n\n<p>\n  When checking for the value of a constraint setting in a platform, first the values directly set\n  (via the <code>constraint_values</code> attribute) are checked, and then the constraint values on\n  the parent. This continues recursively up the chain of parent platforms. In this manner, any\n  values set directly on a platform will override the values set on the parent.\n</p>\n\n<p>\n  Platforms inherit the <code>exec_properties</code> attribute from the parent platform.\n  The dictionary entries in <code>exec_properties</code> of the parent and child platforms\n  will be combined.\n  If the same key appears in both the parent\'s and the child\'s <code>exec_properties</code>,\n  the child\'s value will be used. If the child platform specifies an empty string as a value, the\n  corresponding property will be unset.\n</p>\n\n<p>\n  Platforms can also inherit the (deprecated) <code>remote_execution_properties</code> attribute\n  from the parent platform. Note: new code should use <code>exec_properties</code> instead. The\n  logic described below is maintained to be compatible with legacy behavior but will be removed\n  in the future.\n\n  The logic for setting the <code>remote_execution_platform</code> is as follows when there\n  is a parent platform:\n\n  <ol>\n    <li>\n      If <code>remote_execution_property</code> is not set on the child platform, the parent\'s\n      <code>remote_execution_properties</code> will be used.\n    </li>\n    <li>\n      If <code>remote_execution_property</code> is set on the child platform, and contains the\n      literal string </code>{PARENT_REMOTE_EXECUTION_PROPERTIES}</code>, that macro will be\n      replaced with the contents of the parent\'s <code>remote_execution_property</code> attribute.\n    </li>\n    <li>\n      If <code>remote_execution_property</code> is set on the child platform, and does not contain\n      the macro, the child\'s <code>remote_execution_property</code> will be used unchanged.\n    </li>\n  </ol>\n</p>\n\n<p>\n  <em>Since <code>remote_execution_properties</code> is deprecated and will be phased out, mixing\n  <code>remote_execution_properties</code> and <code>exec_properties</code> in the same\n  inheritance chain is not allowed.</em>\n  Prefer to use <code>exec_properties</code> over the deprecated\n  <code>remote_execution_properties</code>.\n</p>\n\n<h4 id=\"platform_inheritance_examples\">Example: Constraint Values</h4>\n<pre class=\"code\">\nplatform(\n    name = \"parent\",\n    constraint_values = [\n        \"@platforms//os:linux\",\n        \"@platforms//cpu:arm\",\n    ],\n)\nplatform(\n    name = \"child_a\",\n    parents = [\":parent\"],\n    constraint_values = [\n        \"@platforms//cpu:x86_64\",\n    ],\n)\nplatform(\n    name = \"child_b\",\n    parents = [\":parent\"],\n)\n</pre>\n\n<p>\n  In this example, the child platforms have the following properties:\n\n  <ul>\n    <li>\n      <code>child_a</code> has the constraint values <code>@platforms//os:linux</code> (inherited\n      from the parent) and <code>@platforms//cpu:x86_64</code> (set directly on the platform).\n    </li>\n    <li>\n      <code>child_b</code> inherits all constraint values from the parent, and doesn\'t set any of\n      its own.\n    </li>\n  </ul>\n</p>\n\n<h4 id=\"platform_inheritance_exec_examples\">Example: Execution properties</h4>\n<pre class=\"code\">\nplatform(\n    name = \"parent\",\n    exec_properties = {\n      \"k1\": \"v1\",\n      \"k2\": \"v2\",\n    },\n)\nplatform(\n    name = \"child_a\",\n    parents = [\":parent\"],\n)\nplatform(\n    name = \"child_b\",\n    parents = [\":parent\"],\n    exec_properties = {\n      \"k1\": \"child\"\n    }\n)\nplatform(\n    name = \"child_c\",\n    parents = [\":parent\"],\n    exec_properties = {\n      \"k1\": \"\"\n    }\n)\nplatform(\n    name = \"child_d\",\n    parents = [\":parent\"],\n    exec_properties = {\n      \"k3\": \"v3\"\n    }\n)\n</pre>\n\n<p>\n  In this example, the child platforms have the following properties:\n\n  <ul>\n    <li>\n      <code>child_a</code> inherits the \"exec_properties\" of the parent and does not set its own.\n    </li>\n    <li>\n      <code>child_b</code> inherits the parent\'s <code>exec_properties</code> and overrides the\n      value of <code>k1</code>. Its <code>exec_properties</code> will be:\n      <code>{ \"k1\": \"child\", \"k2\": \"v2\" }</code>.\n    </li>\n    <li>\n      <code>child_c</code> inherits the parent\'s <code>exec_properties</code> and unsets\n      <code>k1</code>. Its <code>exec_properties</code> will be:\n      <code>{ \"k2\": \"v2\" }</code>.\n    </li>\n    <li>\n      <code>child_d</code> inherits the parent\'s <code>exec_properties</code> and adds a new\n      property. Its <code>exec_properties</code> will be:\n      <code>{ \"k1\": \"v1\",  \"k2\": \"v2\", \"k3\": \"v3\" }</code>.\n    </li>\n  </ul>\n</p>\n\n"
  api_context: BUILD
}
global {
  name: "propeller_optimize"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "cc_profile"
      doc: "Label of the profile passed to the various compile actions.  This file has\nthe .txt extension."
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "deprecation"
    }
    param {
      name: "exec_compatible_with"
      default_value: "[]"
    }
    param {
      name: "exec_properties"
      default_value: "{}"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "ld_profile"
      doc: "Label of the profile passed to the link action.  This file has\nthe .txt extension."
      is_mandatory: true
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "toolchains"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  doc: "<p>Represents a Propeller optimization profile in the workspace.\nExample:</p>\n\n<pre><code class=\"lang-starlark\">\npropeller_optimize(\n    name = \"layout\",\n    cc_profile = \"//path:cc_profile.txt\",\n    ld_profile = \"//path:ld_profile.txt\"\n)\n</code></pre>"
  api_context: BUILD
}
global {
  name: "proto"
  doc: "A module for protocol message processing."
  api_context: BUILD
  global_variable {
    name: "encodeText"
    callable {
      param {
        name: "x"
        is_mandatory: true
      }
    }
    doc: "Returns the struct argument\'s encoding as a text-format protocol message.\nThe data structure must be recursively composed of strings, ints, floats, or bools, or structs, sequences, and dicts of these types.\n<p>A struct is converted to a message. Fields are emitted in name order.\nEach struct field whose value is None is ignored.\n<p>A sequence (such as a list or tuple) is converted to a repeated field.\nIts elements must not be sequences or dicts.\n<p>A dict is converted to a repeated field of messages with fields named \'key\' and \'value\'.\nEntries are emitted in iteration (insertion) order.\nThe dict\'s keys must be strings or ints, and its values must not be sequences or dicts.\nExamples:<br><pre class=language-python>proto.encode_text(struct(field=123))\n# field: 123\n\nproto.encode_text(struct(field=True))\n# field: true\n\nproto.encode_text(struct(field=[1, 2, 3]))\n# field: 1\n# field: 2\n# field: 3\n\nproto.encode_text(struct(field=\'text\', ignored_field=None))\n# field: \"text\"\n\nproto.encode_text(struct(field=struct(inner_field=\'text\', ignored_field=None)))\n# field {\n#   inner_field: \"text\"\n# }\n\nproto.encode_text(struct(field=[struct(inner_field=1), struct(inner_field=2)]))\n# field {\n#   inner_field: 1\n# }\n# field {\n#   inner_field: 2\n# }\n\nproto.encode_text(struct(field=struct(inner_field=struct(inner_inner_field=\'text\'))))\n# field {\n#    inner_field {\n#     inner_inner_field: \"text\"\n#   }\n# }\n\nproto.encode_text(struct(foo={4: 3, 2: 1}))\n# foo: {\n#   key: 4\n#   value: 3\n# }\n# foo: {\n#   key: 2\n#   value: 1\n# }\n</pre>"
    api_context: BUILD
  }
}
global {
  name: "proto_lang_toolchain"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "toolchain_type"
      default_value: "None"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "**attrs"
      is_star_star_arg: true
    }
  }
  doc: "<p>If using Bazel, please load the rule from <a href=\"https://github.com/bazelbuild/rules_proto\">\nhttps://github.com/bazelbuild/rules_proto</a>.\n\n<p>Specifies how a LANG_proto_library rule (e.g., <code>java_proto_library</code>) should invoke the\nproto-compiler.\nSome LANG_proto_library rules allow specifying which toolchain to use using command-line flags;\nconsult their documentation.\n\n<p>Normally you should not write those kind of rules unless you want to\ntune your Java compiler.\n\n<p>There\'s no compiler. The proto-compiler is taken from the proto_library rule we attach to. It is\npassed as a command-line flag to Blaze.\nSeveral features require a proto-compiler to be invoked on the proto_library rule itself.\nIt\'s beneficial to enforce the compiler that LANG_proto_library uses is the same as the one\n<code>proto_library</code> does.\n\n<h4>Examples</h4>\n\n<p>A simple example would be:\n<pre><code class=\"lang-starlark\">\nproto_lang_toolchain(\n    name = \"javalite_toolchain\",\n    command_line = \"--javalite_out=shared,immutable:$(OUT)\",\n    plugin = \":javalite_plugin\",\n    runtime = \":protobuf_lite\",\n)\n</code></pre>"
  api_context: BUILD
}
global {
  name: "proto_library"
  callable {
    param {
      name: "**kwattrs"
      is_star_star_arg: true
    }
  }
  doc: "<p>If using Bazel, please load the rule from <a href=\"https://github.com/bazelbuild/rules_proto\">\nhttps://github.com/bazelbuild/rules_proto</a>.\n\n<p>Use <code>proto_library</code> to define libraries of protocol buffers which\nmay be used from multiple languages. A <code>proto_library</code> may be listed\nin the <code>deps</code> clause of supported rules, such as\n<code>java_proto_library</code>.\n\n<p>When compiled on the command-line, a <code>proto_library</code> creates a file\nnamed <code>foo-descriptor-set.proto.bin</code>, which is the descriptor set for\nthe messages the rule srcs. The file is a serialized\n<code>FileDescriptorSet</code>, which is described in\n<a href=\"https://developers.google.com/protocol-buffers/docs/techniques#self-description\">\nhttps://developers.google.com/protocol-buffers/docs/techniques#self-description</a>.\n\n<p>It only contains information about the <code>.proto</code> files directly\nmentioned by a <code>proto_library</code> rule; the collection of transitive\ndescriptor sets is available through the\n<code>[ProtoInfo].transitive_descriptor_sets</code> Starlark provider.\nSee documentation in <code>proto_info.bzl</code>.\n\n<p>Recommended code organization:\n<ul>\n<li>One <code>proto_library</code> rule per <code>.proto</code> file.\n<li>A file named <code>foo.proto</code> will be in a rule named <code>foo_proto</code>,\n  which is located in the same package.\n<li>A <code>[language]_proto_library</code> that wraps a <code>proto_library</code>\n  named <code>foo_proto</code> should be called <code>foo_[language]_proto</code>,\n  and be located in the same package.\n</ul>"
  api_context: BUILD
}
global {
  name: "py_binary"
  callable {
    param {
      name: "deps"
      doc: "List of additional libraries to be linked in to the target.\nSee comments about\nthe [`deps` attribute typically defined by\nrules](https://bazel.build/reference/be/common-definitions#typical-attributes).\nThese are typically `py_library` rules.\n\nTargets that only provide data files used at runtime belong in the `data`\nattribute."
      default_value: "[]"
    }
    param {
      name: "srcs"
      doc: "The list of Python source files that are processed to create the target. This\nincludes all your checked-in code and may include generated source files.  The\n`.py` files belong in `srcs` and library targets belong in `deps`. Other binary\nfiles that may be needed at run time belong in `data`."
      is_mandatory: true
    }
    param {
      name: "data"
      doc: "The list of files need by this library at runtime. See comments about\nthe [`data` attribute typically defined by rules](https://bazel.build/reference/be/common-definitions#typical-attributes).\n\nThere is no `py_embed_data` like there is `cc_embed_data` and `go_embed_data`.\nThis is because Python has a concept of runtime resources."
      default_value: "[]"
    }
    param {
      name: "args"
      doc: "<p>\n  List of strings; subject to\n  <a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n  <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution, and\n  <a href=\"#sh-tokenization\">Bourne shell tokenization</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\nCommand line arguments that Bazel will pass to the target when it is executed\neither by the <code>run</code> command or as a test. These arguments are\npassed before the ones that are specified on the <code>bazel run</code> or\n<code>bazel test</code> command line.\n</p>\n\n<p>\n<em class=\"harmful\">NOTE: The arguments are not passed when you run the target\noutside of Bazel (for example, by manually executing the binary in\n<code>bazel-bin/</code>).</em>\n</p>\n"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "env"
      doc: "<p>Dictionary of strings; values are subject to\n<a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n<a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution; default is <code>{}</code></p>\n\n<p>Specifies additional environment variables to set when the target is\n  executed by <code>bazel run</code>.\n</p>\n\n<p>\n  This attribute only applies to native rules, like <code>cc_binary</code>, <code>py_binary</code>,\n  and <code>sh_binary</code>.  It does not apply to Starlark-defined executable rules.\n</p>\n\n<p>\n<em class=\"harmful\">NOTE: The environment variables are not set when you run the target\noutside of Bazel (for example, by manually executing the binary in\n<code>bazel-bin/</code>).</em>\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "imports"
      doc: "List of import directories to be added to the PYTHONPATH.\n\nSubject to \"Make variable\" substitution. These import directories will be added\nfor this rule and all rules that depend on it (note: not the rules this rule\ndepends on. Each directory will be added to `PYTHONPATH` by `py_binary` rules\nthat depend on this rule. The strings are repo-runfiles-root relative,\n\nAbsolute paths (paths that start with `/`) and paths that references a path\nabove the execution root are not allowed and will result in an error."
      default_value: "[]"
    }
    param {
      name: "legacy_create_init"
      doc: "Whether to implicitly create empty `__init__.py` files in the runfiles tree.\nThese are created in every directory containing Python source code or shared\nlibraries, and every parent directory of those directories, excluding the repo\nroot directory. The default, `-1` (auto), means true unless\n`--incompatible_default_to_explicit_init_py` is used. If false, the user is\nresponsible for creating (possibly empty) `__init__.py` files and adding them to\nthe `srcs` of Python targets as required."
      default_value: "-1"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "main"
      doc: "Optional; the name of the source file that is the main entry point of the\napplication. This file must also be listed in `srcs`. If left unspecified,\n`name`, with `.py` appended, is used instead. If `name` does not match any\nfilename in `srcs`, `main` must be specified."
      default_value: "None"
    }
    param {
      name: "output_licenses"
      doc: "<p>List of strings; default is <code>[]</code></p>\n\n<p>\nThe licenses of the output files that this binary generates.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n\n"
    }
    param {
      name: "precompile"
      doc: "Whether py source files **for this target** should be precompiled.\n\nValues:\n\n* `inherit`: Allow the downstream binary decide if precompiled files are used.\n* `enabled`: Compile Python source files at build time.\n* `disabled`: Don\'t compile Python source files at build time.\n\n:::{seealso}\n\n* The {flag}`--precompile` flag, which can override this attribute in some cases\n  and will affect all targets when building.\n* The {obj}`pyc_collection` attribute for transitively enabling precompiling on\n  a per-target basis.\n* The [Precompiling](precompiling) docs for a guide about using precompiling.\n:::"
      default_value: "\"inherit\""
    }
    param {
      name: "precompile_invalidation_mode"
      doc: "How precompiled files should be verified to be up-to-date with their associated\nsource files. Possible values are:\n* `auto`: The effective value will be automatically determined by other build\n  settings.\n* `checked_hash`: Use the pyc file if the hash of the source file matches the hash\n  recorded in the pyc file. This is most useful when working with code that\n  you may modify.\n* `unchecked_hash`: Always use the pyc file; don\'t check the pyc\'s hash against\n  the source file. This is most useful when the code won\'t be modified.\n\nFor more information on pyc invalidation modes, see\nhttps://docs.python.org/3/library/py_compile.html#py_compile.PycInvalidationMode"
      default_value: "\"auto\""
    }
    param {
      name: "precompile_optimize_level"
      doc: "The optimization level for precompiled files.\n\nFor more information about optimization levels, see the `compile()` function\'s\n`optimize` arg docs at https://docs.python.org/3/library/functions.html#compile\n\nNOTE: The value `-1` means \"current interpreter\", which will be the interpreter\nused _at build time when pycs are generated_, not the interpreter used at\nruntime when the code actually runs."
      default_value: "0"
    }
    param {
      name: "precompile_source_retention"
      doc: "Determines, when a source file is compiled, if the source file is kept\nin the resulting output or not. Valid values are:\n\n* `inherit`: Inherit the value from the {flag}`--precompile_source_retention` flag.\n* `keep_source`: Include the original Python source.\n* `omit_source`: Don\'t include the original py source."
      default_value: "\"inherit\""
    }
    param {
      name: "pyc_collection"
      doc: "Determines whether pyc files from dependencies should be manually included.\n\nValid values are:\n* `inherit`: Inherit the value from {flag}`--precompile`.\n* `include_pyc`: Add implicitly generated pyc files from dependencies. i.e.\n  pyc files for targets that specify {attr}`precompile=\"inherit\"`.\n* `disabled`: Don\'t add implicitly generated pyc files. Note that\n  pyc files may still come from dependencies that enable precompiling at the\n  target level."
      default_value: "\"inherit\""
    }
    param {
      name: "python_version"
      doc: "Defunct, unused, does nothing."
      default_value: "\"PY3\""
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "srcs_version"
      doc: "Defunct, unused, does nothing."
      default_value: "\"PY2AND3\""
    }
    param {
      name: "stamp"
      doc: "Whether to encode build information into the binary. Possible values:\n\n* `stamp = 1`: Always stamp the build information into the binary, even in\n  `--nostamp` builds. **This setting should be avoided**, since it potentially kills\n  remote caching for the binary and any downstream actions that depend on it.\n* `stamp = 0`: Always replace build information by constant values. This gives\n  good build result caching.\n* `stamp = -1`: Embedding of build information is controlled by the\n  `--[no]stamp` flag.\n\nStamped binaries are not rebuilt unless their dependencies change.\n\nWARNING: Stamping can harm build performance by reducing cache hits and should\nbe avoided if possible."
      default_value: "-1"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "Creates an executable Python program.\n\nThis is the public macro wrapping the underlying rule. Args are forwarded\non as-is unless otherwise specified. See the underlying {rule}`py_binary`\nrule for detailed attribute documentation.\n\nThis macro affects the following args:\n* `python_version`: cannot be `PY2`\n* `srcs_version`: cannot be `PY2` or `PY2ONLY`\n* `tags`: May have special marker values added, if not already present.\n\nArgs:\n  **attrs: Rule attributes forwarded onto the underlying {rule}`py_binary`."
  api_context: BUILD
}
global {
  name: "py_library"
  callable {
    param {
      name: "deps"
      doc: "List of additional libraries to be linked in to the target.\nSee comments about\nthe [`deps` attribute typically defined by\nrules](https://bazel.build/reference/be/common-definitions#typical-attributes).\nThese are typically `py_library` rules.\n\nTargets that only provide data files used at runtime belong in the `data`\nattribute."
      default_value: "[]"
    }
    param {
      name: "srcs"
      doc: "The list of Python source files that are processed to create the target. This\nincludes all your checked-in code and may include generated source files.  The\n`.py` files belong in `srcs` and library targets belong in `deps`. Other binary\nfiles that may be needed at run time belong in `data`."
      default_value: "[]"
    }
    param {
      name: "data"
      doc: "The list of files need by this library at runtime. See comments about\nthe [`data` attribute typically defined by rules](https://bazel.build/reference/be/common-definitions#typical-attributes).\n\nThere is no `py_embed_data` like there is `cc_embed_data` and `go_embed_data`.\nThis is because Python has a concept of runtime resources."
      default_value: "[]"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "imports"
      doc: "List of import directories to be added to the PYTHONPATH.\n\nSubject to \"Make variable\" substitution. These import directories will be added\nfor this rule and all rules that depend on it (note: not the rules this rule\ndepends on. Each directory will be added to `PYTHONPATH` by `py_binary` rules\nthat depend on this rule. The strings are repo-runfiles-root relative,\n\nAbsolute paths (paths that start with `/`) and paths that references a path\nabove the execution root are not allowed and will result in an error."
      default_value: "[]"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "precompile"
      doc: "Whether py source files **for this target** should be precompiled.\n\nValues:\n\n* `inherit`: Allow the downstream binary decide if precompiled files are used.\n* `enabled`: Compile Python source files at build time.\n* `disabled`: Don\'t compile Python source files at build time.\n\n:::{seealso}\n\n* The {flag}`--precompile` flag, which can override this attribute in some cases\n  and will affect all targets when building.\n* The {obj}`pyc_collection` attribute for transitively enabling precompiling on\n  a per-target basis.\n* The [Precompiling](precompiling) docs for a guide about using precompiling.\n:::"
      default_value: "\"inherit\""
    }
    param {
      name: "precompile_invalidation_mode"
      doc: "How precompiled files should be verified to be up-to-date with their associated\nsource files. Possible values are:\n* `auto`: The effective value will be automatically determined by other build\n  settings.\n* `checked_hash`: Use the pyc file if the hash of the source file matches the hash\n  recorded in the pyc file. This is most useful when working with code that\n  you may modify.\n* `unchecked_hash`: Always use the pyc file; don\'t check the pyc\'s hash against\n  the source file. This is most useful when the code won\'t be modified.\n\nFor more information on pyc invalidation modes, see\nhttps://docs.python.org/3/library/py_compile.html#py_compile.PycInvalidationMode"
      default_value: "\"auto\""
    }
    param {
      name: "precompile_optimize_level"
      doc: "The optimization level for precompiled files.\n\nFor more information about optimization levels, see the `compile()` function\'s\n`optimize` arg docs at https://docs.python.org/3/library/functions.html#compile\n\nNOTE: The value `-1` means \"current interpreter\", which will be the interpreter\nused _at build time when pycs are generated_, not the interpreter used at\nruntime when the code actually runs."
      default_value: "0"
    }
    param {
      name: "precompile_source_retention"
      doc: "Determines, when a source file is compiled, if the source file is kept\nin the resulting output or not. Valid values are:\n\n* `inherit`: Inherit the value from the {flag}`--precompile_source_retention` flag.\n* `keep_source`: Include the original Python source.\n* `omit_source`: Don\'t include the original py source."
      default_value: "\"inherit\""
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "srcs_version"
      doc: "Defunct, unused, does nothing."
      default_value: "\"PY2AND3\""
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "A library of Python code that can be depended upon.\n\nDefault outputs:\n* The input Python sources\n* The precompiled artifacts from the sources.\n\nNOTE: Precompilation affects which of the default outputs are included in the\nresulting runfiles. See the precompile-related attributes and flags for\nmore information.\n\n:::{versionchanged} 0.37.0\nSource files are no longer added to the runfiles directly.\n:::"
  api_context: BUILD
}
global {
  name: "py_runtime"
  callable {
    param {
      name: "abi_flags"
      doc: "The runtime\'s ABI flags, i.e. `sys.abiflags`.\n\nIf not set, then it will be set based on flags."
      default_value: "\"<AUTO>\""
    }
    param {
      name: "bootstrap_template"
      doc: "The bootstrap script template file to use. Should have %python_binary%,\n%workspace_name%, %main%, and %imports%.\n\nThis template, after expansion, becomes the executable file used to start the\nprocess, so it is responsible for initial bootstrapping actions such as finding\nthe Python interpreter, runfiles, and constructing an environment to run the\nintended Python application.\n\nWhile this attribute is currently optional, it will become required when the\nPython rules are moved out of Bazel itself.\n\nThe exact variable names expanded is an unstable API and is subject to change.\nThe API will become more stable when the Python rules are moved out of Bazel\nitself.\n\nSee @bazel_tools//tools/python:python_bootstrap_template.txt for more variables."
      default_value: "\"@rules_python//python/private:bootstrap_template\""
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "coverage_tool"
      doc: "This is a target to use for collecting code coverage information from\n{rule}`py_binary` and {rule}`py_test` targets.\n\nIf set, the target must either produce a single file or be an executable target.\nThe path to the single file, or the executable if the target is executable,\ndetermines the entry point for the python coverage tool.  The target and its\nrunfiles will be added to the runfiles when coverage is enabled.\n\nThe entry point for the tool must be loadable by a Python interpreter (e.g. a\n`.py` or `.pyc` file).  It must accept the command line arguments\nof [`coverage.py`](https://coverage.readthedocs.io), at least including\nthe `run` and `lcov` subcommands."
      default_value: "None"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "files"
      doc: "For an in-build runtime, this is the set of files comprising this runtime.\nThese files will be added to the runfiles of Python binaries that use this\nruntime. For a platform runtime this attribute must not be set."
      default_value: "[]"
    }
    param {
      name: "implementation_name"
      doc: "The Python implementation name (`sys.implementation.name`)"
      default_value: "\"cpython\""
    }
    param {
      name: "interpreter"
      doc: "For an in-build runtime, this is the target to invoke as the interpreter. It\ncan be either of:\n\n* A single file, which will be the interpreter binary. It\'s assumed such\n  interpreters are either self-contained single-file executables or any\n  supporting files are specified in `files`.\n* An executable target. The target\'s executable will be the interpreter binary.\n  Any other default outputs (`target.files`) and plain files runfiles\n  (`runfiles.files`) will be automatically included as if specified in the\n  `files` attribute.\n\n  NOTE: the runfiles of the target may not yet be properly respected/propagated\n  to consumers of the toolchain/interpreter, see\n  bazelbuild/rules_python/issues/1612\n\nFor a platform runtime (i.e. `interpreter_path` being set) this attribute must\nnot be set."
      default_value: "None"
    }
    param {
      name: "interpreter_path"
      doc: "For a platform runtime, this is the absolute path of a Python interpreter on\nthe target platform. For an in-build runtime this attribute must not be set."
      default_value: "\"\""
    }
    param {
      name: "interpreter_version_info"
      doc: "Version information about the interpreter this runtime provides.\n\nIf not specified, uses {obj}`--python_version`\n\nThe supported keys match the names for `sys.version_info`. While the input\nvalues are strings, most are converted to ints. The supported keys are:\n  * major: int, the major version number\n  * minor: int, the minor version number\n  * micro: optional int, the micro version number\n  * releaselevel: optional str, the release level\n  * serial: optional int, the serial number of the release\n\n:::{versionchanged} 0.36.0\n{obj}`--python_version` determines the default value.\n:::"
      default_value: "{}"
    }
    param {
      name: "pyc_tag"
      doc: "Optional string; the tag portion of a pyc filename, e.g. the `cpython-39` infix\nof `foo.cpython-39.pyc`. See PEP 3147. If not specified, it will be computed\nfrom `implementation_name` and `interpreter_version_info`. If no pyc_tag is\navailable, then only source-less pyc generation will function correctly."
      default_value: "\"\""
    }
    param {
      name: "python_version"
      doc: "Whether this runtime is for Python major version 2 or 3. Valid values are `\"PY2\"`\nand `\"PY3\"`.\n\nThe default value is controlled by the `--incompatible_py3_is_default` flag.\nHowever, in the future this attribute will be mandatory and have no default\nvalue."
      default_value: "\"PY3\""
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "stage2_bootstrap_template"
      doc: "The template to use when two stage bootstrapping is enabled\n\n:::{seealso}\n{obj}`PyRuntimeInfo.stage2_bootstrap_template` and {obj}`--bootstrap_impl`\n:::"
      default_value: "\"@rules_python//python/private:stage2_bootstrap_template\""
    }
    param {
      name: "stub_shebang"
      doc: "\"Shebang\" expression prepended to the bootstrapping Python stub script\nused when executing {rule}`py_binary` targets.\n\nSee https://github.com/bazelbuild/bazel/issues/8685 for\nmotivation.\n\nDoes not apply to Windows."
      default_value: "\"#!/usr/bin/env python3\""
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
    param {
      name: "zip_main_template"
      doc: "The template to use for a zip\'s top-level `__main__.py` file.\n\nThis becomes the entry point executed when `python foo.zip` is run.\n\n:::{seealso}\nThe {obj}`PyRuntimeInfo.zip_main_template` field.\n:::"
      default_value: "\"@rules_python//python/private:zip_main_template\""
    }
  }
  doc: "Represents a Python runtime used to execute Python code.\n\nA `py_runtime` target can represent either a *platform runtime* or an *in-build\nruntime*. A platform runtime accesses a system-installed interpreter at a known\npath, whereas an in-build runtime points to an executable target that acts as\nthe interpreter. In both cases, an \"interpreter\" means any executable binary or\nwrapper script that is capable of running a Python script passed on the command\nline, following the same conventions as the standard CPython interpreter.\n\nA platform runtime is by its nature non-hermetic. It imposes a requirement on\nthe target platform to have an interpreter located at a specific path. An\nin-build runtime may or may not be hermetic, depending on whether it points to\na checked-in interpreter or a wrapper script that accesses the system\ninterpreter.\n\nExample\n\n```\nload(\"@rules_python//python:py_runtime.bzl\", \"py_runtime\")\n\npy_runtime(\n    name = \"python-2.7.12\",\n    files = glob([\"python-2.7.12/**\"]),\n    interpreter = \"python-2.7.12/bin/python\",\n)\n\npy_runtime(\n    name = \"python-3.6.0\",\n    interpreter_path = \"/opt/pyenv/versions/3.6.0/bin/python\",\n)\n```"
  api_context: BUILD
}
global {
  name: "py_test"
  callable {
    param {
      name: "deps"
      doc: "List of additional libraries to be linked in to the target.\nSee comments about\nthe [`deps` attribute typically defined by\nrules](https://bazel.build/reference/be/common-definitions#typical-attributes).\nThese are typically `py_library` rules.\n\nTargets that only provide data files used at runtime belong in the `data`\nattribute."
      default_value: "[]"
    }
    param {
      name: "srcs"
      doc: "The list of Python source files that are processed to create the target. This\nincludes all your checked-in code and may include generated source files.  The\n`.py` files belong in `srcs` and library targets belong in `deps`. Other binary\nfiles that may be needed at run time belong in `data`."
      is_mandatory: true
    }
    param {
      name: "data"
      doc: "The list of files need by this library at runtime. See comments about\nthe [`data` attribute typically defined by rules](https://bazel.build/reference/be/common-definitions#typical-attributes).\n\nThere is no `py_embed_data` like there is `cc_embed_data` and `go_embed_data`.\nThis is because Python has a concept of runtime resources."
      default_value: "[]"
    }
    param {
      name: "args"
      doc: "<p>List of strings; subject to\n<a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n<a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution, and\n<a href=\"#sh-tokenization\">Bourne shell tokenization</a>; default is <code>[]</code></p>\n\n<p>Command line arguments that Bazel passes to the target when it is\nexecuted with <code>bazel test</code>.\n\n<p>\nThese arguments are passed before any <code>--test_arg</code> values\nspecified on the <code>bazel test</code> command line.\n</p>\n"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "env"
      doc: "<p>\n  Dictionary of strings; values are subject to\n  <a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n  <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution; default is <code>{}</code>\n</p>\n\n<p>\n  Specifies additional environment variables to set when the test is executed by\n  <code>bazel test</code>.\n</p>\n\n<p>\n  This attribute only applies to native rules, like <code>cc_test</code>,\n  <code>py_test</code>, and <code>sh_test</code>. It does not apply to\n  Starlark-defined test rules. For your own Starlark rules, you can add an \"env\"\n  attribute and use it to populate a\n\n    <a href=\"/rules/lib/toplevel/testing#TestEnvironment\">TestEnvironment</a>\n  \n  Provider.\n</p>\n"
    }
    param {
      name: "env_inherit"
      doc: "<p>List of strings; default is <code>[]</code></p>\n\n<p>Specifies additional environment variables to inherit from the\n  external environment when the test is executed by <code>bazel test</code>.\n</p>\n\n<p>\n  This attribute only applies to native rules, like <code>cc_test</code>, <code>py_test</code>,\n  and <code>sh_test</code>.  It does not apply to Starlark-defined test rules.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "flaky"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>False</code></p>\n\n<p>\nMarks test as flaky.\n</p>\n\n<p>\nIf set, executes the test up to three times, marking it as failed only if it\nfails each time. By default, this attribute is set to False and the test is\nexecuted only once. Note, that use of this attribute is generally discouraged -\ntests should pass reliably when their assertions are upheld.\n</p>\n"
    }
    param {
      name: "imports"
      doc: "List of import directories to be added to the PYTHONPATH.\n\nSubject to \"Make variable\" substitution. These import directories will be added\nfor this rule and all rules that depend on it (note: not the rules this rule\ndepends on. Each directory will be added to `PYTHONPATH` by `py_binary` rules\nthat depend on this rule. The strings are repo-runfiles-root relative,\n\nAbsolute paths (paths that start with `/`) and paths that references a path\nabove the execution root are not allowed and will result in an error."
      default_value: "[]"
    }
    param {
      name: "legacy_create_init"
      doc: "Whether to implicitly create empty `__init__.py` files in the runfiles tree.\nThese are created in every directory containing Python source code or shared\nlibraries, and every parent directory of those directories, excluding the repo\nroot directory. The default, `-1` (auto), means true unless\n`--incompatible_default_to_explicit_init_py` is used. If false, the user is\nresponsible for creating (possibly empty) `__init__.py` files and adding them to\nthe `srcs` of Python targets as required."
      default_value: "-1"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "local"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>False</code></p>\n\n<p>Forces the test to be run locally, without sandboxing.</p>\n\n<p>Setting this to True is equivalent to providing \"local\" as a tag\n(<code>tags=[\"local\"]</code>).</p>\n"
    }
    param {
      name: "main"
      doc: "Optional; the name of the source file that is the main entry point of the\napplication. This file must also be listed in `srcs`. If left unspecified,\n`name`, with `.py` appended, is used instead. If `name` does not match any\nfilename in `srcs`, `main` must be specified."
      default_value: "None"
    }
    param {
      name: "precompile"
      doc: "Whether py source files **for this target** should be precompiled.\n\nValues:\n\n* `inherit`: Allow the downstream binary decide if precompiled files are used.\n* `enabled`: Compile Python source files at build time.\n* `disabled`: Don\'t compile Python source files at build time.\n\n:::{seealso}\n\n* The {flag}`--precompile` flag, which can override this attribute in some cases\n  and will affect all targets when building.\n* The {obj}`pyc_collection` attribute for transitively enabling precompiling on\n  a per-target basis.\n* The [Precompiling](precompiling) docs for a guide about using precompiling.\n:::"
      default_value: "\"inherit\""
    }
    param {
      name: "precompile_invalidation_mode"
      doc: "How precompiled files should be verified to be up-to-date with their associated\nsource files. Possible values are:\n* `auto`: The effective value will be automatically determined by other build\n  settings.\n* `checked_hash`: Use the pyc file if the hash of the source file matches the hash\n  recorded in the pyc file. This is most useful when working with code that\n  you may modify.\n* `unchecked_hash`: Always use the pyc file; don\'t check the pyc\'s hash against\n  the source file. This is most useful when the code won\'t be modified.\n\nFor more information on pyc invalidation modes, see\nhttps://docs.python.org/3/library/py_compile.html#py_compile.PycInvalidationMode"
      default_value: "\"auto\""
    }
    param {
      name: "precompile_optimize_level"
      doc: "The optimization level for precompiled files.\n\nFor more information about optimization levels, see the `compile()` function\'s\n`optimize` arg docs at https://docs.python.org/3/library/functions.html#compile\n\nNOTE: The value `-1` means \"current interpreter\", which will be the interpreter\nused _at build time when pycs are generated_, not the interpreter used at\nruntime when the code actually runs."
      default_value: "0"
    }
    param {
      name: "precompile_source_retention"
      doc: "Determines, when a source file is compiled, if the source file is kept\nin the resulting output or not. Valid values are:\n\n* `inherit`: Inherit the value from the {flag}`--precompile_source_retention` flag.\n* `keep_source`: Include the original Python source.\n* `omit_source`: Don\'t include the original py source."
      default_value: "\"inherit\""
    }
    param {
      name: "pyc_collection"
      doc: "Determines whether pyc files from dependencies should be manually included.\n\nValid values are:\n* `inherit`: Inherit the value from {flag}`--precompile`.\n* `include_pyc`: Add implicitly generated pyc files from dependencies. i.e.\n  pyc files for targets that specify {attr}`precompile=\"inherit\"`.\n* `disabled`: Don\'t add implicitly generated pyc files. Note that\n  pyc files may still come from dependencies that enable precompiling at the\n  target level."
      default_value: "\"inherit\""
    }
    param {
      name: "python_version"
      doc: "Defunct, unused, does nothing."
      default_value: "\"PY3\""
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "shard_count"
      doc: "<p>Non-negative integer less than or equal to 50; default is <code>-1</code></p>\n\n<p>Specifies the number of parallel shards\nto use to run the test.</p>\n\n<p>If set, this value will override any heuristics used to determine the number of\nparallel shards with which to run the test. Note that for some test\nrules, this parameter may be required to enable sharding\nin the first place. Also see <code>--test_sharding_strategy</code>.</p>\n\n<p>If test sharding is enabled, the environment variable <code>\n<a href=\"/reference/test-encyclopedia#initial-conditions\">TEST_TOTAL_SHARDS</a>\n</code> will be set to this value when spawning the test.</p>\n\n<p>Sharding requires the test runner to support the test sharding protocol.\nIf it does not, then it will most likely run every test in every shard, which\nis not what you want.</p>\n\n<p>See\n<a href=\"/reference/test-encyclopedia#test-sharding\">Test Sharding</a>\nin the Test Encyclopedia for details on sharding.</p>\n"
    }
    param {
      name: "size"
      doc: "<p>String <code>\"enormous\"</code>, <code>\"large\"</code>, <code>\"medium\"</code>, or\n  <code>\"small\"</code>; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>\"medium\"</code></p>\n\n<p>Specifies a test target\'s \"heaviness\": how much time/resources it needs to run.</p>\n\n<p>Unit tests are considered \"small\", integration tests \"medium\", and end-to-end tests \"large\" or\n\"enormous\". Bazel uses the size to determine a default timeout, which can be overridden using the\n<code>timeout</code> attribute. The timeout is for all tests in the BUILD target, not for each\nindividual test. When the test is run locally, the <code>size</code> is additionally used for\nscheduling purposes: Bazel tries to respect <code>--local_{ram,cpu}_resources</code> and not\noverwhelm the local machine by running lots of heavy tests at the same time.</p>\n\n<p>Test sizes correspond to the following default timeouts and assumed peak local resource\nusages:</p>\n\n<table style=\"width: 100%\">\n  <tr>\n    <th>Size</th>\n    <th>RAM (in MB)</th>\n    <th>CPU (in CPU cores)</th>\n    <th>Default timeout</th>\n  </tr>\n  <tr>\n    <td>small</td>\n    <td>20</td>\n    <td>1</td>\n    <td>short (1 minute)</td>\n  </tr>\n  <tr>\n    <td>medium</td>\n    <td>100</td>\n    <td>1</td>\n    <td>moderate (5 minutes)</td>\n  </tr>\n  <tr>\n    <td>large</td>\n    <td>300</td>\n    <td>1</td>\n    <td>long (15 minutes)</td>\n  </tr>\n  <tr>\n    <td>enormous</td>\n    <td>800</td>\n    <td>1</td>\n    <td>eternal (60 minutes)</td>\n  </tr>\n</table>\n\n<p>\n  The environment variable\n  <code><a href=\"/reference/test-encyclopedia#initial-conditions\">TEST_SIZE</a></code> will be set to\n  the value of this attribute when spawning the test.\n</p>\n\n"
    }
    param {
      name: "srcs_version"
      doc: "Defunct, unused, does nothing."
      default_value: "\"PY2AND3\""
    }
    param {
      name: "stamp"
      doc: "Whether to encode build information into the binary. Possible values:\n\n* `stamp = 1`: Always stamp the build information into the binary, even in\n  `--nostamp` builds. **This setting should be avoided**, since it potentially kills\n  remote caching for the binary and any downstream actions that depend on it.\n* `stamp = 0`: Always replace build information by constant values. This gives\n  good build result caching.\n* `stamp = -1`: Embedding of build information is controlled by the\n  `--[no]stamp` flag.\n\nStamped binaries are not rebuilt unless their dependencies change.\n\nWARNING: Stamping can harm build performance by reducing cache hits and should\nbe avoided if possible."
      default_value: "0"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "timeout"
      doc: "<p>String <code>\"short\"</code>, <code>\"moderate\"</code>, <code>\"long\"</code>, or\n  <code>\"eternal\"</code>; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is derived\n  from the test\'s <code>size</code> attribute</code></p>\n\n<p>\nHow long the test is expected to run before returning.\n</p>\n\n<p>\nWhile a test\'s size attribute controls resource estimation, a test\'s\ntimeout may be set independently.  If not explicitly specified, the\ntimeout is based on the <a href=\"#test.size\">test\'s size</a>. The test\ntimeout can be overridden with the <code>--test_timeout</code> flag, e.g. for\nrunning under certain conditions which are known to be slow. Test timeout values\ncorrespond to the following time periods:\n</p>\n\n<table style=\"width: 100%\">\n  <tr>\n    <th>Timeout Value</th>\n    <th>Time Period</th>\n  </tr>\n  <tr>\n    <td>short</td>\n    <td>1 minute</td>\n  </tr>\n  <tr>\n    <td>moderate</td>\n    <td>5 minutes</td>\n  </tr>\n  <tr>\n    <td>long</td>\n    <td>15 minutes</td>\n  </tr>\n  <tr>\n    <td>eternal</td>\n    <td>60 minutes</td>\n  </tr>\n</table>\n\n<p>\nFor times other than the above, the test timeout can be overridden with the\n<code>--test_timeout</code> bazel flag, e.g. for manually running under\nconditions which are known to be slow. The <code>--test_timeout</code> values\nare in seconds. For example <code>--test_timeout=120</code> will set the test\ntimeout to two minutes.\n</p>\n\n<p>\n  The environment variable\n  <code><a href=\"/reference/test-encyclopedia#initial-conditions\">TEST_TIMEOUT</a></code> will be set\n  to the test timeout (in seconds) when spawning the test.\n</p>\n\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "Creates an executable Python program.\n\nThis is the public macro wrapping the underlying rule. Args are forwarded\non as-is unless otherwise specified. See\n{rule}`py_test` for detailed attribute documentation.\n\nThis macro affects the following args:\n* `python_version`: cannot be `PY2`\n* `srcs_version`: cannot be `PY2` or `PY2ONLY`\n* `tags`: May have special marker values added, if not already present.\n\nArgs:\n  **attrs: Rule attributes forwarded onto {rule}`py_test`."
  api_context: BUILD
}
global {
  name: "repo_name"
  callable {
  }
  doc: "The canonical name of the repository containing the package currently being evaluated, with no leading at-signs."
  api_context: BUILD
}
global {
  name: "repository_name"
  callable {
  }
  doc: "<strong>Deprecated.</strong> Prefer to use <a href=\"#repo_name\"><code>repo_name</code></a> instead, which doesn\'t contain the spurious leading at-sign, but behaves identically otherwise.<p>The canonical name of the repository containing the package currently being evaluated, with a single at-sign (<code>@</code>) prefixed. For example, in packages that are called into existence by the WORKSPACE stanza <code>local_repository(name=\'local\', path=...)</code> it will be set to <code>@local</code>. In packages in the main repository, it will be set to <code>@</code>."
  api_context: BUILD
}
global {
  name: "select"
  callable {
    param {
      name: "x"
      doc: "A dict that maps configuration conditions to values. Each key is a <a href=\"../builtins/Label.html\">Label</a> or a label string that identifies a config_setting or constraint_value instance. See the <a href=\"https://bazel.build/rules/macros#label-resolution\">documentation on macros</a> for when to use a Label instead of a string."
      is_mandatory: true
    }
    param {
      name: "no_match_error"
      doc: "Optional custom error to report if no condition matches."
      default_value: "\'\'"
    }
  }
  doc: "<code>select()</code> is the helper function that makes a rule attribute <a href=\"/reference/be/common-definitions#configurable-attributes\">configurable</a>. See <a href=\"/reference/be/functions#select\">build encyclopedia</a> for details."
  api_context: BUILD
}
global {
  name: "sh_binary"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deps"
      doc: "The list of \"library\" targets to be aggregated into this target.\nSee general comments about <code>deps</code>\nat <a href=\"/reference/be/common-definitions#typical.deps\">Typical attributes defined by\nmost build rules</a>.\n<p>\n  This attribute should be used to list other <code>sh_library</code> rules that provide\n  interpreted program source code depended on by the code in <code>srcs</code>. The files\n  provided by these rules will be present among the <code>runfiles</code> of this target.\n</p>"
      default_value: "[]"
    }
    param {
      name: "srcs"
      doc: "The list of input files.\n<p>\n  This attribute should be used to list shell script source files that belong to\n  this library. Scripts can load other scripts using the shell\'s <code>source</code>\n  or <code>.</code> command.\n</p>"
      default_value: "[]"
    }
    param {
      name: "data"
      doc: "<a name=\"common.data\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nFiles needed by this rule at runtime. May list file or rule targets. Generally\nallows any target.\n</p>\n\n<p>\nThe default outputs and runfiles of targets in the <code>data</code> attribute\nshould appear in the <code>*.runfiles</code> area of any executable which is\noutput by or has a runtime dependency on this target. This may include data\nfiles or binaries used when this target\'s\n<a href=\"#typical.srcs\"><code>srcs</code></a> are executed. See the\n<a href=\"/concepts/dependencies#data-dependencies\">data dependencies</a>\nsection for more information about how to depend on and use data files.\n</p>\n\n<p>\nNew rules should define a <code>data</code> attribute if they process\ninputs which might use other inputs at runtime. Rules\' implementation functions\nmust also <a href=\"https://bazel.build/rules/rules#runfiles\">populate the target\'s\nrunfiles</a> from the outputs and runfiles of any <code>data</code> attribute,\nas well as runfiles from any dependency attribute which provides either\nsource code or runtime dependencies.\n</p>\n"
    }
    param {
      name: "args"
      doc: "<p>\n  List of strings; subject to\n  <a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n  <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution, and\n  <a href=\"#sh-tokenization\">Bourne shell tokenization</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\nCommand line arguments that Bazel will pass to the target when it is executed\neither by the <code>run</code> command or as a test. These arguments are\npassed before the ones that are specified on the <code>bazel run</code> or\n<code>bazel test</code> command line.\n</p>\n\n<p>\n<em class=\"harmful\">NOTE: The arguments are not passed when you run the target\noutside of Bazel (for example, by manually executing the binary in\n<code>bazel-bin/</code>).</em>\n</p>\n"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "env"
      doc: "<p>Dictionary of strings; values are subject to\n<a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n<a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution; default is <code>{}</code></p>\n\n<p>Specifies additional environment variables to set when the target is\n  executed by <code>bazel run</code>.\n</p>\n\n<p>\n  This attribute only applies to native rules, like <code>cc_binary</code>, <code>py_binary</code>,\n  and <code>sh_binary</code>.  It does not apply to Starlark-defined executable rules.\n</p>\n\n<p>\n<em class=\"harmful\">NOTE: The environment variables are not set when you run the target\noutside of Bazel (for example, by manually executing the binary in\n<code>bazel-bin/</code>).</em>\n</p>\n"
    }
    param {
      name: "env_inherit"
      default_value: "[]"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "output_licenses"
      doc: "<p>List of strings; default is <code>[]</code></p>\n\n<p>\nThe licenses of the output files that this binary generates.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n\n"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "<p>\n  The <code>sh_binary</code> rule is used to declare executable shell scripts.\n  (<code>sh_binary</code> is a misnomer: its outputs aren\'t necessarily binaries.) This rule ensures\n  that all dependencies are built, and appear in the <code>runfiles</code> area at execution time.\n  We recommend that you name your <code>sh_binary()</code> rules after the name of the script minus\n  the extension (e.g. <code>.sh</code>); the rule name and the file name must be distinct.\n  <code>sh_binary</code> respects shebangs, so any available interpreter may be used (eg.\n  <code>#!/bin/zsh</code>)\n</p>\n<h4 id=\"sh_binary_examples\">Example</h4>\n<p>For a simple shell script with no dependencies and some data files:\n</p>\n<pre class=\"code\">\nsh_binary(\n    name = \"foo\",\n    srcs = [\"foo.sh\"],\n    data = glob([\"datafiles/*.txt\"]),\n)\n</pre>"
  api_context: BUILD
}
global {
  name: "sh_library"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deps"
      doc: "The list of \"library\" targets to be aggregated into this target.\nSee general comments about <code>deps</code>\nat <a href=\"/reference/be/common-definitions#typical.deps\">Typical attributes defined by\nmost build rules</a>.\n<p>\n  This attribute should be used to list other <code>sh_library</code> rules that provide\n  interpreted program source code depended on by the code in <code>srcs</code>. The files\n  provided by these rules will be present among the <code>runfiles</code> of this target.\n</p>"
      default_value: "[]"
    }
    param {
      name: "srcs"
      doc: "The list of input files.\n<p>\n  This attribute should be used to list shell script source files that belong to\n  this library. Scripts can load other scripts using the shell\'s <code>source</code>\n  or <code>.</code> command.\n</p>"
      default_value: "[]"
    }
    param {
      name: "data"
      doc: "<a name=\"common.data\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nFiles needed by this rule at runtime. May list file or rule targets. Generally\nallows any target.\n</p>\n\n<p>\nThe default outputs and runfiles of targets in the <code>data</code> attribute\nshould appear in the <code>*.runfiles</code> area of any executable which is\noutput by or has a runtime dependency on this target. This may include data\nfiles or binaries used when this target\'s\n<a href=\"#typical.srcs\"><code>srcs</code></a> are executed. See the\n<a href=\"/concepts/dependencies#data-dependencies\">data dependencies</a>\nsection for more information about how to depend on and use data files.\n</p>\n\n<p>\nNew rules should define a <code>data</code> attribute if they process\ninputs which might use other inputs at runtime. Rules\' implementation functions\nmust also <a href=\"https://bazel.build/rules/rules#runfiles\">populate the target\'s\nrunfiles</a> from the outputs and runfiles of any <code>data</code> attribute,\nas well as runfiles from any dependency attribute which provides either\nsource code or runtime dependencies.\n</p>\n"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "<p>\n  The main use for this rule is to aggregate together a logical\n  \"library\" consisting of related scripts&mdash;programs in an\n  interpreted language that does not require compilation or linking,\n  such as the Bourne shell&mdash;and any data those programs need at\n  run-time. Such \"libraries\" can then be used from\n  the <code>data</code> attribute of one or\n  more <code>sh_binary</code> rules.\n</p>\n\n<p>\n  You can use the <a href=\"/reference/be/general.html#filegroup\"><code>filegroup</code></a> rule to aggregate data\n  files.\n</p>\n\n<p>\n  In interpreted programming languages, there\'s not always a clear\n  distinction between \"code\" and \"data\": after all, the program is\n  just \"data\" from the interpreter\'s point of view. For this reason\n  this rule has three attributes which are all essentially equivalent:\n  <code>srcs</code>, <code>deps</code> and <code>data</code>.\n  The current implementation does not distinguish between the elements of these lists.\n  All three attributes accept rules, source files and generated files.\n  It is however good practice to use the attributes for their usual purpose (as with other rules).\n</p>\n\n<h4 id=\"sh_library_examples\">Examples</h4>\n\n<pre class=\"code\">\nsh_library(\n    name = \"foo\",\n    data = [\n        \":foo_service_script\",  # an sh_binary with srcs\n        \":deploy_foo\",  # another sh_binary with srcs\n    ],\n)\n</pre>"
  api_context: BUILD
}
global {
  name: "sh_test"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deps"
      doc: "The list of \"library\" targets to be aggregated into this target.\nSee general comments about <code>deps</code>\nat <a href=\"/reference/be/common-definitions#typical.deps\">Typical attributes defined by\nmost build rules</a>.\n<p>\n  This attribute should be used to list other <code>sh_library</code> rules that provide\n  interpreted program source code depended on by the code in <code>srcs</code>. The files\n  provided by these rules will be present among the <code>runfiles</code> of this target.\n</p>"
      default_value: "[]"
    }
    param {
      name: "srcs"
      doc: "The list of input files.\n<p>\n  This attribute should be used to list shell script source files that belong to\n  this library. Scripts can load other scripts using the shell\'s <code>source</code>\n  or <code>.</code> command.\n</p>"
      default_value: "[]"
    }
    param {
      name: "data"
      doc: "<a name=\"common.data\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nFiles needed by this rule at runtime. May list file or rule targets. Generally\nallows any target.\n</p>\n\n<p>\nThe default outputs and runfiles of targets in the <code>data</code> attribute\nshould appear in the <code>*.runfiles</code> area of any executable which is\noutput by or has a runtime dependency on this target. This may include data\nfiles or binaries used when this target\'s\n<a href=\"#typical.srcs\"><code>srcs</code></a> are executed. See the\n<a href=\"/concepts/dependencies#data-dependencies\">data dependencies</a>\nsection for more information about how to depend on and use data files.\n</p>\n\n<p>\nNew rules should define a <code>data</code> attribute if they process\ninputs which might use other inputs at runtime. Rules\' implementation functions\nmust also <a href=\"https://bazel.build/rules/rules#runfiles\">populate the target\'s\nrunfiles</a> from the outputs and runfiles of any <code>data</code> attribute,\nas well as runfiles from any dependency attribute which provides either\nsource code or runtime dependencies.\n</p>\n"
    }
    param {
      name: "args"
      doc: "<p>List of strings; subject to\n<a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n<a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution, and\n<a href=\"#sh-tokenization\">Bourne shell tokenization</a>; default is <code>[]</code></p>\n\n<p>Command line arguments that Bazel passes to the target when it is\nexecuted with <code>bazel test</code>.\n\n<p>\nThese arguments are passed before any <code>--test_arg</code> values\nspecified on the <code>bazel test</code> command line.\n</p>\n"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "env"
      doc: "<p>\n  Dictionary of strings; values are subject to\n  <a href=\"/reference/be/make-variables#predefined_label_variables\">$(location)</a> and\n  <a href=\"/reference/be/make-variables\">\"Make variable\"</a> substitution; default is <code>{}</code>\n</p>\n\n<p>\n  Specifies additional environment variables to set when the test is executed by\n  <code>bazel test</code>.\n</p>\n\n<p>\n  This attribute only applies to native rules, like <code>cc_test</code>,\n  <code>py_test</code>, and <code>sh_test</code>. It does not apply to\n  Starlark-defined test rules. For your own Starlark rules, you can add an \"env\"\n  attribute and use it to populate a\n\n    <a href=\"/rules/lib/toplevel/testing#TestEnvironment\">TestEnvironment</a>\n  \n  Provider.\n</p>\n"
    }
    param {
      name: "env_inherit"
      doc: "<p>List of strings; default is <code>[]</code></p>\n\n<p>Specifies additional environment variables to inherit from the\n  external environment when the test is executed by <code>bazel test</code>.\n</p>\n\n<p>\n  This attribute only applies to native rules, like <code>cc_test</code>, <code>py_test</code>,\n  and <code>sh_test</code>.  It does not apply to Starlark-defined test rules.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "flaky"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>False</code></p>\n\n<p>\nMarks test as flaky.\n</p>\n\n<p>\nIf set, executes the test up to three times, marking it as failed only if it\nfails each time. By default, this attribute is set to False and the test is\nexecuted only once. Note, that use of this attribute is generally discouraged -\ntests should pass reliably when their assertions are upheld.\n</p>\n"
    }
    param {
      name: "local"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>False</code></p>\n\n<p>Forces the test to be run locally, without sandboxing.</p>\n\n<p>Setting this to True is equivalent to providing \"local\" as a tag\n(<code>tags=[\"local\"]</code>).</p>\n"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "shard_count"
      doc: "<p>Non-negative integer less than or equal to 50; default is <code>-1</code></p>\n\n<p>Specifies the number of parallel shards\nto use to run the test.</p>\n\n<p>If set, this value will override any heuristics used to determine the number of\nparallel shards with which to run the test. Note that for some test\nrules, this parameter may be required to enable sharding\nin the first place. Also see <code>--test_sharding_strategy</code>.</p>\n\n<p>If test sharding is enabled, the environment variable <code>\n<a href=\"/reference/test-encyclopedia#initial-conditions\">TEST_TOTAL_SHARDS</a>\n</code> will be set to this value when spawning the test.</p>\n\n<p>Sharding requires the test runner to support the test sharding protocol.\nIf it does not, then it will most likely run every test in every shard, which\nis not what you want.</p>\n\n<p>See\n<a href=\"/reference/test-encyclopedia#test-sharding\">Test Sharding</a>\nin the Test Encyclopedia for details on sharding.</p>\n"
    }
    param {
      name: "size"
      doc: "<p>String <code>\"enormous\"</code>, <code>\"large\"</code>, <code>\"medium\"</code>, or\n  <code>\"small\"</code>; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>\"medium\"</code></p>\n\n<p>Specifies a test target\'s \"heaviness\": how much time/resources it needs to run.</p>\n\n<p>Unit tests are considered \"small\", integration tests \"medium\", and end-to-end tests \"large\" or\n\"enormous\". Bazel uses the size to determine a default timeout, which can be overridden using the\n<code>timeout</code> attribute. The timeout is for all tests in the BUILD target, not for each\nindividual test. When the test is run locally, the <code>size</code> is additionally used for\nscheduling purposes: Bazel tries to respect <code>--local_{ram,cpu}_resources</code> and not\noverwhelm the local machine by running lots of heavy tests at the same time.</p>\n\n<p>Test sizes correspond to the following default timeouts and assumed peak local resource\nusages:</p>\n\n<table style=\"width: 100%\">\n  <tr>\n    <th>Size</th>\n    <th>RAM (in MB)</th>\n    <th>CPU (in CPU cores)</th>\n    <th>Default timeout</th>\n  </tr>\n  <tr>\n    <td>small</td>\n    <td>20</td>\n    <td>1</td>\n    <td>short (1 minute)</td>\n  </tr>\n  <tr>\n    <td>medium</td>\n    <td>100</td>\n    <td>1</td>\n    <td>moderate (5 minutes)</td>\n  </tr>\n  <tr>\n    <td>large</td>\n    <td>300</td>\n    <td>1</td>\n    <td>long (15 minutes)</td>\n  </tr>\n  <tr>\n    <td>enormous</td>\n    <td>800</td>\n    <td>1</td>\n    <td>eternal (60 minutes)</td>\n  </tr>\n</table>\n\n<p>\n  The environment variable\n  <code><a href=\"/reference/test-encyclopedia#initial-conditions\">TEST_SIZE</a></code> will be set to\n  the value of this attribute when spawning the test.\n</p>\n\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "timeout"
      doc: "<p>String <code>\"short\"</code>, <code>\"moderate\"</code>, <code>\"long\"</code>, or\n  <code>\"eternal\"</code>; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is derived\n  from the test\'s <code>size</code> attribute</code></p>\n\n<p>\nHow long the test is expected to run before returning.\n</p>\n\n<p>\nWhile a test\'s size attribute controls resource estimation, a test\'s\ntimeout may be set independently.  If not explicitly specified, the\ntimeout is based on the <a href=\"#test.size\">test\'s size</a>. The test\ntimeout can be overridden with the <code>--test_timeout</code> flag, e.g. for\nrunning under certain conditions which are known to be slow. Test timeout values\ncorrespond to the following time periods:\n</p>\n\n<table style=\"width: 100%\">\n  <tr>\n    <th>Timeout Value</th>\n    <th>Time Period</th>\n  </tr>\n  <tr>\n    <td>short</td>\n    <td>1 minute</td>\n  </tr>\n  <tr>\n    <td>moderate</td>\n    <td>5 minutes</td>\n  </tr>\n  <tr>\n    <td>long</td>\n    <td>15 minutes</td>\n  </tr>\n  <tr>\n    <td>eternal</td>\n    <td>60 minutes</td>\n  </tr>\n</table>\n\n<p>\nFor times other than the above, the test timeout can be overridden with the\n<code>--test_timeout</code> bazel flag, e.g. for manually running under\nconditions which are known to be slow. The <code>--test_timeout</code> values\nare in seconds. For example <code>--test_timeout=120</code> will set the test\ntimeout to two minutes.\n</p>\n\n<p>\n  The environment variable\n  <code><a href=\"/reference/test-encyclopedia#initial-conditions\">TEST_TIMEOUT</a></code> will be set\n  to the test timeout (in seconds) when spawning the test.\n</p>\n\n"
    }
    param {
      name: "toolchains"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\n  The set of targets whose <a href=\"/reference/be/make-variables\">Make variables</a> this target is\n  allowed to access. These targets are either instances of rules that provide\n  <code>TemplateVariableInfo</code> or special targets for toolchain types built into Bazel. These\n  include:\n\n<ul>\n    <li><code>@bazel_tools//tools/cpp:toolchain_type</code>\n  <li><code>@rules_java//toolchains:current_java_runtime</code>\n  </ul>\n\n<p>\n  Note that this is distinct from the concept of\n    <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>\n    that is used by rule implementations for platform-dependent configuration. You cannot use this\n  attribute to determine which specific <code>cc_toolchain</code> or <code>java_toolchain</code> a\n  target will use.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "<p>\n  The <code>sh_binary</code> rule is used to declare executable shell scripts.\n  (<code>sh_binary</code> is a misnomer: its outputs aren\'t necessarily binaries.) This rule ensures\n  that all dependencies are built, and appear in the <code>runfiles</code> area at execution time.\n  We recommend that you name your <code>sh_binary()</code> rules after the name of the script minus\n  the extension (e.g. <code>.sh</code>); the rule name and the file name must be distinct.\n  <code>sh_binary</code> respects shebangs, so any available interpreter may be used (eg.\n  <code>#!/bin/zsh</code>)\n</p>\n<h4 id=\"sh_binary_examples\">Example</h4>\n<p>For a simple shell script with no dependencies and some data files:\n</p>\n<pre class=\"code\">\nsh_binary(\n    name = \"foo\",\n    srcs = [\"foo.sh\"],\n    data = glob([\"datafiles/*.txt\"]),\n)\n</pre>"
  api_context: BUILD
}
global {
  name: "starlark_doc_extract"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deps"
      doc: "        A list of targets wrapping the Starlark files which are <code>load()</code>-ed by\n        <code>src</code>. These targets <em>should</em> under normal usage be\n        <a href=\"https://github.com/bazelbuild/bazel-skylib/blob/main/bzl_library.bzl\"><code>bzl_library</code></a>\n        targets, but the <code>starlark_doc_extract</code> rule does not enforce that, and accepts\n        any target which provides Starlark files in its <code>DefaultInfo</code>.\n\n        <p>Note that the wrapped Starlark files must be files in the source tree; Bazel cannot\n        <code>load()</code> generated files.\n"
      default_value: "[]"
    }
    param {
      name: "src"
      doc: "        A Starlark file from which to extract documentation.\n\n        <p>Note that this must be a file in the source tree; Bazel cannot <code>load()</code>\n        generated files.\n"
      is_mandatory: true
    }
    param {
      name: "data"
      doc: "<a name=\"common.data\"></a>\n<p>List of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code></p>\n\n<p>\nFiles needed by this rule at runtime. May list file or rule targets. Generally\nallows any target.\n</p>\n\n<p>\nThe default outputs and runfiles of targets in the <code>data</code> attribute\nshould appear in the <code>*.runfiles</code> area of any executable which is\noutput by or has a runtime dependency on this target. This may include data\nfiles or binaries used when this target\'s\n<a href=\"#typical.srcs\"><code>srcs</code></a> are executed. See the\n<a href=\"/concepts/dependencies#data-dependencies\">data dependencies</a>\nsection for more information about how to depend on and use data files.\n</p>\n\n<p>\nNew rules should define a <code>data</code> attribute if they process\ninputs which might use other inputs at runtime. Rules\' implementation functions\nmust also <a href=\"https://bazel.build/rules/rules#runfiles\">populate the target\'s\nrunfiles</a> from the outputs and runfiles of any <code>data</code> attribute,\nas well as runfiles from any dependency attribute which provides either\nsource code or runtime dependencies.\n</p>\n"
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_values</a></code>\nthat must be present in the execution platform for this target. This is in\naddition to any constraints already set by the rule type. Constraints are used\nto restrict the list of available execution platforms. For more details, see\nthe description of\n  <a href=\"/docs/toolchains#toolchain-resolution\">toolchain resolution</a>.\n  </p>\n"
    }
    param {
      name: "exec_properties"
      doc: "<p>Dictionary of strings; default is <code>{}</code></p>\n\n<p> A dictionary of strings that will be added to the <code>exec_properties</code> of a platform selected for this target. See <code>exec_properties</code> of the <a href=\"platforms-and-toolchains.html#platform\">platform</a> rule.</p>\n\n<p>If a key is present in both the platform and target-level properties, the value will be taken from the target.</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "render_main_repo_name"
      doc: "        If true, render labels in the main repository in emitted documentation with a repo component\n        (in other words, <code>//foo:bar.bzl</code> will be emitted as\n        <code>@main_repo_name//foo:bar.bzl</code>).\n        <p>The name to use for the main repository is obtained from <code>module(name = ...)</code>\n        in the main repository\'s <code>MODULE.bazel</code> file (if Bzlmod is enabled), or from\n        <code>workspace(name = ...)</code> in the main repository\'s <code>WORKSPACE</code> file.\n        <p>This attribute should be set to <code>False</code> when generating documentation for\n        Starlark files which are intended to be used only within the same repository, and to\n        <code>True</code> when generating documentation for Starlark files which are intended to be\n        used from other repositories.\n"
      default_value: "false"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "symbol_names"
      doc: "        An optional list of qualified names of exported functions, rules, providers, or aspects (or\n        structs in which they are nested) for which to extract documentation. Here, a <em>qualified\n        name</em> means the name under which an entity is made available to a user of the module,\n        including any structs in which the entity is nested for namespacing.\n\n        <p><code>starlark_doc_extract</code> emits documentation for an entity if and only if\n        <ol>\n          <li>\n            each component of the entity\'s qualified name is public (in other words, the first\n            character of each component of the qualified name is alphabetic, not <code>\"_\"</code>);\n            <em>and</em>\n          </li>\n          <li>\n            <ol>\n              <li>\n                <em>either</em> the <code>symbol_names</code> list is empty (which is the default\n                case), <em>or</em>\n              </li>\n              <li>\n                the entity\'s qualified name, or the qualified name of a struct in which the entity\n                is nested, is in the <code>symbol_names</code> list.\n              </li>\n            </ol>\n          </li>\n        </ol>\n"
      default_value: "[]"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\n<p><code>starlark_doc_extract()</code> extracts documentation for rules, functions (including\nmacros), aspects, and providers defined or re-exported in a given <code>.bzl</code> or\n<code>.scl</code> file. The output of this rule is a <code>ModuleInfo</code> binary proto as defined\nin\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/protobuf/stardoc_output.proto\">stardoc_output.proto</a>\nin the Bazel source tree.\n\n<h4 id=\"starlark_doc_extract_implicit_outputs\">Implicit output targets</h4>\n        <ul>\n          <li><code><var>name</var>.binaryproto</code> (the default output): A\n            <code>ModuleInfo</code> binary proto.</li>\n          <li><code><var>name</var>.textproto</code> (only built if explicitly requested): the text\n            proto version of <code><var>name</var>.binaryproto</code>.</li>\n        </ul>\n\n\n<p>Warning: the output format of this rule is not guaranteed to be stable. It is intended mainly for\ninternal use by <a href=\"https://github.com/bazelbuild/stardoc\">Stardoc</a>.\n\n"
  api_context: BUILD
}
global {
  name: "subpackages"
  callable {
    param {
      name: "include"
      doc: "The list of glob patterns to include in subpackages scan."
      is_mandatory: true
    }
    param {
      name: "exclude"
      doc: "The list of glob patterns to exclude from subpackages scan."
      default_value: "[]"
    }
    param {
      name: "allow_empty"
      doc: "Whether we fail if the call returns an empty list. By default empty list indicates potential error in BUILD file where the call to subpackages() is superflous.  Setting to true allows this function to succeed in that case."
      default_value: "False"
    }
  }
  doc: "Returns a new mutable list of every direct subpackage of the current package, regardless of file-system directory depth. List returned is sorted and contains the names of subpackages relative to the current package. It is advised to prefer using the methods in bazel_skylib.subpackages module rather than calling this function directly."
  api_context: BUILD
}
global {
  name: "test_suite"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "        List of text tags such as \"small\" or \"database\" or \"-flaky\". Tags may be any valid string.\n        <p>\n          Tags which begin with a \"-\" character are considered negative tags. The\n          preceding \"-\" character is not considered part of the tag, so a suite tag\n          of \"-small\" matches a test\'s \"small\" size. All other tags are considered\n          positive tags.\n        </p>\n        <p>\n          Optionally, to make positive tags more explicit, tags may also begin with the\n          \"+\" character, which will not be evaluated as part of the text of the tag. It\n          merely makes the positive and negative distinction easier to read.\n        </p>\n        <p>\n          Only test rules that match <b>all</b> of the positive tags and <b>none</b> of the negative\n          tags will be included in the test suite. Note that this does not mean that error checking\n          for dependencies on tests that are filtered out is skipped; the dependencies on skipped\n          tests still need to be legal (e.g. not blocked by visibility constraints).\n        </p>\n        <p>\n          The <code>manual</code> tag keyword is treated differently than the above by the\n          \"test_suite expansion\" performed by the <code>bazel test</code> command on invocations\n          involving wildcard\n          <a href=\"https://bazel.build/docs/build#specifying-build-targets\">target patterns</a>.\n          There, <code>test_suite</code> targets tagged \"manual\" are filtered out (and thus not\n          expanded). This behavior is consistent with how <code>bazel build</code> and\n          <code>bazel test</code> handle wildcard target patterns in general. Note that this is\n          explicitly different from how <code>bazel query \'tests(E)\'</code> behaves, as suites are\n          always expanded by the <code>tests</code> query function, regardless of the\n          <code>manual</code> tag.\n        </p>\n        <p>\n          Note that a test\'s <code>size</code> is considered a tag for the purpose of filtering.\n        </p>\n        <p>\n          If you need a <code>test_suite</code> that contains tests with mutually exclusive tags\n          (e.g. all small and medium tests), you\'ll have to create three <code>test_suite</code>\n          rules: one for all small tests, one for all medium tests, and one that includes the\n          previous two.\n        </p>\n"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "tests"
      doc: "        A list of test suites and test targets of any language.\n        <p>\n          Any <code>*_test</code> is accepted here, independent of the language. No\n          <code>*_binary</code> targets are accepted however, even if they happen to run a test.\n          Filtering by the specified <code>tags</code> is only done for tests listed directly in\n          this attribute. If this attribute contains <code>test_suite</code>s, the tests inside\n          those will not be filtered by this <code>test_suite</code> (they are considered to be\n          filtered already).\n        </p>\n        <p>\n          If the <code>tests</code> attribute is unspecified or empty, the rule will default to\n          including all test rules in the current BUILD file that are not tagged as\n          <code>manual</code>. These rules are still subject to <code>tag</code> filtering.\n        </p>\n"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\n<p>\nA <code>test_suite</code> defines a set of tests that are considered \"useful\" to humans. This\nallows projects to define sets of tests, such as \"tests you must run before checkin\", \"our\nproject\'s stress tests\" or \"all small tests.\" The <code>bazel test</code> command respects this sort\nof organization: For an invocation like <code>bazel test //some/test:suite</code>, Bazel first\nenumerates all test targets transitively included by the <code>//some/test:suite</code> target (we\ncall this \"test_suite expansion\"), then Bazel builds and tests those targets.\n</p>\n\n<h4 id=\"test_suite_examples\">Examples</h4>\n\n<p>A test suite to run all of the small tests in the current package.</p>\n<pre class=\"code\">\ntest_suite(\n    name = \"small_tests\",\n    tags = [\"small\"],\n)\n</pre>\n\n<p>A test suite that runs a specified set of tests:</p>\n\n<pre class=\"code\">\ntest_suite(\n    name = \"smoke_tests\",\n    tests = [\n        \"system_unittest\",\n        \"public_api_unittest\",\n    ],\n)\n</pre>\n\n<p>A test suite to run all tests in the current package which are not flaky.</p>\n<pre class=\"code\">\ntest_suite(\n    name = \"non_flaky_test\",\n    tags = [\"-flaky\"],\n)\n</pre>\n\n"
  api_context: BUILD
}
global {
  name: "toolchain"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "distribs"
      doc: "<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code></p>\n\n<p>\n  A list of distribution-method strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "exec_compatible_with"
      doc: "        A list of <code>constraint_value</code>s that must be satisfied by an execution platform in\n        order for this toolchain to be selected for a target building on that platform.\n"
      default_value: "[]"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "licenses"
      doc: "<a name=\"common.licenses\"></a>\n<p>List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[\"none\"]</code></p>\n\n<p>\n  A list of license-type strings to be used for this particular target.\n\nThis is part of a deprecated licensing API that Bazel no longer uses. Don\'t\nuse this.\n</p>\n"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "        A list of <code>constraint_value</code>s that must be satisfied by the target platform in\n        order for this toolchain to be selected for a target building for that platform.\n"
      default_value: "[]"
    }
    param {
      name: "target_settings"
      doc: "        A list of <code>config_setting</code>s that must be satisfied by the target configuration\n        in order for this toolchain to be selected during toolchain resolution.\n"
      default_value: "[]"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "toolchain"
      doc: "        The target representing the actual tool or tool suite that is made available when this\n        toolchain is selected.\n"
      is_mandatory: true
    }
    param {
      name: "toolchain_type"
      doc: "        The label of a <code>toolchain_type</code> target that represents the role that this\n        toolchain serves.\n"
      is_mandatory: true
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\n<p>This rule declares a specific toolchain\'s type and constraints so that it can be selected\nduring toolchain resolution. See the\n<a href=\"https://bazel.build/docs/toolchains\">Toolchains</a> page for more\ndetails.\n\n"
  api_context: BUILD
}
global {
  name: "toolchain_type"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, in addition to\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system, which lets users declare which\ntargets can and cannot depend on each other. For example, externally deployable\nbinaries shouldn\'t depend on libraries with company-secret code. See\n<a href=\"https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/analysis/constraints/ConstraintSemantics.java#L46\">\nConstraintSemantics</a> for details.\n</p>\n"
    }
    param {
      name: "deprecation"
      doc: "<p>String; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>None</code></p>\n\n<p>\nAn explanatory warning message associated with this target.\nTypically this is used to notify users that a target has become obsolete,\nor has become superseded by another rule, is private to a package, or is\nperhaps considered harmful for some reason. It is a good idea to include\nsome reference (like a webpage, a bug number or example migration CLs) so\nthat one can easily find out what changes are required to avoid the message.\nIf there is a new target that can be used as a drop in replacement, it is a\ngood idea to just migrate all users of the old target.\n</p>\n\n<p>\nThis attribute has no effect on the way things are built, but it\nmay affect a build tool\'s diagnostic output.  The build tool issues a\nwarning when a rule with a <code>deprecation</code> attribute is\ndepended upon by a target in another package.\n</p>\n\n<p>\nIntra-package dependencies are exempt from this warning, so that,\nfor example, building the tests of a deprecated rule does not\nencounter a warning.\n</p>\n\n<p>\nIf a deprecated target depends on another deprecated target, no warning\nmessage is issued.\n</p>\n\n<p>\nOnce people have stopped using it, the target can be removed.\n</p>\n"
    }
    param {
      name: "features"
      doc: "<p>List of <i>feature</i> strings; default is <code>[]</code></p>\n\n<p>A feature is string tag that can be enabled or disabled on a target. The\n  meaning of a feature depends on the rule itself.</p>\n\n<p>This <code>features</code> attribute is combined with the <a href=\"/reference/be/functions.html#package\">\npackage</a> level <code>features</code> attribute. For example, if\nthe features [\"a\", \"b\"] are enabled on the package level, and a target\'s\n<code>features</code> attribute contains [\"-a\", \"c\"], the features enabled for the\nrule will be \"b\" and \"c\".\n  <a href=\"https://github.com/bazelbuild/examples/blob/main/rules/features/BUILD\">\n    See example</a>.\n</p>\n\n"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>[]</code></p>\n\n<p>\nThe list of environments this target can be built for, <i>instead</i> of\ndefault-supported environments.\n</p>\n\n<p>\nThis is part of Bazel\'s constraint system. See\n<code><a href=\"#common.compatible_with\">compatible_with</a></code>\nfor details.\n</p>\n"
    }
    param {
      name: "tags"
      doc: "<p>\n  List of strings; <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default is <code>[]</code>\n</p>\n\n<p>\n  <i>Tags</i> can be used on any rule. <i>Tags</i> on test and\n  <code>test_suite</code> rules are useful for categorizing the tests.\n  <i>Tags</i> on non-test targets are used to control sandboxed execution of\n  <code>genrule</code>s and\n\n<a href=\"/rules/concepts\">Starlark</a>\n  actions, and for parsing by humans and/or external tools.\n</p>\n\n<p>\n  Bazel modifies the behavior of its sandboxing code if it finds the following\n  keywords in the <code>tags</code> attribute of any test or <code>genrule</code>\n  target, or the keys of <code>execution_requirements</code> for any Starlark\n  action.\n</p>\n\n<ul>\n    <li><code>no-sandbox</code> keyword results in the action or test never being\n    sandboxed; it can still be cached or run remotely - use <code>no-cache</code>\n    or <code>no-remote</code> to prevent either or both of those.\n  </li>\n  <li><code>no-cache</code> keyword results in the action or test never being\n    cached (locally or remotely). Note: for the purposes of this tag, the disk cache\n    is considered a local cache, whereas the HTTP and gRPC caches are considered\n    remote. Other caches, such as Skyframe or the persistent action cache, are not\n    affected.\n  </li>\n    <li><code>no-remote-cache</code> keyword results in the action or test never being\n    cached remotely (but it may be cached locally; it may also be executed remotely).\n    Note: for the purposes of this tag, the disk cache is considered a local cache,\n    whereas the HTTP and gRPC caches are considered remote. Other caches, such as\n    Skyframe or the persistent action cache, are not affected.\n    If a combination of local disk cache and remote cache are used (combined cache),\n    it\'s treated as a remote cache and disabled entirely unless <code>--incompatible_remote_results_ignore_disk</code>\n    is set in which case the local components will be used.\n  </li>\n    <li><code>no-remote-exec</code> keyword results in the action or test never being\n    executed remotely (but it may be cached remotely).\n  </li>\n\n  <li><code>no-remote</code> keyword prevents the action or test from being executed remotely or\n    cached remotely. This is equivalent to using both\n    <code>no-remote-cache</code> and <code>no-remote-exec</code>.\n      </li>\n   <li><code>no-remote-cache-upload</code> keyword disables upload part of remote caching of a spawn.\n     it does not disable remote execution.\n  </li>\n    <li><code>local</code> keyword precludes the action or test from being remotely cached,\n    remotely executed, or run inside the sandbox.\n    For genrules and tests, marking the rule with the <code>local = True</code>\n    attribute has the same effect.\n  </li>\n\n    <li><code>requires-network</code> keyword allows access to the external\n    network from inside the sandbox.  This tag only has an effect if sandboxing\n    is enabled.\n  </li>\n\n  <li><code>block-network</code> keyword blocks access to the external\n    network from inside the sandbox. In this case, only communication\n    with localhost is allowed. This tag only has an effect if sandboxing is\n    enabled.\n  </li>\n\n  <li><code>requires-fakeroot</code> runs the test or action as uid and gid 0 (i.e., the root\n    user). This is only supported on Linux. This tag takes precedence over the\n    <code class=\'flag\'>--sandbox_fake_username</code> command-line option.\n  </li>\n</ul>\n\n<p>\n  <i>Tags</i> on tests are generally used to annotate a test\'s role in your\n  debug and release process.  Typically, tags are most useful for C++ and Python\n  tests, which lack any runtime annotation ability.  The use of tags and size\n  elements gives flexibility in assembling suites of tests based around codebase\n  check-in policy.\n</p>\n\n<p>\n  Bazel modifies test running behavior if it finds the following keywords in the\n  <code>tags</code> attribute of the test rule:\n</p>\n\n<ul>\n  <li><code>exclusive</code> will force the test to be run in the\n    &quot;exclusive&quot; mode, ensuring that no other tests are running at the\n    same time. Such tests will be executed in serial fashion after all build\n    activity and non-exclusive tests have been completed. Remote execution is\n    disabled for such tests because Bazel doesn\'t have control over what\'s\n    running on a remote machine.\n  </li>\n\n  <li><code>exclusive-if-local</code> will force the test to be run in the\n    &quot;exclusive&quot; mode if it is executed locally, but will run the test in parallel if it\'s\n    executed remotely.\n  </li>\n\n  <li><code>manual</code> keyword will exclude the target from expansion of target pattern wildcards\n    (<code>...</code>, <code>:*</code>, <code>:all</code>, etc.) and <code>test_suite</code> rules\n    which do not list the test explicitly when computing the set of top-level targets to build/run\n    for the <code>build</code>, <code>test</code>, and <code>coverage</code> commands. It does not\n    affect target wildcard or test suite expansion in other contexts, including the\n    <code>query</code> command. Note that <code>manual</code> does not imply that a target should\n    not be built/run automatically by continuous build/test systems. For example, it may be\n    desirable to exclude a target from <code>bazel test ...</code> because it requires specific\n    Bazel flags, but still have it included in properly-configured presubmit or continuous test\n    runs.\n\n      </li>\n\n  <li><code>external</code> keyword will force test to be unconditionally\n    executed (regardless of <code class=\'flag\'>--cache_test_results</code>\n    value).\n  </li>\n\n  </ul>\n\nSee\n<a href=\"/reference/test-encyclopedia#tag-conventions\">Tag Conventions</a>\n in the Test Encyclopedia for more conventions on tags attached to test targets.\n"
    }
    param {
      name: "target_compatible_with"
      doc: "<p>\nList of <a href=\"/concepts/labels\">labels</a>; default is <code>[]</code>\n</p>\n\n<p>\nA list of\n<code><a href=\"platforms-and-toolchains.html#constraint_value\">constraint_value</a></code>s\nthat must be present in the target platform for this target to be considered\n<em>compatible</em>. This is in addition to any constraints already set by the\nrule type. If the target platform does not satisfy all listed constraints then\nthe target is considered <em>incompatible</em>. Incompatible targets are\nskipped for building and testing when the target pattern is expanded\n(e.g. <code>//...</code>, <code>:all</code>). When explicitly specified on the\ncommand line, incompatible targets cause Bazel to print an error and cause a\nbuild or test failure.\n</p>\n\n<p>\nTargets that transitively depend on incompatible targets are themselves\nconsidered incompatible. They are also skipped for building and testing.\n</p>\n\n<p>\nAn empty list (which is the default) signifies that the target is compatible\nwith all platforms.\n<p>\n\n<p>\nAll rules other than <a href=\"workspace.html\">Workspace Rules</a> support this\nattribute.\nFor some rules this attribute has no effect. For example, specifying\n<code>target_compatible_with</code> for a\n<code><a href=\"c-cpp.html#cc_toolchain\">cc_toolchain</a></code> is not useful.\n<p>\n\n<p>\nSee the\n<a href=\"/docs/platforms#skipping-incompatible-targets\">Platforms</a>\npage for more information about incompatible target skipping.\n</p>\n"
    }
    param {
      name: "testonly"
      doc: "<p>Boolean; <a href=\"#configurable-attributes\">nonconfigurable</a>; default is <code>False</code>\n  except for test and test suite targets</p>\n\n<p>\nIf <code>True</code>, only testonly targets (such as tests) can depend on this target.\n</p>\n\n<p>\nEquivalently, a rule that is not <code>testonly</code> is not allowed to\ndepend on any rule that is <code>testonly</code>.\n</p>\n\n<p>\nTests (<code>*_test</code> rules)\nand test suites (<a href=\"/reference/be/general.html#test_suite\">test_suite</a> rules)\nare <code>testonly</code> by default.\n</p>\n\n<p>\nThis attribute is intended to mean that the target should not be\ncontained in binaries that are released to production.\n</p>\n\n<p>\nBecause testonly is enforced at build time, not run time, and propagates\nvirally through the dependency tree, it should be applied judiciously. For\nexample, stubs and fakes that\nare useful for unit tests may also be useful for integration tests\ninvolving the same binaries that will be released to production, and\ntherefore should probably not be marked testonly. Conversely, rules that\nare dangerous to even link in, perhaps because they unconditionally\noverride normal behavior, should definitely be marked testonly.\n</p>\n"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      doc: "<p>List of <a href=\"/concepts/labels\">labels</a>;\n  <a href=\"#configurable-attributes\">nonconfigurable</a>;\n  default varies\n</p>\n\n<p>\n  The <code>visibility</code> attribute controls whether the target can be\n  depended on by targets in other locations. See the documentation for\n  <a href=\"/concepts/visibility\">visibility</a>.\n</p>\n\n<p>\n  For targets declared directly in a BUILD file or in legacy macros called from\n  a BUILD file, the default value is the package\'s\n  <code><a href=\"/reference/be/functions.html#package.default_visibility\">default_visibility</a></code>\n  if specified, or else <code>[\"//visibility:private\"]</code>. For targets\n  declared in one or more symbolic macros, the default value is always just\n  <code>[\"//visibility:private\"]</code> (which makes it useable only within the\n  package containing the macro\'s code).\n</p>\n"
    }
  }
  doc: "\n<p>\n  This rule defines a new type of toolchain -- a simple target that represents a class of tools that\n  serve the same role for different platforms.\n</p>\n\n<p>\n  See the <a href=\"/docs/toolchains\">Toolchains</a> page for more details.\n</p>\n\n<h4 id=\"toolchain_type_examples\">Example</h4>\n<p>\n  This defines a toolchain type for a custom rule.\n</p>\n<pre class=\"code\">\ntoolchain_type(\n    name = \"bar_toolchain_type\",\n)\n</pre>\n\n<p>\n  This can be used in a bzl file.\n</p>\n<pre class=\"code\">\nbar_binary = rule(\n    implementation = _bar_binary_impl,\n    attrs = {\n        \"srcs\": attr.label_list(allow_files = True),\n        ...\n        # No `_compiler` attribute anymore.\n    },\n    toolchains = [\"//bar_tools:toolchain_type\"]\n)\n</pre>\n"
  api_context: BUILD
}
global {
  name: "xcode_config"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "default"
      doc: "The default official version of Xcode to use.\nThe version specified by the provided `xcode_version` target is to be used if\nno `xcode_version` build flag is specified. This is required if any\n`versions` are set. This may not be set if `remote_versions` or\n`local_versions` is set."
      is_mandatory: true
    }
    param {
      name: "deprecation"
    }
    param {
      name: "exec_compatible_with"
      default_value: "[]"
    }
    param {
      name: "exec_properties"
      default_value: "{}"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "local_versions"
      doc: "The `xcode_version` targets that are available locally.\nThese are used along with `local_versions` to select a mutually available\nversion. This may not be set if `versions` is set."
      is_mandatory: true
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "remote_versions"
      doc: "The `xcode_version` targets that are available remotely.\nThese are used along with `remote_versions` to select a mutually available\nversion. This may not be set if `versions` is set."
      is_mandatory: true
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "toolchains"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "versions"
      doc: "Accepted `xcode_version` targets that may be used.\nIf the value of the `xcode_version` build flag matches one of the aliases\nor version number of any of the given `xcode_version` targets, the matching\ntarget will be used. This may not be set if `remote_versions` or\n`local_versions` is set."
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  doc: "A single target of this rule can be referenced by the `--xcode_version_config`\nbuild flag to translate the `--xcode_version` flag into an accepted official\nXcode version. This allows selection of an official Xcode version from a number\nof registered aliases."
  api_context: BUILD
}
global {
  name: "xcode_config_alias"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "deprecation"
    }
    param {
      name: "exec_compatible_with"
      default_value: "[]"
    }
    param {
      name: "exec_properties"
      default_value: "{}"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "toolchains"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  api_context: BUILD
}
global {
  name: "xcode_version"
  callable {
    param {
      name: "name"
      is_mandatory: true
    }
    param {
      name: "aliases"
      doc: "Accepted aliases for this version of Xcode. If the value of the xcode_version build flag matches any of the given alias strings, this Xcode version will be used."
      default_value: "[]"
    }
    param {
      name: "compatible_with"
      default_value: "[]"
    }
    param {
      name: "default_ios_sdk_version"
      doc: "The iOS SDK version that is used by default when this version of Xcode is being used. The `--ios_sdk_version` build flag will override the value specified here."
    }
    param {
      name: "default_macos_sdk_version"
      doc: "The macOS SDK version that is used by default when this version of Xcode is being used. The `--macos_sdk_version` build flag will override the value specified here."
    }
    param {
      name: "default_tvos_sdk_version"
      doc: "The tvOS SDK version that is used by default when this version of Xcode is being used. The `--tvos_sdk_version` build flag will override the value specified here."
    }
    param {
      name: "default_visionos_sdk_version"
      doc: "The visionOS SDK version that is used by default when this version of Xcode is being used."
    }
    param {
      name: "default_watchos_sdk_version"
      doc: "The watchOS SDK version that is used by default when this version of Xcode is being used. The `--watchos_sdk_version` build flag will override the value specified here."
    }
    param {
      name: "deprecation"
    }
    param {
      name: "exec_compatible_with"
      default_value: "[]"
    }
    param {
      name: "exec_properties"
      default_value: "{}"
    }
    param {
      name: "expect_failure"
    }
    param {
      name: "features"
      default_value: "[]"
    }
    param {
      name: "package_metadata"
      default_value: "[]"
    }
    param {
      name: "restricted_to"
      default_value: "[]"
    }
    param {
      name: "tags"
      default_value: "[]"
    }
    param {
      name: "target_compatible_with"
      default_value: "[]"
    }
    param {
      name: "testonly"
      default_value: "false"
    }
    param {
      name: "toolchains"
      default_value: "[]"
    }
    param {
      name: "transitive_configs"
      default_value: "[]"
    }
    param {
      name: "version"
      doc: "The official version number of a version of Xcode."
      is_mandatory: true
    }
    param {
      name: "visibility"
      default_value: "[]"
    }
  }
  api_context: BUILD
}
global {
  name: "archive_override"
  callable {
    param {
      name: "module_name"
      doc: "The name of the Bazel module dependency to apply this override to."
      is_mandatory: true
    }
    param {
      name: "**kwargs"
      doc: "All other arguments are forwarded to the underlying <code>http_archive</code> repo\nrule. Note that the <code>name</code> attribute shouldn\'t be specified; use\n<code>module_name</code> instead."
      is_star_star_arg: true
    }
  }
  doc: "Specifies that this dependency should come from an archive file (zip, gzip, etc) at a\ncertain location, instead of from a registry. Effectively, this dependency will be\nbacked by an <a href=\"../repo/http#http_archive\"><code>http_archive</code></a> rule.\n\n<p>This directive only takes effect in the root module; in other words, if a module is\nused as a dependency by others, its own overrides are ignored."
  api_context: MODULE
}
global {
  name: "bazel_dep"
  callable {
    param {
      name: "name"
      doc: "The name of the module to be added as a direct dependency."
      is_mandatory: true
    }
    param {
      name: "version"
      doc: "The version of the module to be added as a direct dependency."
      default_value: "\'\'"
    }
    param {
      name: "max_compatibility_level"
      doc: "The maximum <code>compatibility_level</code> supported for the module to be added as a direct dependency. The version of the module implies the minimum compatibility_level supported, as well as the maximum if this attribute is not specified."
      default_value: "-1"
    }
    param {
      name: "repo_name"
      doc: "The name of the external repo representing this dependency. This is by default the name of the module."
      default_value: "\'\'"
    }
    param {
      name: "dev_dependency"
      doc: "If true, this dependency will be ignored if the current module is not the root module or `--ignore_dev_dependency` is enabled."
      default_value: "False"
    }
  }
  doc: "Declares a direct dependency on another Bazel module."
  api_context: MODULE
}
global {
  name: "git_override"
  callable {
    param {
      name: "module_name"
      doc: "The name of the Bazel module dependency to apply this override to."
      is_mandatory: true
    }
    param {
      name: "**kwargs"
      doc: "All other arguments are forwarded to the underlying <code>git_repository</code>\nrepo rule. Note that the <code>name</code> attribute shouldn\'t be specified; use\n<code>module_name</code> instead."
      is_star_star_arg: true
    }
  }
  doc: "Specifies that this dependency should come from a certain commit in a Git repository,\ninstead of from a registry. Effectively, this dependency will be backed by a\n<a href=\"../repo/git#git_repository\"><code>git_repository</code></a> rule.\n\n<p>This directive only takes effect in the root module; in other words, if a module is\nused as a dependency by others, its own overrides are ignored."
  api_context: MODULE
}
global {
  name: "include"
  callable {
    param {
      name: "label"
      doc: "The label pointing to the file to include. The label must point to a file in the main repo; in other words, it <strong>must<strong> start with double slashes (<code>//</code>). The name of the file must end with <code>.MODULE.bazel</code> and must not start with <code>.</code>."
      is_mandatory: true
    }
  }
  doc: "Includes the contents of another MODULE.bazel-like file. Effectively, <code>include()</code> behaves as if the included file is textually placed at the location of the <code>include()</code> call, except that variable bindings (such as those used for <code>use_extension</code>) are only ever visible in the file they occur in, not in any included or including files.<p>Only the root module may use <code>include()</code>; it is an error if a <code>bazel_dep</code>\'s MODULE file uses <code>include()</code>.<p>Only files in the main repo may be included.<p><code>include()</code> allows you to segment the root module file into multiple parts, to avoid having an enormous MODULE.bazel file or to better manage access control for individual semantic segments."
  api_context: MODULE
}
global {
  name: "inject_repo"
  callable {
    param {
      name: "extension_proxy"
      doc: "A module extension proxy object returned by a <code>use_extension</code> call."
      is_mandatory: true
    }
    param {
      name: "*args"
      doc: "The repos visible to the current module that should be injected into the\nextension under the same name."
      is_star_arg: true
    }
    param {
      name: "**kwargs"
      doc: "The new repos to inject into the extension, where the values are the names of\nrepos in the scope of the current module and the keys are the name they will be\nvisible under in the extension."
      is_star_star_arg: true
    }
  }
  doc: "Injects one or more new repos into the given module extension.\nThis is ignored if the current module is not the root module or\n<code>--ignore_dev_dependency</code> is enabled.\n\n<p>Use <a href=\"#override_repo\"><code>override_repo</code></a> instead to override an\nexisting repo."
  api_context: MODULE
}
global {
  name: "local_path_override"
  callable {
    param {
      name: "module_name"
      doc: "The name of the Bazel module dependency to apply this override to."
      is_mandatory: true
    }
    param {
      name: "path"
      doc: "The path to the directory where this module is."
      is_mandatory: true
    }
  }
  doc: "Specifies that this dependency should come from a certain directory on local disk,\ninstead of from a registry. Effectively, this dependency will be backed by a\n<code>local_repository</code> rule.\n\n<p>This directive only takes effect in the root module; in other words, if a module is\nused as a dependency by others, its own overrides are ignored."
  api_context: MODULE
}
global {
  name: "module"
  callable {
    param {
      name: "name"
      doc: "The name of the module. Can be omitted only if this module is the root module (as in, if it\'s not going to be depended on by another module). A valid module name must: 1) only contain lowercase letters (a-z), digits (0-9), dots (.), hyphens (-), and underscores (_); 2) begin with a lowercase letter; 3) end with a lowercase letter or digit."
      default_value: "\'\'"
    }
    param {
      name: "version"
      doc: "The version of the module. Can be omitted only if this module is the root module (as in, if it\'s not going to be depended on by another module). The version must be in a relaxed SemVer format; see <a href=\"/external/module#version_format\">the documentation</a> for more details."
      default_value: "\'\'"
    }
    param {
      name: "compatibility_level"
      doc: "The compatibility level of the module; this should be changed every time a major incompatible change is introduced. This is essentially the \"major version\" of the module in terms of SemVer, except that it\'s not embedded in the version string itself, but exists as a separate field. Modules with different compatibility levels participate in version resolution as if they\'re modules with different names, but the final dependency graph cannot contain multiple modules with the same name but different compatibility levels (unless <code>multiple_version_override</code> is in effect). See <a href=\"/external/module#compatibility_level\">the documentation</a> for more details."
      default_value: "0"
    }
    param {
      name: "repo_name"
      doc: "The name of the repository representing this module, as seen by the module itself. By default, the name of the repo is the name of the module. This can be specified to ease migration for projects that have been using a repo name for itself that differs from its module name."
      default_value: "\'\'"
    }
    param {
      name: "bazel_compatibility"
      doc: "A list of bazel versions that allows users to declare which Bazel versions are compatible with this module. It does NOT affect dependency resolution, but bzlmod will use this information to check if your current Bazel version is compatible. The format of this value is a string of some constraint values separated by comma. Three constraints are supported: <=X.X.X: The Bazel version must be equal or older than X.X.X. Used when there is a known incompatible change in a newer version. >=X.X.X: The Bazel version must be equal or newer than X.X.X.Used when you depend on some features that are only available since X.X.X. -X.X.X: The Bazel version X.X.X is not compatible. Used when there is a bug in X.X.X that breaks you, but fixed in later versions."
      default_value: "[]"
    }
  }
  doc: "Declares certain properties of the Bazel module represented by the current Bazel repo. These properties are either essential metadata of the module (such as the name and version), or affect behavior of the current module and its dependents.  <p>It should be called at most once, and if called, it must be the very first directive in the MODULE.bazel file. It can be omitted only if this module is the root module (as in, if it\'s not going to be depended on by another module)."
  api_context: MODULE
}
global {
  name: "multiple_version_override"
  callable {
    param {
      name: "module_name"
      doc: "The name of the Bazel module dependency to apply this override to."
      is_mandatory: true
    }
    param {
      name: "versions"
      doc: "Explicitly specifies the versions allowed to coexist. These versions must already be present in the dependency graph pre-selection. Dependencies on this module will be \"upgraded\" to the nearest higher allowed version at the same compatibility level, whereas dependencies that have a higher version than any allowed versions at the same compatibility level will cause an error."
      is_mandatory: true
    }
    param {
      name: "registry"
      doc: "Overrides the registry for this module; instead of finding this module from the default list of registries, the given registry should be used."
      default_value: "\'\'"
    }
  }
  doc: "Specifies that a dependency should still come from a registry, but multiple versions of it should be allowed to coexist. See <a href=\"/external/module#multiple-version_override\">the documentation</a> for more details. This directive only takes effect in the root module; in other words, if a module is used as a dependency by others, its own overrides are ignored."
  api_context: MODULE
}
global {
  name: "override_repo"
  callable {
    param {
      name: "extension_proxy"
      doc: "A module extension proxy object returned by a <code>use_extension</code> call."
      is_mandatory: true
    }
    param {
      name: "*args"
      doc: "The repos in the extension that should be overridden with the repos of the same\nname in the current module."
      is_star_arg: true
    }
    param {
      name: "**kwargs"
      doc: "The overrides to apply to the repos generated by the extension, where the values\nare the names of repos in the scope of the current module and the keys are the\nnames of the repos they will override in the extension."
      is_star_star_arg: true
    }
  }
  doc: "Overrides one or more repos defined by the given module extension with the given repos\nvisible to the current module. This is ignored if the current module is not the root\nmodule or `--ignore_dev_dependency` is enabled.\n\n<p>Use <a href=\"#inject_repo\"><code>inject_repo</code></a> instead to add a new repo.\n"
  api_context: MODULE
}
global {
  name: "register_execution_platforms"
  callable {
    param {
      name: "dev_dependency"
      doc: "If true, the execution platforms will not be registered if the current module is not the root module or `--ignore_dev_dependency` is enabled."
      default_value: "False"
    }
    param {
      name: "*platform_labels"
      doc: "The target patterns to register."
      is_star_arg: true
    }
  }
  doc: "Specifies already-defined execution platforms to be registered when this module is selected. Should be absolute <a href=\'https://bazel.build/reference/glossary#target-pattern\'>target patterns</a> (ie. beginning with either <code>@</code> or <code>//</code>). See <a href=\"/docs/toolchains\">toolchain resolution</a> for more information. Patterns that expand to multiple targets, such as <code>:all</code>, will be registered in lexicographical order by name."
  api_context: MODULE
}
global {
  name: "register_toolchains"
  callable {
    param {
      name: "dev_dependency"
      doc: "If true, the toolchains will not be registered if the current module is not the root module or `--ignore_dev_dependency` is enabled."
      default_value: "False"
    }
    param {
      name: "*toolchain_labels"
      doc: "The target patterns to register."
      is_star_arg: true
    }
  }
  doc: "Specifies already-defined toolchains to be registered when this module is selected. Should be absolute <a href=\'https://bazel.build/reference/glossary#target-pattern\'>target patterns</a> (ie. beginning with either <code>@</code> or <code>//</code>). See <a href=\"/docs/toolchains\">toolchain resolution</a> for more information. Patterns that expand to multiple targets, such as <code>:all</code>, will be registered in lexicographical order by target name (not the name of the toolchain implementation)."
  api_context: MODULE
}
global {
  name: "single_version_override"
  callable {
    param {
      name: "module_name"
      doc: "The name of the Bazel module dependency to apply this override to."
      is_mandatory: true
    }
    param {
      name: "version"
      doc: "Overrides the declared version of this module in the dependency graph. In other words, this module will be \"pinned\" to this override version. This attribute can be omitted if all one wants to override is the registry or the patches. "
      default_value: "\'\'"
    }
    param {
      name: "registry"
      doc: "Overrides the registry for this module; instead of finding this module from the default list of registries, the given registry should be used."
      default_value: "\'\'"
    }
    param {
      name: "patches"
      doc: "A list of labels pointing to patch files to apply for this module. The patch files must exist in the source tree of the top level project. They are applied in the list order.<p>If a patch makes changes to the MODULE.bazel file, these changes will only be effective if the patch file is provided by the root module."
      default_value: "[]"
    }
    param {
      name: "patch_cmds"
      doc: "Sequence of Bash commands to be applied on Linux/Macos after patches are applied.<p>Changes to the MODULE.bazel file will not be effective."
      default_value: "[]"
    }
    param {
      name: "patch_strip"
      doc: "Same as the --strip argument of Unix patch."
      default_value: "0"
    }
  }
  doc: "Specifies that a dependency should still come from a registry, but its version should be pinned, or its registry overridden, or a list of patches applied. This directive only takes effect in the root module; in other words, if a module is used as a dependency by others, its own overrides are ignored."
  api_context: MODULE
}
global {
  name: "use_extension"
  callable {
    param {
      name: "extension_bzl_file"
      doc: "A label to the Starlark file defining the module extension."
      is_mandatory: true
    }
    param {
      name: "extension_name"
      doc: "The name of the module extension to use. A symbol with this name must be exported by the Starlark file."
      is_mandatory: true
    }
    param {
      name: "dev_dependency"
      doc: "If true, this usage of the module extension will be ignored if the current module is not the root module or `--ignore_dev_dependency` is enabled."
      default_value: "False"
    }
    param {
      name: "isolate"
      doc: "If true, this usage of the module extension will be isolated from all other usages, both in this and other modules. Tags created for this usage do not affect other usages and the repositories generated by the extension for this usage will be distinct from all other repositories generated by the extension.<p>This parameter is currently experimental and only available with the flag <code>--experimental_isolated_extension_usages</code>."
      default_value: "False"
    }
  }
  doc: "Returns a proxy object representing a module extension; its methods can be invoked to create module extension tags."
  api_context: MODULE
}
global {
  name: "use_repo"
  callable {
    param {
      name: "extension_proxy"
      doc: "A module extension proxy object returned by a <code>use_extension</code> call."
      is_mandatory: true
    }
    param {
      name: "*args"
      doc: "The names of the repos to import."
      is_star_arg: true
    }
    param {
      name: "**kwargs"
      doc: "Specifies certain repos to import into the scope of the current module with different names. The keys should be the name to use in the current scope, whereas the values should be the original names exported by the module extension."
      is_star_star_arg: true
    }
  }
  doc: "Imports one or more repos generated by the given module extension into the scope of the current module."
  api_context: MODULE
}
global {
  name: "use_repo_rule"
  callable {
    param {
      name: "repo_rule_bzl_file"
      doc: "A label to the Starlark file defining the repo rule."
      is_mandatory: true
    }
    param {
      name: "repo_rule_name"
      doc: "The name of the repo rule to use. A symbol with this name must be exported by the Starlark file."
      is_mandatory: true
    }
  }
  doc: "Returns a proxy value that can be directly invoked in the MODULE.bazel file as a repository rule, one or more times. Repos created in such a way are only visible to the current module, under the name declared using the <code>name</code> attribute on the proxy. The implicit Boolean <code>dev_dependency</code> attribute can also be used on the proxy to denote that a certain repo is only to be created when the current module is the root module."
  api_context: MODULE
}
global {
  name: "ignore_directories"
  callable {
    param {
      name: "dirs"
      is_mandatory: true
    }
  }
  doc: "The list of directories to ignore in this repository. <p>This function takes a list of strings and a directory is ignored if any of the given strings matches its repository-relative path according to the semantics of the <code>glob()</code> function. This function can be used to ignore directories that are implementation details of source control systems, output files of other build systems, etc."
  api_context: REPO
}
global {
  name: "repo"
  callable {
    param {
      name: "**kwargs"
      doc: "The <code>repo()</code> function accepts exactly the same arguments as the <a href=\"/reference/be/functions#package\"><code>package()</code></a> function in BUILD files."
      is_star_star_arg: true
    }
  }
  doc: "Declares metadata that applies to every rule in the repository. It must be called at most once per REPO.bazel file. If called, it must be the first call in the REPO.bazel file."
  api_context: REPO
}
global {
  name: "ignore"
  callable {
    param {
      name: "*args"
      doc: "The canonical repo names of the repos to ignore."
      is_star_arg: true
    }
  }
  doc: "Ignore this repo from vendoring. Bazel will never vendor it or use the corresponding directory (if exists) while building in vendor mode."
  api_context: VENDOR
}
global {
  name: "pin"
  callable {
    param {
      name: "*args"
      doc: "The canonical repo names of the repos to pin."
      is_star_arg: true
    }
  }
  doc: "Pin the contents of this repo under the vendor directory. Bazel will not update this repo while vendoring, and will use the vendored source as if there is a --override_repository flag when building in vendor mode"
  api_context: VENDOR
}
global {
  name: "bind"
  callable {
    param {
      name: "name"
      doc: "The label under \'//external\' to serve as the alias name"
      is_mandatory: true
    }
    param {
      name: "actual"
      doc: "        The target to be aliased.\n\n        <p>This target must exist, but can be any type of rule (including bind).</p>\n\n        <p>If this attribute is omitted, rules referring to this target in <code>//external</code>\n        will simply not see this dependency edge. Note that this is different from omitting the\n        <code>bind</code> rule completely: it is an error if an <code>//external</code> dependency\n        does not have an associated <code>bind</code> rule.\n        </p>\n"
      default_value: "None"
    }
  }
  doc: "\n<p><em>Warning: use of <code>bind()</code> is not recommended. See \"<a\nhref=\"https://github.com/bazelbuild/bazel/issues/1952\">Consider removing bind</a>\" for a long\ndiscussion of its issues and alternatives. In particular, consider the use of\n<a href=\"https://bazel.build/rules/repository_rules#attributes\"><code>repo_mapping</code>\nrepository attributes</a>.</em></p>\n\n<p><em>Warning: <code>select()</code> cannot be used in <code>bind()</code>. See the <a\nhref=\"/docs/configurable-attributes#bind-select\">Configurable Attributes FAQ</a> for\ndetails.</em></p>\n\n<p>Gives a target an alias in the <code>//external</code> package.</p>\n\n<p>The <code>//external</code> package is not a \"normal\" package: there is no external/ directory,\n  so it can be thought of as a \"virtual package\" that contains all bound targets.</p>\n\n<h4 id=\"bind_examples\">Examples</h4>\n\n<p>To give a target an alias, <code>bind</code> it in the <i>WORKSPACE</i> file.  For example,\n  suppose there is a <code>java_library</code> target called\n  <code>//third_party/javacc-v2</code>.  This can be aliased by adding the following to the\n  <i>WORKSPACE</i> file:</p>\n\n<pre class=\"code\">\nbind(\n    name = \"javacc-latest\",\n    actual = \"//third_party/javacc-v2\",\n)\n</pre>\n\n<p>Now targets can depend on <code>//external:javacc-latest</code> instead of\n  <code>//third_party/javacc-v2</code>. If javacc-v3 is released, the <code>bind</code> rule can be\n  updated and all of the BUILD files depending on <code>//external:javacc-latest</code> will now\n  depend on javacc-v3 without needing to be edited.</p>\n\n<p>Bind can also be used to make targets in external repositories available to your workspace.\n  For example, if there is a remote repository named <code>@my-ssl</code> imported in the\n  <i>WORKSPACE</i> file and it has a cc_library target <code>//src:openssl-lib</code>, you can\n  create an alias for this target using <code>bind</code>:</p>\n\n<pre class=\"code\">\nbind(\n    name = \"openssl\",\n    actual = \"@my-ssl//src:openssl-lib\",\n)\n</pre>\n\n<p>Then, in a BUILD file in your workspace, the bound target can be used as follows:</p>\n\n<pre class=\"code\">\ncc_library(\n    name = \"sign-in\",\n    srcs = [\"sign_in.cc\"],\n    hdrs = [\"sign_in.h\"],\n    deps = [\"//external:openssl\"],\n)\n</pre>\n\n<p>Within <code>sign_in.cc</code> and <code>sign_in.h</code>, the header files exposed by\n  <code>//external:openssl</code> can be referred to using their path relative to their repository\n  root.  For example, if the rule definition for <code>@my-ssl//src:openssl-lib</code> looks like\n  this:</p>\n\n<pre class=\"code\">\ncc_library(\n    name = \"openssl-lib\",\n    srcs = [\"openssl.cc\"],\n    hdrs = [\"openssl.h\"],\n)\n</pre>\n\n<p>Then <code>sign_in.cc</code>\'s includes might look like this:</p>\n\n<pre class=\"code\">\n#include \"sign_in.h\"\n#include \"src/openssl.h\"\n</pre>\n\n"
  api_context: WORKSPACE
}
global {
  name: "local_config_platform"
  type: "CLASS: com.google.devtools.build.lib.packages.RuleClass"
  api_context: WORKSPACE
}
global {
  name: "local_repository"
  type: "CLASS: com.google.devtools.build.lib.packages.RuleClass"
  callable {
  }
  doc: "\n<p>Allows targets from a local directory to be bound. This means that the current repository can\n  use targets defined in this other directory. See the <a href=\"/reference/be/workspace.html#bind_examples\">bind\n  section</a> for more details.</p>\n\n<h4 id=\"local_repository_examples\">Examples</h4>\n\n<p>Suppose the current repository is a chat client, rooted at the directory <i>~/chat-app</i>. It\n  would like to use an SSL library which is defined in a different repository: <i>~/ssl</i>.  The\n  SSL library has a target <code>//src:openssl-lib</code>.</p>\n\n<p>The user can add a dependency on this target by adding the following lines to\n  <i>~/chat-app/WORKSPACE</i>:</p>\n\n<pre class=\"code\">\nlocal_repository(\n    name = \"my-ssl\",\n    path = \"/home/user/ssl\",\n)\n</pre>\n\n<p>Targets would specify <code>@my-ssl//src:openssl-lib</code> as a dependency to depend on this\nlibrary.</p>\n\n"
  api_context: WORKSPACE
}
global {
  name: "new_local_repository"
  type: "CLASS: com.google.devtools.build.lib.packages.RuleClass"
  callable {
  }
  doc: "\n<p>Allows a local directory to be turned into a Bazel repository. This means that the current\n  repository can define and use targets from anywhere on the filesystem.</p>\n\n<p>This rule creates a Bazel repository by creating a WORKSPACE file and subdirectory containing\nsymlinks to the BUILD file and path given.  The build file should create targets relative to the\n<code>path</code>. For directories that already contain a WORKSPACE file and a BUILD file, the\n<a href=\"#local_repository\"><code>local_repository</code></a> rule can be used.\n\n<h4 id=\"new_local_repository_examples\">Examples</h4>\n\n<p>Suppose the current repository is a chat client, rooted at the directory <i>~/chat-app</i>. It\n  would like to use an SSL library which is defined in a different directory: <i>~/ssl</i>.</p>\n\n<p>The user can add a dependency by creating a BUILD file for the SSL library\n(~/chat-app/BUILD.my-ssl) containing:\n\n<pre class=\"code\">\njava_library(\n    name = \"openssl\",\n    srcs = glob([\'*.java\'])\n    visibility = [\"//visibility:public\"],\n)\n</pre>\n\n<p>Then they can add the following lines to <i>~/chat-app/WORKSPACE</i>:</p>\n\n<pre class=\"code\">\nnew_local_repository(\n    name = \"my-ssl\",\n    path = \"/home/user/ssl\",\n    build_file = \"BUILD.my-ssl\",\n)\n</pre>\n\n<p>This will create a <code>@my-ssl</code> repository that symlinks to <i>/home/user/ssl</i>.\nTargets can depend on this library by adding <code>@my-ssl//:openssl</code> to a target\'s\ndependencies.</p>\n\n<p>You can also use <code>new_local_repository</code> to include single files, not just\ndirectories. For example, suppose you had a jar file at /home/username/Downloads/piano.jar. You\ncould add just that file to your build by adding the following to your WORKSPACE file:\n\n<pre class=\"code\">\nnew_local_repository(\n    name = \"piano\",\n    path = \"/home/username/Downloads/piano.jar\",\n    build_file = \"BUILD.piano\",\n)\n</pre>\n\n<p>And creating the following BUILD.piano file:</p>\n\n<pre class=\"code\">\njava_import(\n    name = \"play-music\",\n    jars = [\"piano.jar\"],\n    visibility = [\"//visibility:public\"],\n)\n</pre>\n\nThen targets can depend on <code>@piano//:play-music</code> to use piano.jar.\n\n"
  api_context: WORKSPACE
}
global {
  name: "register_execution_platforms"
  callable {
    param {
      name: "*platform_labels"
      doc: "The target patterns to register."
      is_star_arg: true
    }
  }
  doc: "Specifies already-defined execution platforms to be registered. Should be absolute <a href=\'https://bazel.build/reference/glossary#target-pattern\'>target patterns</a> (ie. beginning with either <code>@</code> or <code>//</code>). See <a href=\"/docs/toolchains\">toolchain resolution</a> for more information. Patterns that expand to multiple targets, such as <code>:all</code>, will be registered in lexicographical order by name."
  api_context: WORKSPACE
}
global {
  name: "register_toolchains"
  callable {
    param {
      name: "*toolchain_labels"
      doc: "The target patterns to register."
      is_star_arg: true
    }
  }
  doc: "Specifies already-defined toolchains to be registered. Should be absolute <a href=\'https://bazel.build/reference/glossary#target-pattern\'>target patterns</a> (ie. beginning with either <code>@</code> or <code>//</code>). See <a href=\"/docs/toolchains\">toolchain resolution</a> for more information. Patterns that expand to multiple targets, such as <code>:all</code>, will be registered in lexicographical order by target name (not the name of the toolchain implementation)."
  api_context: WORKSPACE
}
global {
  name: "workspace"
  callable {
    param {
      name: "name"
      doc: "the name of the workspace. Names must start with a letter and can only contain letters, numbers, underscores, dashes, and dots."
      is_mandatory: true
    }
  }
  doc: "<p>This function can only be used in a <code>WORKSPACE</code> file and must be declared before all other functions in the <code>WORKSPACE</code> file. Each <code>WORKSPACE</code> file should have a <code>workspace</code> function.</p><p>Sets the name for this workspace. Workspace names should be a Java-package-style description of the project, using underscores as separators, e.g., github.com/bazelbuild/bazel should use com_github_bazelbuild_bazel. <p>This name is used for the directory that the repository\'s runfiles are stored in. For example, if there is a runfile <code>foo/bar</code> in the local repository and the WORKSPACE file contains <code>workspace(name = \'baz\')</code>, then the runfile will be available under <code>mytarget.runfiles/baz/foo/bar</code>.  If no workspace name is specified, then the runfile will be symlinked to <code>bar.runfiles/foo/bar</code>.</p> <p><a href=\"/docs/external\">Remote repository</a> rule names must be  valid workspace names. For example, you could have  <code>maven_jar(name = \'foo\')</code>, but not  <code>maven_jar(name = \'foo%bar\')</code>, as Bazel would attempt to write a  WORKSPACE file for the <code>maven_jar</code> containing  <code>workspace(name = \'foo%bar\')</code>.</p>"
  api_context: WORKSPACE
}
